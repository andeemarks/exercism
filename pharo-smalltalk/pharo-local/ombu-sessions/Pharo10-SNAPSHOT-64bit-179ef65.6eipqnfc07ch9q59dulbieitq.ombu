OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-12-03T10:36:03.631904+11:00' ],		#prior : OmReference [ 'Pharo10-SNAPSHOT-64bit-179ef65.75bib9b4ccx602fas5tnnp3vs', '8370' ],		#self : OmReference [ '1' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'BaselineOfExercism-CompatibleUserName.1700215054'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ],		#time : DateAndTime [ '2023-12-03T10:36:03.643884+11:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #BaselineOfExercism,		#affectedPackageName : #BaselineOfExercism	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ],		#time : DateAndTime [ '2023-12-03T10:36:03.645105+11:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'BaselineOf subclass: #BaselineOfExercism\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'BaselineOfExercism\'',				#superclassName : 'BaselineOf'			},			#name : #BaselineOfExercism,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BaselineOfExercism class\r\tinstanceVariableNames: \'\''				},				#name : #'BaselineOfExercism class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BaselineOfExercism,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #BaselineOfExercism,			#package : #BaselineOfExercism,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ],		#time : DateAndTime [ '2023-12-03T10:36:03.646608+11:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'BaselineOf subclass: #BaselineOfExercism\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'BaselineOfExercism\'',				#superclassName : 'BaselineOf'			},			#name : #BaselineOfExercism,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'BaselineOfExercism class\r\tinstanceVariableNames: \'\''				},				#name : #'BaselineOfExercism class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #BaselineOfExercism,					#isMetaSide : false				},				#parent : @8,				#content : 'Project baseline to load entire Exercism Pharo track, including all its dependencies',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #BaselineOfExercism,			#package : #BaselineOfExercism,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Project baseline to load entire Exercism Pharo track, including all its dependencies',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ],		#time : DateAndTime [ '2023-12-03T10:36:03.66203+11:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BaselineOfExercism class',				#isMetaSide : true			},			#name : #exerciseGoldenTestPackageNames,			#protocol : #baselines,			#sourceCode : 'exerciseGoldenTestPackageNames\r\t"Answer the list of exercise package names used for golden tests executed by Exercism\'s test runner"\r\r\t^ #(\'Exercise@ExampleAllFail\' \'Exercise@ExampleAllPass\' \'Exercise@ExampleAllRaiseError\' \'Exercise@ExampleEmptySolutionClass\' \'Exercise@ExampleEmptySolutionFile\' \'Exercise@ExampleErrorFailPass\' \'Exercise@ExampleExtensionMethod\' \'Exercise@ExampleSyntaxError\' \'Exercise@ExampleTypoInMethodName\')',			#stamp : '',			#package : #BaselineOfExercism		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ],		#time : DateAndTime [ '2023-12-03T10:36:03.662687+11:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BaselineOfExercism class',				#isMetaSide : true			},			#name : #exercisePackageNames,			#protocol : #baselines,			#sourceCode : 'exercisePackageNames\r\t"Answer the list of exercise package names (as we don\'t yet have proper projects)"\r\r\t^ #(\'Exercise@Acronym\' \'Exercise@Allergies\' \'Exercise@Anagram\' \'Exercise@ArmstrongNumbers\' \'Exercise@AtbashCipher\' \'Exercise@Binary\' \'Exercise@BinarySearchTree\' \'Exercise@Bowling\' \'Exercise@CircularBuffer\' \'Exercise@Clock\' \'Exercise@CollatzConjecture\' \'Exercise@Darts\' \'Exercise@Diamond\' \'Exercise@Die\' \'Exercise@Etl\' \'Exercise@FlattenArray\' \'Exercise@Forth\' \'Exercise@GradeSchool\' \'Exercise@Grains\' \'Exercise@Hamming\' \'Exercise@HelloWorld\' \'Exercise@HighScores\' \'Exercise@IsbnVerifier\' \'Exercise@Isogram\' \'Exercise@Leap\' \'Exercise@Luhn\' \'Exercise@MatchingBrackets\' \'Exercise@Matrix\' \'Exercise@Minesweeper\' \'Exercise@Pangram\' \'Exercise@Proverb\' \'Exercise@Raindrops\' \'Exercise@ResistorColorDuo\' \'Exercise@ReverseString\' \'Exercise@RobotSimulator\' \'Exercise@RomanNumerals\' \'Exercise@SecretHandshake\' \'Exercise@Sieve\' \'Exercise@SimpleCipher\' \'Exercise@SpaceAge\' \'Exercise@SumOfMultiples\' \'Exercise@Tournament\' \'Exercise@TwelveDays\' \'Exercise@TwoFer\' \'Exercise@Welcome\' \'Exercise@WordCount\')',			#stamp : '',			#package : #BaselineOfExercism		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ],		#time : DateAndTime [ '2023-12-03T10:36:03.663064+11:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'BaselineOfExercism class',				#isMetaSide : true			},			#name : #exerciseTestPackageNames,			#protocol : #baselines,			#sourceCode : 'exerciseTestPackageNames\r\t"Answer the list of exercise package names used for testing (as we don\'t yet have proper projects)"\r\r\t^ #(\'ExercismTests-ExerciseEmpty\' \'ExercismTests-ExerciseMany\' \'ExercismTests-ExerciseNormal\' \'ExercismTests-ExerciseExtension\')',			#stamp : '',			#package : #BaselineOfExercism		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ],		#time : DateAndTime [ '2023-12-03T10:36:03.66335+11:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BaselineOfExercism,				#isMetaSide : false			},			#name : #'baseline:',			#protocol : #baselines,			#sourceCode : 'baseline: spec\r\t<baseline>\r\tspec\r\t\tfor: #common\r\t\tdo: [ self setExercismLogo.\r\t\t\tself setUpDependencies: spec.\r\t\t\tself setUpExercisesFor: spec.\r\t\t\tself setUpGoldenTestsFor: spec.\r\t\t\tspec\r\t\t\t\tpackage: \'ExercismTools\';\r\t\t\t\tpackage: \'ExercismMocking\' with: [ spec requires: #(\'Mocketry\') ];\r\t\t\t\tpackage: \'ExercismTests\'\r\t\t\t\t\twith: [ spec\r\t\t\t\t\t\trequires:\r\t\t\t\t\t\t\t#(\'ExercismTools\' \'ExercismMocking\')\r\t\t\t\t\t\t\t\t, self class exerciseTestPackageNames ];\r\t\t\t\tpackage: \'ExercismSystemTests\'\r\t\t\t\t\twith: [ spec requires: #(\'ExercismTests\') ];\r\t\t\t\tpackage: \'ExercismWIP\'\r\t\t\t\t\twith: [ spec requires: #(\'ExercismTools\') ];\r\t\t\t\tpackage: \'ExercismDev\'\r\t\t\t\t\twith: [ spec\r\t\t\t\t\t\trequires:\r\t\t\t\t\t\t\t#(\'ExercismTools\' \'OSSubprocess\' \'OSWinSubprocess\')\r\t\t\t\t\t\t\t\t, self class exercisePackageNames\t"For shelling out to configlet" ];\r\t\t\t\tpackage: \'ExercismTestRunner\'\r\t\t\t\t\twith:\r\t\t\t\t\t\t[ spec requires: #(\'ExercismTools\') , self class exercisePackageNames ];\r\t\t\t\tpackage: \'ExercismTestRunnerTests\'\r\t\t\t\t\twith: [ spec requires: #(\'ExercismTestRunner\' \'ExercismTests\') ];\r\t\t\t\tpackage: \'ExercismV3\';\r\t\t\t\tgroup: \'default\' with: #(\'ExercismTools\' \'Exercise@Welcome\');\r\t\t\t\tgroup: \'mentor\' with: #(\'ExercismDev\');\r\t\t\t\tgroup: \'dev\'\r\t\t\t\t\twith: #(\'ExercismDev\' \'ExercismWIP\' \'ExercismSystemTests\');\r\t\t\t\tgroup: \'testRunner\' with: #(\'ExercismTestRunner\');\r\t\t\t\tgroup: \'testRunnerTests\' with: #(\'ExercismTestRunnerTests\'), self class exerciseGoldenTestPackageNames;\r\t\t\t\tgroup: \'v3\' with: #(\'ExercismV3\')\r\t\t\t].\r\t\t\tspec for: #\'pharo9.x\' do: [ \r\t\t\t\tspec package: \'ExercismTools\' with: [ spec includes: #(\'ExercismPharo90\') ].\r\t\t\t\tspec package: \'ExercismPharo90\' ].\r\t\t\tspec for: #\'pharo11.x\' do: [\r\t\t\t\t"ExercismTools must be loaded prior compatibilty package, to overwrite original class definition of ExTonelWriter"\r\t\t\t\tspec package: \'ExercismTools\' with: [ spec includes: #(\'ExercismPharo110\') ].\r\t\t\t\tspec package: \'ExercismPharo110\' with: [ spec requires: \'ExercismTools\' ]\r\t\t\t]\r\t\t',			#stamp : '',			#package : #BaselineOfExercism		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ],		#time : DateAndTime [ '2023-12-03T10:36:03.663545+11:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BaselineOfExercism,				#isMetaSide : false			},			#name : #projectClass,			#protocol : #baselines,			#sourceCode : 'projectClass\r\t^ MetacelloCypressBaselineProject',			#stamp : '',			#package : #BaselineOfExercism		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ],		#time : DateAndTime [ '2023-12-03T10:36:03.663694+11:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BaselineOfExercism,				#isMetaSide : false			},			#name : #setExercismLogo,			#protocol : #baselines,			#sourceCode : 'setExercismLogo\r\t| exercismLogo |\r\texercismLogo := (AlphaImageMorph\r\t\twithForm:\r\t\t(ZnEasy\r\t\tgetPng:\r\t\t\t\'https://user-images.githubusercontent.com/38899847/48952150-634e9b80-eefe-11e8-890e-7a233d56df65.png\'))\r\t\tlayout: #scaledAspect;\r\t\textent: 100 @ 100;\r\t\tposition: 10 @ 135;\r\t\tlock.\r\tWorld addMorph: exercismLogo',			#stamp : '',			#package : #BaselineOfExercism		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ],		#time : DateAndTime [ '2023-12-03T10:36:03.663837+11:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BaselineOfExercism,				#isMetaSide : false			},			#name : #'setUpDependencies:',			#protocol : #baselines,			#sourceCode : 'setUpDependencies: spec\r\r\tspec \r\t\tbaseline: \'OSSubprocess\'\r \t\twith: [spec repository: \'github://pharo-contributions/OSSubprocess:master/repository\'].\r\t\r\tspec \r\t\tbaseline: \'OSWinSubprocess\'\r \t\twith: [spec repository: \'github://pharo-contributions/OSWinSubprocess:master/repository\'].\r\t\t\t\t\t\r\tspec\r    \tbaseline: \'Mocketry\'\r    \twith: [ spec repository: \'github://dionisiydk/Mocketry:v6.0.x\' ].\r\t\r\tspec\r    \tbaseline: \'Ring2\'\r    \twith: [ spec repository: \'github://pavel-krivanek/Ring2\'; loads: #(calypso)].',			#stamp : '',			#package : #BaselineOfExercism		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ],		#time : DateAndTime [ '2023-12-03T10:36:03.663963+11:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BaselineOfExercism,				#isMetaSide : false			},			#name : #'setUpExercisesFor:',			#protocol : #baselines,			#sourceCode : 'setUpExercisesFor: spec\r\tself class exercisePackageNames, self class exerciseTestPackageNames \r\t\tdo:\r\t\t\t[ :name | spec package: name with: [ spec requires: #(\'ExercismTools\') ] ]',			#stamp : '',			#package : #BaselineOfExercism		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ],		#time : DateAndTime [ '2023-12-03T10:36:03.664081+11:00' ],		#trigger : OmReference [ '1' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #BaselineOfExercism,				#isMetaSide : false			},			#name : #'setUpGoldenTestsFor:',			#protocol : #baselines,			#sourceCode : 'setUpGoldenTestsFor: spec\r\t\r\tself class exerciseGoldenTestPackageNames \r\t\tdo:\r\t\t\t[ :name | spec package: name with: [ spec requires: #(\'ExercismTools\') ] ]',			#stamp : '',			#package : #BaselineOfExercism		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-12-03T10:36:07.748762+11:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'ExercismTools-CompatibleUserName.1700215054'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ],		#time : DateAndTime [ '2023-12-03T10:36:07.798865+11:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #ExercismTools-Core,		#affectedPackageName : #ExercismTools	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ],		#time : DateAndTime [ '2023-12-03T10:36:07.800366+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpTraitAddition {		#trait : RGTraitDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TExercise\r\tinstanceVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : #Trait			},			#name : #TExercise,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TExercise classTrait\r\tinstanceVariableNames: \'\''				},				#name : #'TExercise classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TExercise,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#category : #ExercismTools-Core,			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ],		#time : DateAndTime [ '2023-12-03T10:36:07.804099+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGTraitDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Trait named: #TExercise\r\tinstanceVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : #Trait			},			#name : #TExercise,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#metaClass : RGMetatraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TExercise classTrait\r\tinstanceVariableNames: \'\''				},				#name : #'TExercise classTrait',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TExercise,					#isMetaSide : false				},				#parent : @8,				#content : '# TExercise\r\rI am a trait containing methods for getting exercise meta data from\robjects that play the role of a Exercism version 3 exercise.\r\r## Usage\r\rMy methods reference instance variables and methods that must be \rimplemented by objects that use me. \r\r## Instance Variables \r\rThese will need to be initialized in the using classes `#initialize` \rmethod.\r\r- solutionId \r- customData: An `Array`. This can be safely initialized empty.\r- isActive: A `Boolean`. Is the exercise active (not depricated or for testing).\r- isCustom: A `Boolean`. `true` if `customData` is not empty.\r- uuid: A `String`. The exercises unique ID in the Execism project.\r- version\r- aliasesAndHints: An `Array`. This can be safely initialized empty.\r\r## Methods\r\r### `#configuredExerciseMetadata`\r\rMust answer the configured exercise meta data for this exercise, an `ExercismExercise`.',				#stamp : ''			},			#category : #ExercismTools-Core,			#package : #ExercismTools		},		#oldComment : '',		#newComment : '# TExercise\r\rI am a trait containing methods for getting exercise meta data from\robjects that play the role of a Exercism version 3 exercise.\r\r## Usage\r\rMy methods reference instance variables and methods that must be \rimplemented by objects that use me. \r\r## Instance Variables \r\rThese will need to be initialized in the using classes `#initialize` \rmethod.\r\r- solutionId \r- customData: An `Array`. This can be safely initialized empty.\r- isActive: A `Boolean`. Is the exercise active (not depricated or for testing).\r- isCustom: A `Boolean`. `true` if `customData` is not empty.\r- uuid: A `String`. The exercises unique ID in the Execism project.\r- version\r- aliasesAndHints: An `Array`. This can be safely initialized empty.\r\r## Methods\r\r### `#configuredExerciseMetadata`\r\rMust answer the configured exercise meta data for this exercise, an `ExercismExercise`.',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ],		#time : DateAndTime [ '2023-12-03T10:36:07.822081+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpTraitModification {		#oldTrait : RGMetatraitDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'TExercise classTrait\r\tinstanceVariableNames: \'\''			},			#name : #'TExercise classTrait',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#baseClass : RGTraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Trait named: #TExercise\r\tinstanceVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',					#superclassName : #Trait				},				#name : #TExercise,				#methods : IdentityDictionary { },				#protocols : Set [ ],				#metaClass : @8,				#comment : RGCommentDefinition {					#annotations : IdentityDictionary {						#className : #TExercise,						#isMetaSide : false					},					#parent : @12,					#content : '# TExercise\r\rI am a trait containing methods for getting exercise meta data from\robjects that play the role of a Exercism version 3 exercise.\r\r## Usage\r\rMy methods reference instance variables and methods that must be \rimplemented by objects that use me. \r\r## Instance Variables \r\rThese will need to be initialized in the using classes `#initialize` \rmethod.\r\r- solutionId \r- customData: An `Array`. This can be safely initialized empty.\r- isActive: A `Boolean`. Is the exercise active (not depricated or for testing).\r- isCustom: A `Boolean`. `true` if `customData` is not empty.\r- uuid: A `String`. The exercises unique ID in the Execism project.\r- version\r- aliasesAndHints: An `Array`. This can be safely initialized empty.\r\r## Methods\r\r### `#configuredExerciseMetadata`\r\rMust answer the configured exercise meta data for this exercise, an `ExercismExercise`.',					#stamp : ''				},				#category : #ExercismTools-Core,				#package : #ExercismTools			}		},		#newTrait : RGMetatraitDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'TExercise classTrait\r\tinstanceVariableNames: \'solutionId customData isActive uuid version aliasesAndHints\''			},			#name : #'TExercise classTrait',			#methods : IdentityDictionary { },			#protocols : Set [ ],			#baseClass : RGTraitDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Trait named: #TExercise\r\tinstanceVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',					#superclassName : #Trait				},				#name : #TExercise,				#methods : IdentityDictionary { },				#protocols : Set [ ],				#metaClass : @18,				#comment : RGCommentDefinition {					#annotations : IdentityDictionary {						#className : #TExercise,						#isMetaSide : false					},					#parent : @22,					#content : '# TExercise\r\rI am a trait containing methods for getting exercise meta data from\robjects that play the role of a Exercism version 3 exercise.\r\r## Usage\r\rMy methods reference instance variables and methods that must be \rimplemented by objects that use me. \r\r## Instance Variables \r\rThese will need to be initialized in the using classes `#initialize` \rmethod.\r\r- solutionId \r- customData: An `Array`. This can be safely initialized empty.\r- isActive: A `Boolean`. Is the exercise active (not depricated or for testing).\r- isCustom: A `Boolean`. `true` if `customData` is not empty.\r- uuid: A `String`. The exercises unique ID in the Execism project.\r- version\r- aliasesAndHints: An `Array`. This can be safely initialized empty.\r\r## Methods\r\r### `#configuredExerciseMetadata`\r\rMust answer the configured exercise meta data for this exercise, an `ExercismExercise`.',					#stamp : ''				},				#category : #ExercismTools-Core,				#package : #ExercismTools			}		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ],		#time : DateAndTime [ '2023-12-03T10:36:07.826735+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #ExercismTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'TestCase'			},			#name : #ExercismTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismTest class\r\tinstanceVariableNames: \'solutionId\''				},				#name : #'ExercismTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#isMetaSide : true,							#className : #'ExercismTest class'						},						#name : #solutionId,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ],		#time : DateAndTime [ '2023-12-03T10:36:07.827524+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #ExercismTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'TestCase'			},			#name : #ExercismTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismTest class\r\tinstanceVariableNames: \'solutionId\''				},				#name : #'ExercismTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [					RGClassInstanceVariableDefinition {						#annotations : IdentityDictionary {							#isMetaSide : true,							#className : #'ExercismTest class'						},						#name : #solutionId,						#parent : @13					}				],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismTest,					#isMetaSide : false				},				#parent : @8,				#content : 'I am the root of Exercism test examples but also provide a hook to specify some simple exercise metadata that can be used to generate the exercism config.json file (used by the platform to unlock exercises for users as they progress).',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am the root of Exercism test examples but also provide a hook to specify some simple exercise metadata that can be used to generate the exercism config.json file (used by the platform to unlock exercises for users as they progress).',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ],		#time : DateAndTime [ '2023-12-03T10:36:07.829195+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ExercismTools,		#affectedPackageName : #ExercismTools	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ],		#time : DateAndTime [ '2023-12-03T10:36:07.829743+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ReAbstractRule subclass: #ExercismHintRule\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools\'',				#superclassName : 'ReAbstractRule'			},			#name : #ExercismHintRule,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismHintRule class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismHintRule class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismHintRule,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ],		#time : DateAndTime [ '2023-12-03T10:36:07.840411+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismHintRule subclass: #ExercismHintTwoFerReuseRule\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools\'',				#superclassName : 'ExercismHintRule'			},			#name : #ExercismHintTwoFerReuseRule,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismHintTwoFerReuseRule class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismHintTwoFerReuseRule class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismHintTwoFerReuseRule,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ],		#time : DateAndTime [ '2023-12-03T10:36:07.84111+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismHintRule subclass: #ExercismHintTwoFerReuseRule\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools\'',				#superclassName : 'ExercismHintRule'			},			#name : #ExercismHintTwoFerReuseRule,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismHintTwoFerReuseRule class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismHintTwoFerReuseRule class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismHintTwoFerReuseRule,					#isMetaSide : false				},				#parent : @8,				#content : 'The TwoFer exercise introduces you to calling between methods.\rFor practice, your \'#who\'  method should reuse your  \'#who:\'  method. ',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'The TwoFer exercise introduces you to calling between methods.\rFor practice, your \'#who\'  method should reuse your  \'#who:\'  method. ',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ],		#time : DateAndTime [ '2023-12-03T10:36:07.842847+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ExercismTools-Menus,		#affectedPackageName : #ExercismTools	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ],		#time : DateAndTime [ '2023-12-03T10:36:07.843621+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'CmdMenuGroup subclass: #ClyExercismMenuGroup\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'CmdMenuGroup'			},			#name : #ClyExercismMenuGroup,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismMenuGroup class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismMenuGroup class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismMenuGroup,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ],		#time : DateAndTime [ '2023-12-03T10:36:07.844236+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'CmdMenuGroup subclass: #ClyExercismMenuGroup\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'CmdMenuGroup'			},			#name : #ClyExercismMenuGroup,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismMenuGroup class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismMenuGroup class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismMenuGroup,					#isMetaSide : false				},				#parent : @8,				#content : '# ClyExercismMenuGroup\r\rI am the group of Exercism menu item commands. My class can be used to\rgroup Exercism specific menu items.\r\rI am used in `ClyExercismExerciseCommand class>>#packageContextMenuActivation`\rand `ClyExercismExerciseCommand class >>#tagContextMenuActivation`.\r\r ',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# ClyExercismMenuGroup\r\rI am the group of Exercism menu item commands. My class can be used to\rgroup Exercism specific menu items.\r\rI am used in `ClyExercismExerciseCommand class>>#packageContextMenuActivation`\rand `ClyExercismExerciseCommand class >>#tagContextMenuActivation`.\r\r ',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ],		#time : DateAndTime [ '2023-12-03T10:36:07.84602+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'SycPackageCommand subclass: #ClyExercismCommand\r\tinstanceVariableNames: \'browser selectedItem\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'SycPackageCommand'			},			#name : #ClyExercismCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClyExercismCommand,						#isMetaSide : false					},					#name : #browser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClyExercismCommand,						#isMetaSide : false					},					#name : #selectedItem,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismCommand,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ],		#time : DateAndTime [ '2023-12-03T10:36:07.846757+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'SycPackageCommand subclass: #ClyExercismCommand\r\tinstanceVariableNames: \'browser selectedItem\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'SycPackageCommand'			},			#name : #ClyExercismCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClyExercismCommand,						#isMetaSide : false					},					#name : #browser,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClyExercismCommand,						#isMetaSide : false					},					#name : #selectedItem,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismCommand,					#isMetaSide : false				},				#parent : @8,				#content : '# ClyExercismCommand\r\rI provide menu facilities for Exercism that should only appear in the \rcontext of an Exercism package (and not in other browser packages).\r\rI am an abstract class.\r\r## Design\r\rI follow the Command Pattern of Object Oriented Design. I do one task \ron recieving the `#execute` message, which must be implemented by \rsubclasses. All other methods should be about setting up the state\rrequred for the `#execute` method to carry out its task.\r\rThe `#execute` method is written further up the inheritance hierarchy\rat `CmdCommand>>#execute`.\r\r## Instance Variables\r\r- browser: ClyPackageContextOfFullBrowser, the context of of a browser instance containing packages.\r- selectedItem: RPackage, the selected package in the browser context.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# ClyExercismCommand\r\rI provide menu facilities for Exercism that should only appear in the \rcontext of an Exercism package (and not in other browser packages).\r\rI am an abstract class.\r\r## Design\r\rI follow the Command Pattern of Object Oriented Design. I do one task \ron recieving the `#execute` message, which must be implemented by \rsubclasses. All other methods should be about setting up the state\rrequred for the `#execute` method to carry out its task.\r\rThe `#execute` method is written further up the inheritance hierarchy\rat `CmdCommand>>#execute`.\r\r## Instance Variables\r\r- browser: ClyPackageContextOfFullBrowser, the context of of a browser instance containing packages.\r- selectedItem: RPackage, the selected package in the browser context.',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ],		#time : DateAndTime [ '2023-12-03T10:36:07.848262+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ClyExercismCommand subclass: #ClyExercismExerciseCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'ClyExercismCommand'			},			#name : #ClyExercismExerciseCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismExerciseCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismExerciseCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismExerciseCommand,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ],		#time : DateAndTime [ '2023-12-03T10:36:07.850096+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ClyExercismCommand subclass: #ClyExercismExerciseCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'ClyExercismCommand'			},			#name : #ClyExercismExerciseCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismExerciseCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismExerciseCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismExerciseCommand,					#isMetaSide : false				},				#parent : @8,				#content : '# ClyExercismExerciseCommand\r\rI am the Abstract super class of all Exercism exercise menu commands.\rMenu items subclassing me should only appear on exercise package tags\rin the browser.\r\r## GUI Menu \r\rSubclasses of me are grouped into a browser menu under the name \r"Exercism" when activating a menu on a package or tag. This submenu\ris created by the class methods `#packageContextMenuActivation` and\r`#tagContextMenuActivation`.\r\r## Error reporting\r\rSubclasess may use `#reportError:for:` to report errors. \r\rIn one error case the exercise may be missing metadata and will need \rto be upgraded in the users Exercism profile and re-fetched.\r\rIn another error case the exercise may not be found. The likely \rproblem is that the exercise name is misspelled or does not exist in\rthe Pharo-Smalltalk language track. ',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# ClyExercismExerciseCommand\r\rI am the Abstract super class of all Exercism exercise menu commands.\rMenu items subclassing me should only appear on exercise package tags\rin the browser.\r\r## GUI Menu \r\rSubclasses of me are grouped into a browser menu under the name \r"Exercism" when activating a menu on a package or tag. This submenu\ris created by the class methods `#packageContextMenuActivation` and\r`#tagContextMenuActivation`.\r\r## Error reporting\r\rSubclasess may use `#reportError:for:` to report errors. \r\rIn one error case the exercise may be missing metadata and will need \rto be upgraded in the users Exercism profile and re-fetched.\r\rIn another error case the exercise may not be found. The likely \rproblem is that the exercise name is misspelled or does not exist in\rthe Pharo-Smalltalk language track. ',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ],		#time : DateAndTime [ '2023-12-03T10:36:07.860662+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ClyExercismExerciseCommand subclass: #ClyExercismFetchCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'ClyExercismExerciseCommand'			},			#name : #ClyExercismFetchCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismFetchCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismFetchCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismFetchCommand,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ],		#time : DateAndTime [ '2023-12-03T10:36:07.861389+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ClyExercismExerciseCommand subclass: #ClyExercismFetchCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'ClyExercismExerciseCommand'			},			#name : #ClyExercismFetchCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismFetchCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismFetchCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismFetchCommand,					#isMetaSide : false				},				#parent : @8,				#content : '# ClyExercismFetchCommand\r\rI am a browser menu item command that initiates a fetch operation to \rget a specific exercise from Exercism.io.\r\r## Command Execution\r\rI implement the `#execute` method. On receiving this message I start \rthe fetch operation to get an exercise, and report the success or error\rof the operation via the UI.\r\rI send a message to `ExercismManager default` to fetch the exercise.\rOn successful retrieval of an exercise I will open a browser window on\rthat exercises test case.\r\rI may signal an `ExDomainError` if I could not retrieve an exercise from\rthe `ExercismManager` submission.\r\rIf the `ExercismManager` signals an `ExDomainError` I will report the\rerror with `ClyExercismExerciseCommand>>#reportError:for:`.\r\r## World Menu\r\rOn my class side is `#worldMenuCommandOn:`. This method adds a "Fetch\rnew exercise..." command to the World menu under the "Exercism" section.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# ClyExercismFetchCommand\r\rI am a browser menu item command that initiates a fetch operation to \rget a specific exercise from Exercism.io.\r\r## Command Execution\r\rI implement the `#execute` method. On receiving this message I start \rthe fetch operation to get an exercise, and report the success or error\rof the operation via the UI.\r\rI send a message to `ExercismManager default` to fetch the exercise.\rOn successful retrieval of an exercise I will open a browser window on\rthat exercises test case.\r\rI may signal an `ExDomainError` if I could not retrieve an exercise from\rthe `ExercismManager` submission.\r\rIf the `ExercismManager` signals an `ExDomainError` I will report the\rerror with `ClyExercismExerciseCommand>>#reportError:for:`.\r\r## World Menu\r\rOn my class side is `#worldMenuCommandOn:`. This method adds a "Fetch\rnew exercise..." command to the World menu under the "Exercism" section.',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ],		#time : DateAndTime [ '2023-12-03T10:36:07.864265+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ClyExercismExerciseCommand subclass: #ClyExercismProgressCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'ClyExercismExerciseCommand'			},			#name : #ClyExercismProgressCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismProgressCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismProgressCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismProgressCommand,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ],		#time : DateAndTime [ '2023-12-03T10:36:07.866517+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ClyExercismExerciseCommand subclass: #ClyExercismProgressCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'ClyExercismExerciseCommand'			},			#name : #ClyExercismProgressCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismProgressCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismProgressCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismProgressCommand,					#isMetaSide : false				},				#parent : @8,				#content : '# ClyExercisProgressCommand\r\rI am a browser menu item command that initiates an operation to view\rthe users progress of an exercise on the Exercism website.\r\r## Command Execution\r\rIn my `#execute` method I send a message to `ExercismManager default`\rto view the selected exercise in the browser on the Exercism website.\r\r## World Menu\r\rOn my class side `#worldMenuCommandOn:` creates an entry labeled "View\rTrack Progress" for me in the World menu under the "Exercism" section.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# ClyExercisProgressCommand\r\rI am a browser menu item command that initiates an operation to view\rthe users progress of an exercise on the Exercism website.\r\r## Command Execution\r\rIn my `#execute` method I send a message to `ExercismManager default`\rto view the selected exercise in the browser on the Exercism website.\r\r## World Menu\r\rOn my class side `#worldMenuCommandOn:` creates an entry labeled "View\rTrack Progress" for me in the World menu under the "Exercism" section.',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ],		#time : DateAndTime [ '2023-12-03T10:36:07.868515+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ClyExercismExerciseCommand subclass: #ClyExercismShareCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'hasConfirmedSharing\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'ClyExercismExerciseCommand'			},			#name : #ClyExercismShareCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismShareCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismShareCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismShareCommand,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClyExercismShareCommand,						#isMetaSide : false					},					#name : #hasConfirmedSharing,					#parent : @8				}			],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ],		#time : DateAndTime [ '2023-12-03T10:36:07.869182+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ClyExercismExerciseCommand subclass: #ClyExercismShareCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'hasConfirmedSharing\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'ClyExercismExerciseCommand'			},			#name : #ClyExercismShareCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismShareCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismShareCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismShareCommand,					#isMetaSide : false				},				#parent : @8,				#content : '# ClyExercismShareCommand\r\rI am a browser menu item command. I can be used to share the code of \ran exercise solution by creating an anonymous web link to `dpaste.com`.\r\r## Enabling Sharing\r\rSharing will not be possible unless the class method \r`#hasComfirmedSharing:` is used to set the class variable of the same \rname to `true`.\r\r## Command Execution\r\rIn my `#execute` method I initiate and handle the result of the \rsharing operation. I send a message to `ExercismManager default` to\rstart the sharing.\r\rI may report an `ExercismError` signaled my `ExercismManager` using\r`ClyExercismExerciseCommand>>#reportError:for:`. I may use the same\rmessage to report an error if the exercise name can\'t be found.\r\rOn a successful operation I will copy the dpase.com URL to the\rclipboard and open the webbrowser on the URL.',				#stamp : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ClyExercismShareCommand,						#isMetaSide : false					},					#name : #hasConfirmedSharing,					#parent : @8				}			],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# ClyExercismShareCommand\r\rI am a browser menu item command. I can be used to share the code of \ran exercise solution by creating an anonymous web link to `dpaste.com`.\r\r## Enabling Sharing\r\rSharing will not be possible unless the class method \r`#hasComfirmedSharing:` is used to set the class variable of the same \rname to `true`.\r\r## Command Execution\r\rIn my `#execute` method I initiate and handle the result of the \rsharing operation. I send a message to `ExercismManager default` to\rstart the sharing.\r\rI may report an `ExercismError` signaled my `ExercismManager` using\r`ClyExercismExerciseCommand>>#reportError:for:`. I may use the same\rmessage to report an error if the exercise name can\'t be found.\r\rOn a successful operation I will copy the dpase.com URL to the\rclipboard and open the webbrowser on the URL.',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ],		#time : DateAndTime [ '2023-12-03T10:36:07.870584+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ClyExercismExerciseCommand subclass: #ClyExercismSubmitCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'ClyExercismExerciseCommand'			},			#name : #ClyExercismSubmitCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismSubmitCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismSubmitCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismSubmitCommand,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ],		#time : DateAndTime [ '2023-12-03T10:36:07.871121+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ClyExercismExerciseCommand subclass: #ClyExercismSubmitCommand\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Menus\'',				#superclassName : 'ClyExercismExerciseCommand'			},			#name : #ClyExercismSubmitCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ClyExercismSubmitCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ClyExercismSubmitCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ClyExercismSubmitCommand,					#isMetaSide : false				},				#parent : @8,				#content : '# ClyExercismSubmitCommand\r\rI am a browser menu item command. I initiate submitting the selected\rexercise solution to the Exercism website.\r\r## Command Execution\r\rOn recieving the message `#execute` I initiate the submit operation by\rsending the message `#submitToExercism:` to `ExercismManager default`.\rThis will submit my selected exercise.\r\rIf an `ExercismError` is signaled I will report the error with\r`#reportError:for:`. \r',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Menus,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# ClyExercismSubmitCommand\r\rI am a browser menu item command. I initiate submitting the selected\rexercise solution to the Exercism website.\r\r## Command Execution\r\rOn recieving the message `#execute` I initiate the submit operation by\rsending the message `#submitToExercism:` to `ExercismManager default`.\rThis will submit my selected exercise.\r\rIf an `ExercismError` is signaled I will report the error with\r`#reportError:for:`. \r',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ],		#time : DateAndTime [ '2023-12-03T10:36:07.882534+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'STONWriter subclass: #STONJSONWriter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'STONWriter'			},			#name : #STONJSONWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STONJSONWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'STONJSONWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STONJSONWriter,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ],		#time : DateAndTime [ '2023-12-03T10:36:07.885515+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'STONWriter subclass: #STONJSONWriter\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'STONWriter'			},			#name : #STONJSONWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'STONJSONWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'STONJSONWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #STONJSONWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a simple JSON writer that lets you specify configuation in JSON like:\r\rdata := { \r\t\'id\'-> 123. \r\t\'language\' -> \'english\'.\r\t\'exercises\' -> {\r\t\t\'name\' -> \'hello\'.\r\t\t\'topics\' -> #(\'a\' \'b\' \'c\') }\r\t}. \r\t\rString streamContents: [ :stream |\r\t(STONJSONWriter on: stream) nextPut: data  ].\r\rIt is assumed that key order is important and so all Dictionaries are converted to OrderedDictionary when writing out the JSON',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a simple JSON writer that lets you specify configuation in JSON like:\r\rdata := { \r\t\'id\'-> 123. \r\t\'language\' -> \'english\'.\r\t\'exercises\' -> {\r\t\t\'name\' -> \'hello\'.\r\t\t\'topics\' -> #(\'a\' \'b\' \'c\') }\r\t}. \r\t\rString streamContents: [ :stream |\r\t(STONJSONWriter on: stream) nextPut: data  ].\r\rIt is assumed that key order is important and so all Dictionaries are converted to OrderedDictionary when writing out the JSON',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ],		#time : DateAndTime [ '2023-12-03T10:36:07.887116+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Error subclass: #ExercismError\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'Error'			},			#name : #ExercismError,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismError class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismError class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismError,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ],		#time : DateAndTime [ '2023-12-03T10:36:07.887668+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Error subclass: #ExercismError\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'Error'			},			#name : #ExercismError,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismError class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismError class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismError,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a hierarchy of Exercism errors, so its east to catch them',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a hierarchy of Exercism errors, so its east to catch them',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ],		#time : DateAndTime [ '2023-12-03T10:36:07.901341+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismError subclass: #ExDomainError\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'ExercismError'			},			#name : #ExDomainError,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExDomainError class\r\tinstanceVariableNames: \'\''				},				#name : #'ExDomainError class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExDomainError,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ],		#time : DateAndTime [ '2023-12-03T10:36:07.902885+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismError subclass: #ExSolutionIdError\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'ExercismError'			},			#name : #ExSolutionIdError,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExSolutionIdError class\r\tinstanceVariableNames: \'\''				},				#name : #'ExSolutionIdError class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExSolutionIdError,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ],		#time : DateAndTime [ '2023-12-03T10:36:07.905068+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismError subclass: #ExUnauthorized\r\tinstanceVariableNames: \'token\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'ExercismError'			},			#name : #ExUnauthorized,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExUnauthorized,						#isMetaSide : false					},					#name : #token,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExUnauthorized class\r\tinstanceVariableNames: \'\''				},				#name : #'ExUnauthorized class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExUnauthorized,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ],		#time : DateAndTime [ '2023-12-03T10:36:07.906019+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismError subclass: #ExUnauthorized\r\tinstanceVariableNames: \'token\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'ExercismError'			},			#name : #ExUnauthorized,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExUnauthorized,						#isMetaSide : false					},					#name : #token,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExUnauthorized class\r\tinstanceVariableNames: \'\''				},				#name : #'ExUnauthorized class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExUnauthorized,					#isMetaSide : false				},				#parent : @8,				#content : 'I am an authorisation error for Exercism',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am an authorisation error for Exercism',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ],		#time : DateAndTime [ '2023-12-03T10:36:07.907458+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'TonelWriter subclass: #ExTonelWriter\r\tinstanceVariableNames: \'sourceDirectory\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'TonelWriter'			},			#name : #ExTonelWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExTonelWriter,						#isMetaSide : false					},					#name : #sourceDirectory,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExTonelWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'ExTonelWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExTonelWriter,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ],		#time : DateAndTime [ '2023-12-03T10:36:07.907943+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'TonelWriter subclass: #ExTonelWriter\r\tinstanceVariableNames: \'sourceDirectory\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'TonelWriter'			},			#name : #ExTonelWriter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExTonelWriter,						#isMetaSide : false					},					#name : #sourceDirectory,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExTonelWriter class\r\tinstanceVariableNames: \'\''				},				#name : #'ExTonelWriter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExTonelWriter,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a TonelWriter that provides finer level control of writing Tonel files for Exercism',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a TonelWriter that provides finer level control of writing Tonel files for Exercism',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ],		#time : DateAndTime [ '2023-12-03T10:36:07.909569+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'TextMorph subclass: #StaticTextMorph\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'TextMorph'			},			#name : #StaticTextMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StaticTextMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'StaticTextMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StaticTextMorph,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ],		#time : DateAndTime [ '2023-12-03T10:36:07.910049+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'TextMorph subclass: #StaticTextMorph\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'TextMorph'			},			#name : #StaticTextMorph,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StaticTextMorph class\r\tinstanceVariableNames: \'\''				},				#name : #'StaticTextMorph class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StaticTextMorph,					#isMetaSide : false				},				#parent : @8,				#content : 'Provide a non editable text morph suitable for hosting a clickable URL',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'Provide a non editable text morph suitable for hosting a clickable URL',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ],		#time : DateAndTime [ '2023-12-03T10:36:07.911631+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpCategoryAddition {		#classCategoryName : #ExercismTools-Meta,		#affectedPackageName : #ExercismTools	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ],		#time : DateAndTime [ '2023-12-03T10:36:07.922721+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ExercismExercise\r\tinstanceVariableNames: \'testCase difficulty topics isAutoApproved isCore unlockedBy isDeprecated\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Meta\'',				#superclassName : 'Object'			},			#name : #ExercismExercise,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #testCase,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #difficulty,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #topics,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #isAutoApproved,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #isCore,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #unlockedBy,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #isDeprecated,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismExercise class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismExercise class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismExercise,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Meta,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ],		#time : DateAndTime [ '2023-12-03T10:36:07.923322+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ExercismExercise\r\tinstanceVariableNames: \'testCase difficulty topics isAutoApproved isCore unlockedBy isDeprecated\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Meta\'',				#superclassName : 'Object'			},			#name : #ExercismExercise,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #testCase,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #difficulty,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #topics,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #isAutoApproved,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #isCore,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #unlockedBy,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismExercise,						#isMetaSide : false					},					#name : #isDeprecated,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismExercise class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismExercise class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismExercise,					#isMetaSide : false				},				#parent : @8,				#content : 'I am the meta data for an exercise, and am typically created from the #excerise method on any of the specified ExercismTest tests (which are a type of SUnit test).\r\rOf note is that the exercise submission id is stored as a class instance variable on ExercismTest.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Meta,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am the meta data for an exercise, and am typically created from the #excerise method on any of the specified ExercismTest tests (which are a type of SUnit test).\r\rOf note is that the exercise submission id is stored as a class instance variable on ExercismTest.',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ],		#time : DateAndTime [ '2023-12-03T10:36:07.925842+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismExercise subclass: #MockExercismExercise\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Meta\'',				#superclassName : 'ExercismExercise'			},			#name : #MockExercismExercise,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MockExercismExercise class\r\tinstanceVariableNames: \'\''				},				#name : #'MockExercismExercise class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MockExercismExercise,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Meta,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ],		#time : DateAndTime [ '2023-12-03T10:36:07.926471+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismExercise subclass: #MockExercismExercise\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Meta\'',				#superclassName : 'ExercismExercise'			},			#name : #MockExercismExercise,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'MockExercismExercise class\r\tinstanceVariableNames: \'\''				},				#name : #'MockExercismExercise class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #MockExercismExercise,					#isMetaSide : false				},				#parent : @8,				#content : '# MockExercismExercise\r\rI am a subclass of `ExercismExercise` exclusively for use in testing. I override `#allExercises`\rto return a small number of exercises instead of all the exercises in production,\rwhich can grow in number. This is to help keep tests fast and predictable.\r\r## Overridden Methods\r\r### `#allExercises`\r\rAnswers a small constant number of exercises.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Meta,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# MockExercismExercise\r\rI am a subclass of `ExercismExercise` exclusively for use in testing. I override `#allExercises`\rto return a small number of exercises instead of all the exercises in production,\rwhich can grow in number. This is to help keep tests fast and predictable.\r\r## Overridden Methods\r\r### `#allExercises`\r\rAnswers a small constant number of exercises.',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ],		#time : DateAndTime [ '2023-12-03T10:36:07.927909+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ExercismHttpClient\r\tinstanceVariableNames: \'hostName zincClient\'\r\tclassVariableNames: \'ApiToken\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'Object'			},			#name : #ExercismHttpClient,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismHttpClient,						#isMetaSide : false					},					#name : #hostName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismHttpClient,						#isMetaSide : false					},					#name : #zincClient,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismHttpClient class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismHttpClient class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismHttpClient,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismHttpClient,						#isMetaSide : false					},					#name : #ApiToken,					#parent : @8				}			],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ],		#time : DateAndTime [ '2023-12-03T10:36:07.928378+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ExercismHttpClient\r\tinstanceVariableNames: \'hostName zincClient\'\r\tclassVariableNames: \'ApiToken\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'Object'			},			#name : #ExercismHttpClient,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismHttpClient,						#isMetaSide : false					},					#name : #hostName,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismHttpClient,						#isMetaSide : false					},					#name : #zincClient,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismHttpClient class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismHttpClient class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismHttpClient,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a wrapper over a ZnClient to streamline the HTTP interactions with exercism, and to also make it re-testable.\r',				#stamp : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismHttpClient,						#isMetaSide : false					},					#name : #ApiToken,					#parent : @8				}			],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a wrapper over a ZnClient to streamline the HTTP interactions with exercism, and to also make it re-testable.\r',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ],		#time : DateAndTime [ '2023-12-03T10:36:07.92981+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ExercismHttpCommand\r\tinstanceVariableNames: \'httpClient\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'Object'			},			#name : #ExercismHttpCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismHttpCommand,						#isMetaSide : false					},					#name : #httpClient,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismHttpCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismHttpCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismHttpCommand,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ],		#time : DateAndTime [ '2023-12-03T10:36:07.930265+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ExercismHttpCommand\r\tinstanceVariableNames: \'httpClient\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'Object'			},			#name : #ExercismHttpCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismHttpCommand,						#isMetaSide : false					},					#name : #httpClient,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismHttpCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismHttpCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismHttpCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I am the root of Http commands that will use a (now) seperate httpClient object to fetch/put solution data',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am the root of Http commands that will use a (now) seperate httpClient object to fetch/put solution data',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ],		#time : DateAndTime [ '2023-12-03T10:36:07.931493+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismHttpCommand subclass: #ExercismFetchCommand\r\tinstanceVariableNames: \'parser\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'ExercismHttpCommand'			},			#name : #ExercismFetchCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismFetchCommand,						#isMetaSide : false					},					#name : #parser,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismFetchCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismFetchCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismFetchCommand,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '61' ],		#self : OmReference [ '62' ],		#time : DateAndTime [ '2023-12-03T10:36:07.932815+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismFetchCommand subclass: #ExercismDownloadCommand\r\tinstanceVariableNames: \'exerciseId trackName\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'ExercismFetchCommand'			},			#name : #ExercismDownloadCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismDownloadCommand,						#isMetaSide : false					},					#name : #exerciseId,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismDownloadCommand,						#isMetaSide : false					},					#name : #trackName,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismDownloadCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismDownloadCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismDownloadCommand,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '62' ],		#self : OmReference [ '63' ],		#time : DateAndTime [ '2023-12-03T10:36:07.933271+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismFetchCommand subclass: #ExercismDownloadCommand\r\tinstanceVariableNames: \'exerciseId trackName\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'ExercismFetchCommand'			},			#name : #ExercismDownloadCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismDownloadCommand,						#isMetaSide : false					},					#name : #exerciseId,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismDownloadCommand,						#isMetaSide : false					},					#name : #trackName,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismDownloadCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismDownloadCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismDownloadCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I am the command for dowloading an exercise and installing it in the image',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am the command for dowloading an exercise and installing it in the image',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '63' ],		#self : OmReference [ '64' ],		#time : DateAndTime [ '2023-12-03T10:36:07.934508+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismHttpCommand subclass: #ExercismSubmitCommand\r\tinstanceVariableNames: \'exercise\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'ExercismHttpCommand'			},			#name : #ExercismSubmitCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismSubmitCommand,						#isMetaSide : false					},					#name : #exercise,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismSubmitCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismSubmitCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismSubmitCommand,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '64' ],		#self : OmReference [ '65' ],		#time : DateAndTime [ '2023-12-03T10:36:07.946078+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismHttpCommand subclass: #ExercismSubmitCommand\r\tinstanceVariableNames: \'exercise\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'ExercismHttpCommand'			},			#name : #ExercismSubmitCommand,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismSubmitCommand,						#isMetaSide : false					},					#name : #exercise,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismSubmitCommand class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismSubmitCommand class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismSubmitCommand,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a command for submitting an exercise. ',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a command for submitting an exercise. ',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '65' ],		#self : OmReference [ '66' ],		#time : DateAndTime [ '2023-12-03T10:36:07.947609+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ExercismManager\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'SolutionData\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'Object'			},			#name : #ExercismManager,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismManager class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismManager class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismManager,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismManager,						#isMetaSide : false					},					#name : #SolutionData,					#parent : @8				}			],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '66' ],		#self : OmReference [ '67' ],		#time : DateAndTime [ '2023-12-03T10:36:07.948069+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ExercismManager\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'SolutionData\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'Object'			},			#name : #ExercismManager,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismManager class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismManager class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismManager,					#isMetaSide : false				},				#parent : @8,				#content : 'I am  responsible for managing the interaction with the lower level Exercism command line tool.',				#stamp : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismManager,						#isMetaSide : false					},					#name : #SolutionData,					#parent : @8				}			],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am  responsible for managing the interaction with the lower level Exercism command line tool.',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '67' ],		#self : OmReference [ '68' ],		#time : DateAndTime [ '2023-12-03T10:36:07.949364+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ExercismSubmission\r\tinstanceVariableNames: \'exercismData contentData\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'Object'			},			#name : #ExercismSubmission,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismSubmission,						#isMetaSide : false					},					#name : #exercismData,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismSubmission,						#isMetaSide : false					},					#name : #contentData,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismSubmission class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismSubmission class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismSubmission,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '68' ],		#self : OmReference [ '69' ],		#time : DateAndTime [ '2023-12-03T10:36:07.949813+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ExercismSubmission\r\tinstanceVariableNames: \'exercismData contentData\'\r\tclassVariableNames: \'\'\r\tpackage: \'ExercismTools-Core\'',				#superclassName : 'Object'			},			#name : #ExercismSubmission,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismSubmission,						#isMetaSide : false					},					#name : #exercismData,					#parent : @8				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ExercismSubmission,						#isMetaSide : false					},					#name : #contentData,					#parent : @8				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ExercismSubmission class\r\tinstanceVariableNames: \'\''				},				#name : #'ExercismSubmission class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ExercismSubmission,					#isMetaSide : false				},				#parent : @8,				#content : 'I am a wrapper over the exercism json submission data. Crucially I have a solutionId that is needed when submitting exercises that have been downloaded.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #ExercismTools-Core,			#package : #ExercismTools,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'I am a wrapper over the exercism json submission data. Crucially I have a solutionId that is needed when submitting exercises that have been downloaded.',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '69' ],		#self : OmReference [ '70' ],		#time : DateAndTime [ '2023-12-03T10:36:08.214081+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TExercise classTrait',				#isMetaSide : true			},			#name : #'createExerciseAfter:',			#protocol : #helper,			#sourceCode : 'createExerciseAfter: anotherTestCase\r\t"Helper method to create an exercise meta data object"\r\t\r\t^ (ExercismExercise for: self)\r\t\tunlockedBy: \r\t\t\t((anotherTestCase notNil and: [ anotherTestCase isObsolete not ])\r\t\t\t\tifTrue: [ [ anotherTestCase exercise ] on: SubclassResponsibility do: [ nil ] ]\r\t\t\t\tifFalse: [ nil ]);\r\t\tyourself ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '70' ],		#self : OmReference [ '71' ],		#time : DateAndTime [ '2023-12-03T10:36:08.214655+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TExercise classTrait',				#isMetaSide : true			},			#name : #customData,			#protocol : #config,			#sourceCode : 'customData\r\r\t^ customData',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '71' ],		#self : OmReference [ '72' ],		#time : DateAndTime [ '2023-12-03T10:36:08.216447+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TExercise classTrait',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\r\t^ self configuredExerciseMetadata',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '72' ],		#self : OmReference [ '73' ],		#time : DateAndTime [ '2023-12-03T10:36:08.216936+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TExercise classTrait',				#isMetaSide : true			},			#name : #generator,			#protocol : #generator,			#sourceCode : 'generator\r\r\t^ aliasesAndHints',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '73' ],		#self : OmReference [ '74' ],		#time : DateAndTime [ '2023-12-03T10:36:08.217209+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TExercise classTrait',				#isMetaSide : true			},			#name : #isActive,			#protocol : #config,			#sourceCode : 'isActive\r\r\t^ isActive',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '74' ],		#self : OmReference [ '75' ],		#time : DateAndTime [ '2023-12-03T10:36:08.217437+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TExercise classTrait',				#isMetaSide : true			},			#name : #isCustom,			#protocol : #config,			#sourceCode : 'isCustom\r\r\t^ customData notEmpty ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '75' ],		#self : OmReference [ '76' ],		#time : DateAndTime [ '2023-12-03T10:36:08.217618+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TExercise classTrait',				#isMetaSide : true			},			#name : #solutionId,			#protocol : #accessing,			#sourceCode : 'solutionId \r\r\t^ solutionId ifNil: [ ExSolutionIdError signal: \'Missing exercise solutionId\' ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '76' ],		#self : OmReference [ '77' ],		#time : DateAndTime [ '2023-12-03T10:36:08.217765+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TExercise classTrait',				#isMetaSide : true			},			#name : #'solutionId:',			#protocol : #accessing,			#sourceCode : 'solutionId: anObject\r\r\tsolutionId := anObject ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '77' ],		#self : OmReference [ '78' ],		#time : DateAndTime [ '2023-12-03T10:36:08.217918+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TExercise classTrait',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\r\t^ uuid',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '78' ],		#self : OmReference [ '79' ],		#time : DateAndTime [ '2023-12-03T10:36:08.218064+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TExercise classTrait',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\r\t^ version',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '79' ],		#self : OmReference [ '80' ],		#time : DateAndTime [ '2023-12-03T10:36:08.218486+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UITheme,				#isMetaSide : false			},			#name : #'newStaticTextIn:text:',			#protocol : #'*ExercismTools',			#sourceCode : 'newStaticTextIn: aThemedMorph text: aStringOrText\r\t"Answer a new text."\r\t"Derived from newTextIn:text: - changed from locked to disabled"    \r\r\t^StaticTextMorph new\r\t\twrapFlag: true;\r\t\tcontents: aStringOrText;\r\t\tfont: self textFont;\r\t\tautoFit: true;\r\t\thResizing: #shrinkWrap;\r\t\tvResizing: #shrinkWrap',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '80' ],		#self : OmReference [ '81' ],		#time : DateAndTime [ '2023-12-03T10:36:08.218914+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #UITheme,				#isMetaSide : false			},			#name : #'textEntryIn:formattedText:title:entryText:',			#protocol : #'*ExercismTools',			#sourceCode : 'textEntryIn: aThemedMorph formattedText: formattedText title: aString entryText: defaultEntryText\r\t"Answer the result of a text entry dialog (a string or nil if cancelled)\r\twith the given label and title."\r\t"Derived from textEntryIn:text:title:entryText: but calling #formattedText: not #text:"\r\r\tself questionSound play.\r\t^(aThemedMorph openModal: (\r\t\tTextEntryDialogWindow new\r\t\t\ttextFont: self textFont;\r\t\t\ttitle: aString;\r\t\t\tformattedText: formattedText;\r\t\t\tentryText: defaultEntryText)) entryText',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '81' ],		#self : OmReference [ '82' ],		#time : DateAndTime [ '2023-12-03T10:36:08.219197+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MCClassDefinition,				#isMetaSide : false			},			#name : #exTonelFilename,			#protocol : #'*ExercismTools',			#sourceCode : 'exTonelFilename\r\t^ClassDescription exTonelClassFilenameFor: self className ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '82' ],		#self : OmReference [ '83' ],		#time : DateAndTime [ '2023-12-03T10:36:08.219464+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestResult,				#isMetaSide : false			},			#name : #'exercismEnvironmentInfoOn:',			#protocol : #'*ExercismTools',			#sourceCode : 'exercismEnvironmentInfoOn: aStream\r\r\taStream \r\t \tnextPutAll: \'Used OS/Platform: \';\r\t\tnextPutAll: Smalltalk os platformName; space;\r\t\tnextPutAll: Smalltalk os version; space;\r\t\tnextPutAll: Smalltalk os subtype;\r\t\tcrlf;\r\t\tnextPutAll: \'Image version: \';\r\t\tnextPutAll: SystemVersion current version; space;\r\t\tnextPutAll: \'build: \';\r\t\tnextPutAll: SystemVersion current build asString;\r\t\tnextPutAll: (Smalltalk vm is32bit \r\t\t\tifTrue: [ \' (32 Bit)\' ]\r\t\t\tifFalse: [ \' (64 Bit)\' ]).\r\taStream \r\t\tcrlf;\r\t\tnextPutAll: \'VM version: \';\r\t\tnextPutAll: Smalltalk vm interpreterSourceVersion\r\t\t ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '83' ],		#self : OmReference [ '84' ],		#time : DateAndTime [ '2023-12-03T10:36:08.219674+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TestResult,				#isMetaSide : false			},			#name : #exercismSummary,			#protocol : #'*ExercismTools',			#sourceCode : 'exercismSummary\r\t^String streamContents: [ :s | s \r\t\tnextPutAll: \'Tested on: \';\r\t\tnextPutAll: self timeStamp asLocalStringYMDHM;\r\t\tcrlf;\r\t\tnextPutAll: self runCount printString;\r\t\tnextPutAll: \' run, \';\r\t\tnextPutAll: self expectedPassCount printString;\r\t\tnextPutAll: \' passes, \';\r\t\tnextPutAll: self skippedCount printString;\r\t\tnextPutAll: \' skipped, \';\r\t\tnextPutAll: self unexpectedFailureCount printString;\r\t\tnextPutAll: \' failures, \';\r\t\tnextPutAll: self unexpectedErrorCount printString;\r\t\tnextPutAll:\' errors.\';\r\t\tcrlf.\r\t\tself exercismEnvironmentInfoOn: s.\r\t]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '84' ],		#self : OmReference [ '85' ],		#time : DateAndTime [ '2023-12-03T10:36:08.219833+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismTest class',				#isMetaSide : true			},			#name : #'createExerciseAfter:',			#protocol : #helper,			#sourceCode : 'createExerciseAfter: anotherTestCase\r\t"protocol: #helper"\r\r\t"Helper method to create an exercise meta data object"\r\r\t^ (ExercismExercise for: self)\r\t\tunlockedBy:\r\t\t\t((anotherTestCase notNil and: [ anotherTestCase isObsolete not ])\r\t\t\t\tifTrue: [ [anotherTestCase exercise] on: SubclassResponsibility do: [ nil ] ]\r\t\t\t\tifFalse: [ nil ]);\r\t\tyourself',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '85' ],		#self : OmReference [ '86' ],		#time : DateAndTime [ '2023-12-03T10:36:08.219963+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismTest class',				#isMetaSide : true			},			#name : #customData,			#protocol : #config,			#sourceCode : 'customData\r\t^{}',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '86' ],		#self : OmReference [ '87' ],		#time : DateAndTime [ '2023-12-03T10:36:08.220309+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismTest class',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\t"Answer the configured exercise meta data for this exercise, an ExercismExercise\r\te.g.\r\t\r\t^(self createExerciseAfter: HelloWorldTest)\r\t\tisCore: false;\r\t\tdifficulty: 1;\r\t\ttopics: #(\'strings\' \'iteration\' \'parsing\');\r\t\tyourself\r\t"\r\t\r\tself subclassResponsibility \r\t\t\t\t',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '87' ],		#self : OmReference [ '88' ],		#time : DateAndTime [ '2023-12-03T10:36:08.220447+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismTest class',				#isMetaSide : true			},			#name : #generator,			#protocol : #generator,			#sourceCode : 'generator\r\t"Answer code generator aliases/hints"\r\t\r\t^{}',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '88' ],		#self : OmReference [ '89' ],		#time : DateAndTime [ '2023-12-03T10:36:08.220573+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismTest class',				#isMetaSide : true			},			#name : #isActive,			#protocol : #config,			#sourceCode : 'isActive\r\t"Answer true if an exercise is active (not deprecated or for testing)"\r\t\r\t^true',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '89' ],		#self : OmReference [ '90' ],		#time : DateAndTime [ '2023-12-03T10:36:08.22069+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismTest class',				#isMetaSide : true			},			#name : #isCustom,			#protocol : #config,			#sourceCode : 'isCustom\r\t^self customData notEmpty',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '90' ],		#self : OmReference [ '91' ],		#time : DateAndTime [ '2023-12-03T10:36:08.220814+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismTest class',				#isMetaSide : true			},			#name : #solutionId,			#protocol : #accessing,			#sourceCode : 'solutionId\r\t^ solutionId ifNil: [ ExSolutionIdError signal: \'Missing exercise solutionId\' ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '91' ],		#self : OmReference [ '92' ],		#time : DateAndTime [ '2023-12-03T10:36:08.220961+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismTest class',				#isMetaSide : true			},			#name : #'solutionId:',			#protocol : #accessing,			#sourceCode : 'solutionId: anObject\r\tsolutionId := anObject',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '92' ],		#self : OmReference [ '93' ],		#time : DateAndTime [ '2023-12-03T10:36:08.221087+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismTest class',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\t"Answer a fixed String, the unique UUID for this exercise so the Exercism platform can identify it.\r\tThe id should be like: \'b5812b5e-2788-4ea6-b948-bfe54edeb0da\' "\r\t\r\t^self subclassResponsibility ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '93' ],		#self : OmReference [ '94' ],		#time : DateAndTime [ '2023-12-03T10:36:08.221211+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismTest class',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\t"Answer the exercise version number string this test was derived from"\r\t\r\t^self subclassResponsibility  ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '94' ],		#self : OmReference [ '95' ],		#time : DateAndTime [ '2023-12-03T10:36:08.221358+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismTest,				#isMetaSide : false			},			#name : #'assert:closeEnoughTo:by:',			#protocol : #assertions,			#sourceCode : 'assert: aNumber closeEnoughTo: aNumber2 by: decimalPlaces\r\t"Assert that two numbers are the same when rounded to decimalPlaces places"\r\r\tself\r\t\tassert: (aNumber asFloat round: decimalPlaces)\r\t\tequals: (aNumber2 asFloat round: decimalPlaces)',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '95' ],		#self : OmReference [ '96' ],		#time : DateAndTime [ '2023-12-03T10:36:08.221506+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismTest,				#isMetaSide : false			},			#name : #'verifySolution:avoidsSelector:',			#protocol : #verify,			#sourceCode : 'verifySolution: aClass avoidsSelector: aSelector\r\t| badSelector |\r \r\tbadSelector := aClass methods detect: [ :m | m ast sentMessages includes: aSelector ] ifNone: [ ^self ].\r\t\r\tself fail: \'Your code in \', badSelector name, \' uses the library method #\', aSelector, \' - try writing a different solution that avoids it\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '96' ],		#self : OmReference [ '97' ],		#time : DateAndTime [ '2023-12-03T10:36:08.221773+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ZnMimePart class',				#isMetaSide : true			},			#name : #'exercismFieldName:fileName:entity:',			#protocol : #'*ExercismTools',			#sourceCode : 'exercismFieldName: fieldName fileName: fileName entity: entity\r\t"Copied from ZnMimePart class >> fieldName:fileName:entity:\r\t with space added after \'form-data;\' as required by Exercism server, \r\t otherwise we get Response(500 INTERNAL SERVER ERROR).\r\t Space added after second semi-colon just for looks."\r\t\r\t"Pathnames are often silenty encoded using UTF-8,\r\tthis is a no-op for ASCII, but will fail on Latin-1 and others"\r\r\t| encodedFileName |\r\tencodedFileName := fileName utf8Encoded asString.\r\t^ self new\r\t\tsetContentDisposition: \'form-data; name="\', fieldName, \'"; filename="\', encodedFileName, \'"\';\r\t\tentity: entity;\r\t\tyourself\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '97' ],		#self : OmReference [ '98' ],		#time : DateAndTime [ '2023-12-03T10:36:08.221996+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClassDescription class',				#isMetaSide : true			},			#name : #'exTonelClassFilenameFor:',			#protocol : #'*ExercismTools',			#sourceCode : 'exTonelClassFilenameFor: aName\r\t^aName, \'.class.st\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '98' ],		#self : OmReference [ '99' ],		#time : DateAndTime [ '2023-12-03T10:36:08.222228+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClassDescription class',				#isMetaSide : true			},			#name : #'exTonelExtensionFilenameFor:',			#protocol : #'*ExercismTools',			#sourceCode : 'exTonelExtensionFilenameFor: aName\r\t^aName, \'.extension.st\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '99' ],		#self : OmReference [ '100' ],		#time : DateAndTime [ '2023-12-03T10:36:08.222563+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClassDescription,				#isMetaSide : false			},			#name : #'exPrintOutCategoriesFor:on:',			#protocol : #'*ExercismTools',			#sourceCode : 'exPrintOutCategoriesFor: aClass on: aWriteStream\r\r\taClass methods ifEmpty: [ ^self ].\r\t\r\taWriteStream \r\t\tnextPutAll: (aClass isClassSide ifTrue: [ \'"[class\'] ifFalse: [  \'"[instance\']);\r\t \tnextPutAll: \' methods]"\'; cr.\r\t\r\taClass organization categories asSortedCollection \r\t\tdo: [ :heading | \r\t\t\taWriteStream\r\t\t\t\tnextPutAll: \'"category: \';\r\t\t\t\tnextPutAll: heading;\r\t\t\t\tnextPutAll: \'"\';\r\t\t\t\tcr.\r\t\t\t\t\r\t\t\taClass exPrintOutLocalMethodsInCategory: heading on: aWriteStream ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '100' ],		#self : OmReference [ '101' ],		#time : DateAndTime [ '2023-12-03T10:36:08.222846+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClassDescription,				#isMetaSide : false			},			#name : #'exPrintOutExtensionsFor:on:',			#protocol : #'*ExercismTools',			#sourceCode : 'exPrintOutExtensionsFor: aRPackage on: aWriteStream\r\r\taRPackage exPrintOutExtensionsFor: self on: aWriteStream. ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '101' ],		#self : OmReference [ '102' ],		#time : DateAndTime [ '2023-12-03T10:36:08.223117+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClassDescription,				#isMetaSide : false			},			#name : #'exPrintOutLocalMethodsInCategory:on:',			#protocol : #'*ExercismTools',			#sourceCode : 'exPrintOutLocalMethodsInCategory: aSymbol on: aWriteStream\r\t"Print out methods for this category."\r\r\taWriteStream cr.\r\t\r\t(self selectorsToFileOutCategory: aSymbol)\r\t\tdo: [ :sel | self exPrintOutMethod: sel on: aWriteStream ]\r\t',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '102' ],		#self : OmReference [ '103' ],		#time : DateAndTime [ '2023-12-03T10:36:08.223396+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClassDescription,				#isMetaSide : false			},			#name : #'exPrintOutMethod:on:',			#protocol : #'*ExercismTools',			#sourceCode : 'exPrintOutMethod: selector on: aWriteStream\r\t"Print the source code for selector onto the WriteStream."\r\r\t| method source |\r\tmethod := self\r\t\tcompiledMethodAt: selector\r\t\tifAbsent: [ ^ aWriteStream\r\t\t\t\tnextPutAll: selector;\r\t\t\t\tcr;\r\t\t\t\ttab;\r\t\t\t\tnextPutAll: \'"** ERROR: SOURCE IS MISSING ** ".\';\r\t\t\t\tcr;\r\t\t\t\tcr ].\r\t\t\t\r\tsource := method sourceCode trimBoth.\r\t\r\taWriteStream nextPutAll: source.\r\t\r\tsource last = $.\r\t\tifFalse: [ aWriteStream nextPut: $. ].\r\t\t\r\taWriteStream\r\t\tcr;\r\t\tcr',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '103' ],		#self : OmReference [ '104' ],		#time : DateAndTime [ '2023-12-03T10:36:08.223679+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClassDescription,				#isMetaSide : false			},			#name : #'exPrintOutOn:',			#protocol : #'*ExercismTools',			#sourceCode : 'exPrintOutOn: aWriteStream\r\t"Print a description of the receiver on aWriteStream."\r\r\taWriteStream\r\t\tnextPutAll: \'"-- #\', self name, \' (class) --"\'; cr; cr;\r\t\tnextPutAll: self definition; \r\t\tnextPut: $.; cr; cr.\r\t\r\tself hasComment ifTrue: [ \r\t\taWriteStream nextPut: $".\r\t\tself comment trimBoth encodeDoublingDoubleQuotesOn: aWriteStream.\r\t\taWriteStream nextPut: $"; cr; cr ].\r\t\r\tself exPrintOutCategoriesFor: self class on: aWriteStream.\r\tself exPrintOutCategoriesFor: self on: aWriteStream',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '104' ],		#self : OmReference [ '105' ],		#time : DateAndTime [ '2023-12-03T10:36:08.223901+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MCMethodDefinition,				#isMetaSide : false			},			#name : #exTonelFilename,			#protocol : #'*ExercismTools',			#sourceCode : 'exTonelFilename\r\t^ClassDescription exTonelExtensionFilenameFor: self className ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '105' ],		#self : OmReference [ '106' ],		#time : DateAndTime [ '2023-12-03T10:36:08.224046+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHintRule,				#isMetaSide : false			},			#name : #group,			#protocol : #accessing,			#sourceCode : 'group\r\t^\'Exercism Hint\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '106' ],		#self : OmReference [ '107' ],		#time : DateAndTime [ '2023-12-03T10:36:08.224194+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHintRule,				#isMetaSide : false			},			#name : #severity,			#protocol : #accessing,			#sourceCode : 'severity\r\t^ #warning\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '107' ],		#self : OmReference [ '108' ],		#time : DateAndTime [ '2023-12-03T10:36:08.224365+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismHintTwoFerReuseRule class',				#isMetaSide : true			},			#name : #checksMethod,			#protocol : #testing-interest,			#sourceCode : 'checksMethod\r\t^true',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '108' ],		#self : OmReference [ '109' ],		#time : DateAndTime [ '2023-12-03T10:36:08.224517+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHintTwoFerReuseRule,				#isMetaSide : false			},			#name : #'basicCheck:',			#protocol : #accessing,			#sourceCode : 'basicCheck: compiledMethod\r\tcompiledMethod methodClass name = #TwoFer ifTrue: [ \r\t\t|literals|\r\t\tliterals := compiledMethod sourceCode parseLiterals.\r\t\tliterals first = #who ifTrue: [ ^ (literals includes: #who:) not ].\r\t\t].\r\t^false\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '109' ],		#self : OmReference [ '110' ],		#time : DateAndTime [ '2023-12-03T10:36:08.224643+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHintTwoFerReuseRule,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t^ \'Exercism: Method #who should reuse method #who: \'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '110' ],		#self : OmReference [ '111' ],		#time : DateAndTime [ '2023-12-03T10:36:08.224843+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TextEntryDialogWindow,				#isMetaSide : false			},			#name : #'formattedText:',			#protocol : #'*ExercismTools',			#sourceCode : 'formattedText: formattedText\r\t"Set the text."\r\t"Derived from MessageDialogWindow>>text: but dont\' clear any formating"\r\tformattedText\r\t\taddAttribute: TextAlignment centered.\r\tself textMorph newContents: formattedText',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '111' ],		#self : OmReference [ '112' ],		#time : DateAndTime [ '2023-12-03T10:36:08.225046+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TextEntryDialogWindow,				#isMetaSide : false			},			#name : #'newText:',			#protocol : #'*ExercismTools',			#sourceCode : 'newText: aStringOrText\r\t"Answer a new text."\r\t"Overrides MessageDialog>>newText, but change from locked to disabled"\r\r\t^self theme\r\t\tnewStaticTextIn: self\r\t\ttext: aStringOrText',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '112' ],		#self : OmReference [ '113' ],		#time : DateAndTime [ '2023-12-03T10:36:08.225389+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RPackageTag,				#isMetaSide : false			},			#name : #definedClasses,			#protocol : #'*ExercismTools',			#sourceCode : 'definedClasses\r\t^ self classes',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '113' ],		#self : OmReference [ '114' ],		#time : DateAndTime [ '2023-12-03T10:36:08.228532+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RPackageTag,				#isMetaSide : false			},			#name : #exerciseName,			#protocol : #'*ExercismTools',			#sourceCode : 'exerciseName\r\t"Provided for legacy compatibility"\r\t^self name asString',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '114' ],		#self : OmReference [ '115' ],		#time : DateAndTime [ '2023-12-03T10:36:08.228759+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RPackageTag,				#isMetaSide : false			},			#name : #promoteAsExercismRPackage,			#protocol : #'*ExercismTools',			#sourceCode : 'promoteAsExercismRPackage\r\t"This method converts this rpackage tag into an rpackage compatible with exercism"\r\t|  tagName pkgName promotedName pkg |\r\t\r\ttagName := self name.\r\tpkgName := self packageName.\r\tpromotedName := self categoryName.\r\t\r\tself promoteAsRPackage.\r\t\r\tpkg := RPackageOrganizer default packageNamed: promotedName.\r\tpkg renameTo: pkgName, \'@\', tagName',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '115' ],		#self : OmReference [ '116' ],		#time : DateAndTime [ '2023-12-03T10:36:08.228948+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RPackageTag,				#isMetaSide : false			},			#name : #root,			#protocol : #'*ExercismTools',			#sourceCode : 'root\r\t^self package',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '116' ],		#self : OmReference [ '117' ],		#time : DateAndTime [ '2023-12-03T10:36:08.229145+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RPackageTag,				#isMetaSide : false			},			#name : #snapshot,			#protocol : #'*ExercismTools',			#sourceCode : 'snapshot\r\t| parentSnapshot |\r\t\r\tparentSnapshot := (MCPackage named: self package name) snapshot.\r\t\r\t^ MCSnapshot\r\t\tfromDefinitions:\r\t\t\t(parentSnapshot definitions\r\t\t\t\tselect:\r\t\t\t\t\t[ :mc | mc className isNil or: [ mc actualClass category endsWith: self name ] ])',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '117' ],		#self : OmReference [ '118' ],		#time : DateAndTime [ '2023-12-03T10:36:08.229427+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RPackage,				#isMetaSide : false			},			#name : #'exPrintOutExtensionsFor:on:',			#protocol : #'*ExercismTools',			#sourceCode : 'exPrintOutExtensionsFor: aClass on: aWriteStream\r\r\t| selectors |\r\t(selectors := self extensionSelectorsForClass: aClass) ifEmpty: [  ^self ].\r\t\r\taWriteStream \r\t\tnextPutAll: \'"-- #\'; \r\t\tnextPutAll: aClass name; \r\t\tnextPutAll: \' (extension) --"\'; \r\t\tcr; cr.\r\t\r\tselectors do: [ :sel |  \r\t\taClass exPrintOutMethod: sel on: aWriteStream ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '118' ],		#self : OmReference [ '119' ],		#time : DateAndTime [ '2023-12-03T10:36:08.229674+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RPackage,				#isMetaSide : false			},			#name : #exerciseName,			#protocol : #'*ExercismTools',			#sourceCode : 'exerciseName\r\t^ (self name allRegexMatches: \'\\w+\') last',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '119' ],		#self : OmReference [ '120' ],		#time : DateAndTime [ '2023-12-03T10:36:08.229914+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RPackage,				#isMetaSide : false			},			#name : #root,			#protocol : #'*ExercismTools',			#sourceCode : 'root\r\t^self',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '120' ],		#self : OmReference [ '121' ],		#time : DateAndTime [ '2023-12-03T10:36:08.230165+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #RPackage,				#isMetaSide : false			},			#name : #snapshot,			#protocol : #'*ExercismTools',			#sourceCode : 'snapshot\r\t| pkgSnapshot extensions |\r\tpkgSnapshot := (MCPackage named: self name) snapshot.\r\t\r\textensions := self extensionMethods\r\t\tcollect: [ :extension | extension asRingDefinition asMCMethodDefinition  ].\r\t\t\r\t^ MCSnapshot fromDefinitions: pkgSnapshot definitions , extensions',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '121' ],		#self : OmReference [ '122' ],		#time : DateAndTime [ '2023-12-03T10:36:08.230443+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #MorphicUIManager,				#isMetaSide : false			},			#name : #'requestText:initialAnswer:title:',			#protocol : #'*ExercismTools',			#sourceCode : 'requestText: formattedText initialAnswer: defaultAnswer title: aTitle\r\t"Derived from #request:initialAnswer:title: but only for formatted text not strings\r\tto avoid overriding formatting."\r\t\r\t"Create an instance of me whose question is queryString with the given \r\tinitial answer. Answer the string the user accepts.\r\tThe title serves for the window that is opened\r\tAnswer the empty string if the user cancels.\r\tAllow for interception with a ProvideAnswerNotification handler."\r\t\r\t|modalMorph|\r\t(ProvideAnswerNotification signal: formattedText) ifNotNil: [:answer |\r\t\t^answer == #default ifTrue: [defaultAnswer] ifFalse: [answer]].\r\tmodalMorph := self modalMorph.\r\t^(modalMorph theme \r\t\ttextEntryIn: modalMorph\r\t\tformattedText: formattedText\r\t\ttitle: aTitle\r\t\tentryText: defaultAnswer)',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '122' ],		#self : OmReference [ '123' ],		#time : DateAndTime [ '2023-12-03T10:36:08.230582+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismMenuGroup,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name\r\t^\'Exercism\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '123' ],		#self : OmReference [ '124' ],		#time : DateAndTime [ '2023-12-03T10:36:08.230723+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismMenuGroup,				#isMetaSide : false			},			#name : #order,			#protocol : #accessing,			#sourceCode : 'order\r\t^1',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '124' ],		#self : OmReference [ '125' ],		#time : DateAndTime [ '2023-12-03T10:36:08.23087+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismCommand class',				#isMetaSide : true			},			#name : #'canBeExecutedInContext:',			#protocol : #activation,			#sourceCode : 'canBeExecutedInContext: aToolContext\r\t^ (super canBeExecutedInContext: aToolContext)\r\t\tand: [ self isExercismTagIn: aToolContext ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '125' ],		#self : OmReference [ '126' ],		#time : DateAndTime [ '2023-12-03T10:36:08.231003+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismCommand class',				#isMetaSide : true			},			#name : #isAbstract,			#protocol : #testing,			#sourceCode : 'isAbstract\r\t\r\t^self == ClyExercismCommand',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '126' ],		#self : OmReference [ '127' ],		#time : DateAndTime [ '2023-12-03T10:36:08.231127+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismCommand class',				#isMetaSide : true			},			#name : #'isExercismTagIn:',			#protocol : #testing,			#sourceCode : 'isExercismTagIn: aToolContext\r\t\r\t^false',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '127' ],		#self : OmReference [ '128' ],		#time : DateAndTime [ '2023-12-03T10:36:08.231263+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismCommand,				#isMetaSide : false			},			#name : #browser,			#protocol : #accessing,			#sourceCode : 'browser\r\t^ browser',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '128' ],		#self : OmReference [ '129' ],		#time : DateAndTime [ '2023-12-03T10:36:08.231388+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismCommand,				#isMetaSide : false			},			#name : #'browser:',			#protocol : #accessing,			#sourceCode : 'browser: anObject\r\tbrowser := anObject',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '129' ],		#self : OmReference [ '130' ],		#time : DateAndTime [ '2023-12-03T10:36:08.231513+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismCommand,				#isMetaSide : false			},			#name : #'prepareFullExecutionInContext:',			#protocol : #execution,			#sourceCode : 'prepareFullExecutionInContext: aToolContext\r\tsuper prepareFullExecutionInContext: aToolContext.\r\r\tself selectedItem: (self selectedItemIn: aToolContext).\r\tself browser: aToolContext tool',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '130' ],		#self : OmReference [ '131' ],		#time : DateAndTime [ '2023-12-03T10:36:08.231636+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismCommand,				#isMetaSide : false			},			#name : #selectedItem,			#protocol : #accessing,			#sourceCode : 'selectedItem\r\t^ selectedItem',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '131' ],		#self : OmReference [ '132' ],		#time : DateAndTime [ '2023-12-03T10:36:08.231759+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismCommand,				#isMetaSide : false			},			#name : #'selectedItem:',			#protocol : #accessing,			#sourceCode : 'selectedItem: anObject\r\tselectedItem := anObject',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '132' ],		#self : OmReference [ '133' ],		#time : DateAndTime [ '2023-12-03T10:36:08.231879+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismCommand,				#isMetaSide : false			},			#name : #'selectedItemIn:',			#protocol : #accessing,			#sourceCode : 'selectedItemIn: aToolContext\r\t^ aToolContext lastSelectedClassGroup',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '133' ],		#self : OmReference [ '134' ],		#time : DateAndTime [ '2023-12-03T10:36:08.23201+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismExerciseCommand class',				#isMetaSide : true			},			#name : #contextMenuOrder,			#protocol : #activation,			#sourceCode : 'contextMenuOrder\r\t<classAnnotationDependency>\r\t\r\t\t^1',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '134' ],		#self : OmReference [ '135' ],		#time : DateAndTime [ '2023-12-03T10:36:08.232238+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismExerciseCommand class',				#isMetaSide : true			},			#name : #isAbstract,			#protocol : #testing,			#sourceCode : 'isAbstract\r\t\r\t^self == ClyExercismExerciseCommand',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '135' ],		#self : OmReference [ '136' ],		#time : DateAndTime [ '2023-12-03T10:36:08.23239+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismExerciseCommand class',				#isMetaSide : true			},			#name : #'isExercismTagIn:',			#protocol : #activation,			#sourceCode : 'isExercismTagIn: aToolContext\r\t^ aToolContext lastSelectedClassGroup name ~= ExercismManager legacyPackagePrefix\r\t\tand: [ aToolContext lastSelectedClassGroup classes\r\t\t\t\tdetect: [ :any | \r\t\t\t\t\t(any package name beginsWith: ExercismManager exercisePrefix , \'@\')\r\t\t\t\t\t\tor: [ (any package name beginsWith: ExercismManager legacyPackagePrefix , \'-\')\r\t\t\t\t\t\t\tor: [ any package name = ExercismManager legacyPackagePrefix ] ] ]\r\t\t\t\tifFound: [ true ]\r\t\t\t\tifNone: [ false ] ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '136' ],		#self : OmReference [ '137' ],		#time : DateAndTime [ '2023-12-03T10:36:08.232521+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismExerciseCommand class',				#isMetaSide : true			},			#name : #packageContextMenuActivation,			#protocol : #activation,			#sourceCode : 'packageContextMenuActivation\r\t"We can use a second annotation to give a similar menu to the Package item"\r\t<classAnnotation>\r\t\r\t^ CmdContextMenuActivation\r\t\tbyItemOf: ClyExercismMenuGroup\r\t\torder: self contextMenuOrder\r\t\tfor: RPackage asCalypsoItemContext',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '137' ],		#self : OmReference [ '138' ],		#time : DateAndTime [ '2023-12-03T10:36:08.23265+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismExerciseCommand class',				#isMetaSide : true			},			#name : #tagContextMenuActivation,			#protocol : #activation,			#sourceCode : 'tagContextMenuActivation\r\t<classAnnotation>\r\t\r\t^ CmdContextMenuActivation\r\t\tbyItemOf: ClyExercismMenuGroup\r\t\torder: self contextMenuOrder\r\t\tfor: ClyTaggedClassGroup asCalypsoItemContext',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '138' ],		#self : OmReference [ '139' ],		#time : DateAndTime [ '2023-12-03T10:36:08.232792+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismExerciseCommand,				#isMetaSide : false			},			#name : #'reportError:for:',			#protocol : #execution,			#sourceCode : 'reportError: anError for: exerciseId\r\t| msg |\r\r\tmsg := exerciseId\r\t\tifNil: [ anError messageText, \'!\' ]\r\t\tifNotNil: [ \r\t\t\t((Smalltalk hasClassNamed: exerciseId kebabAsCamelCase)\r\t\t\t\tifTrue:\r\t\t\t\t\t[ \'Exercise "{1}" is missing metadata! You need to upgrade it in Exercism and re-fetch!\' ]\r\t\t\t\tifFalse:\r\t\t\t\t\t[ \'Exercise "{1}" not found! Please check the Exercism website for valid exercises!\' ])\r\t\t\t\tformat: {exerciseId} ].\r\r\t^ UIManager default abort: msg',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '139' ],		#self : OmReference [ '140' ],		#time : DateAndTime [ '2023-12-03T10:36:08.232915+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismFetchCommand class',				#isMetaSide : true			},			#name : #contextMenuOrder,			#protocol : #activation,			#sourceCode : 'contextMenuOrder\r\t\t^5',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '140' ],		#self : OmReference [ '141' ],		#time : DateAndTime [ '2023-12-03T10:36:08.233055+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismFetchCommand class',				#isMetaSide : true			},			#name : #'worldMenuCommandOn:',			#protocol : #'world menu',			#sourceCode : 'worldMenuCommandOn: aBuilder\r\t<worldMenu>\r\t\r\t| templateCommand browser |\r\t\r\ttemplateCommand := self new \r\t\tpackages: { self package }; \r\t\tyourself.\r\t\r\t(aBuilder item: templateCommand defaultMenuItemName)\r\t\tparent: #Exercism;\r\t\torder: 1;\r\t\taction: [ \r\t\t\tbrowser := Smalltalk tools browser openOnPackage: ExercismManager.\r\t\t\ttemplateCommand browser: browser.\r\t\t\ttemplateCommand execute ];\r\t\ticonName: templateCommand defaultMenuIconName;\r\t\thelp: templateCommand description\r\t\t"withSeparatorAfter"',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '141' ],		#self : OmReference [ '142' ],		#time : DateAndTime [ '2023-12-03T10:36:08.302362+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismFetchCommand,				#isMetaSide : false			},			#name : #defaultMenuIconName,			#protocol : #accessing,			#sourceCode : 'defaultMenuIconName\r\t^#book',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '142' ],		#self : OmReference [ '143' ],		#time : DateAndTime [ '2023-12-03T10:36:08.30281+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismFetchCommand,				#isMetaSide : false			},			#name : #defaultMenuItemName,			#protocol : #accessing,			#sourceCode : 'defaultMenuItemName\r\t^\'Fetch new exercise...\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '143' ],		#self : OmReference [ '144' ],		#time : DateAndTime [ '2023-12-03T10:36:08.302982+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismFetchCommand,				#isMetaSide : false			},			#name : #description,			#protocol : #accessing,			#sourceCode : 'description \r\t^\'Fetch a named Exercism exercise to begin solving it\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '144' ],		#self : OmReference [ '145' ],		#time : DateAndTime [ '2023-12-03T10:36:08.303153+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismFetchCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| submission |\r\r\t[\r\t\tsubmission := ExercismManager default\r\t\t\tfetchFromExercismTo: self packages first.\r\t\t\t\r\t\tsubmission ifNotNil: [\r\t\t\tUIManager default inform: \'Success, Happy Coding\'.\r\t\t\tsubmission exercise \r\t\t\t\tifNil: [ \r\t\t\t\t\tExDomainError signal: \'Missing exercise meta-data\' ]\r\t\t\t\tifNotNil: [ :exercise |\r\t\t\t\t\tself browser selectClass: exercise testCase ]]\r\t ] \r\t\ton: ExDomainError do: [ :ex | \r\t\t\tself reportError: ex for: (submission ifNotNil: [ :s | s exerciseId ]) ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '145' ],		#self : OmReference [ '146' ],		#time : DateAndTime [ '2023-12-03T10:36:08.303319+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismProgressCommand class',				#isMetaSide : true			},			#name : #contextMenuOrder,			#protocol : #activation,			#sourceCode : 'contextMenuOrder\r\t\t^15',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '146' ],		#self : OmReference [ '147' ],		#time : DateAndTime [ '2023-12-03T10:36:08.303493+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismProgressCommand class',				#isMetaSide : true			},			#name : #'worldMenuCommandOn:',			#protocol : #'world menu',			#sourceCode : 'worldMenuCommandOn: aBuilder\r\t<worldMenu>\r\t\r\t| templateCommand |\r\t\r\ttemplateCommand := self new.\r\t(aBuilder item: templateCommand defaultMenuItemName)\r\t\tparent: #Exercism;\r\t\torder: 1;\r\t\taction: [ templateCommand execute ];\r\t\ticonName: templateCommand defaultMenuIconName;\r\t\thelp: templateCommand description;\r\t\twithSeparatorAfter',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '147' ],		#self : OmReference [ '148' ],		#time : DateAndTime [ '2023-12-03T10:36:08.34024+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismProgressCommand,				#isMetaSide : false			},			#name : #defaultMenuIconName,			#protocol : #accessing,			#sourceCode : 'defaultMenuIconName\r\t^#home',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '148' ],		#self : OmReference [ '149' ],		#time : DateAndTime [ '2023-12-03T10:36:08.34045+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismProgressCommand,				#isMetaSide : false			},			#name : #defaultMenuItemName,			#protocol : #accessing,			#sourceCode : 'defaultMenuItemName\r\t^\'View Track Progress\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '149' ],		#self : OmReference [ '150' ],		#time : DateAndTime [ '2023-12-03T10:36:08.340585+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismProgressCommand,				#isMetaSide : false			},			#name : #description,			#protocol : #accessing,			#sourceCode : 'description \r\t^\'Open your Exercism track progress in a web browser\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '150' ],		#self : OmReference [ '151' ],		#time : DateAndTime [ '2023-12-03T10:36:08.340722+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismProgressCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\tExercismManager default viewOnExercism: self selectedItem',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '151' ],		#self : OmReference [ '152' ],		#time : DateAndTime [ '2023-12-03T10:36:08.340862+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismShareCommand class',				#isMetaSide : true			},			#name : #contextMenuOrder,			#protocol : #activation,			#sourceCode : 'contextMenuOrder\r\t\t^15',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '152' ],		#self : OmReference [ '153' ],		#time : DateAndTime [ '2023-12-03T10:36:08.341005+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismShareCommand class',				#isMetaSide : true			},			#name : #hasConfirmedSharing,			#protocol : #accessing,			#sourceCode : 'hasConfirmedSharing\r\t^ hasConfirmedSharing ifNil: [ false ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '153' ],		#self : OmReference [ '154' ],		#time : DateAndTime [ '2023-12-03T10:36:08.341121+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismShareCommand class',				#isMetaSide : true			},			#name : #'hasConfirmedSharing:',			#protocol : #accessing,			#sourceCode : 'hasConfirmedSharing: aBoolean\r\t^hasConfirmedSharing := aBoolean',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '154' ],		#self : OmReference [ '155' ],		#time : DateAndTime [ '2023-12-03T10:36:08.341263+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismShareCommand,				#isMetaSide : false			},			#name : #confirmSharing,			#protocol : #internal,			#sourceCode : 'confirmSharing\r\tself class hasConfirmedSharing\r\t\tifTrue: [ ^ true ].\r\t\t\r\t^ (UIManager default\r\t\tproceed:\r\t\t\t\'Please confirm you are happy to anonymously store your exercise code, on a temporary (7 day) random url at dpaste.com.\\Exercism and Pharo.org are not associated with this service, it is provided as a convenience to help users\\more easily discuss ideas with a wider community.\' withCRs)\r\t\tifTrue: [ self class hasConfirmedSharing: true ]\r\t\tifFalse: [ false ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '155' ],		#self : OmReference [ '156' ],		#time : DateAndTime [ '2023-12-03T10:36:08.341372+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismShareCommand,				#isMetaSide : false			},			#name : #defaultMenuIconName,			#protocol : #accessing,			#sourceCode : 'defaultMenuIconName\r\t^#publish',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '156' ],		#self : OmReference [ '157' ],		#time : DateAndTime [ '2023-12-03T10:36:08.34149+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismShareCommand,				#isMetaSide : false			},			#name : #defaultMenuItemName,			#protocol : #accessing,			#sourceCode : 'defaultMenuItemName\r\t^\'Share on web...\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '157' ],		#self : OmReference [ '158' ],		#time : DateAndTime [ '2023-12-03T10:36:08.341607+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismShareCommand,				#isMetaSide : false			},			#name : #description,			#protocol : #accessing,			#sourceCode : 'description \r\t^\'Create a web link to anonymously share your proposed solution on dpaste.com to discuss with others\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '158' ],		#self : OmReference [ '159' ],		#time : DateAndTime [ '2023-12-03T10:36:08.341751+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismShareCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| exerciseName result url |\r\r\texerciseName := self selectedItem exerciseName.\r\tself confirmSharing ifTrue: [ \r\t[ UIManager default \r\t\tinformUser: \'Sharing...\'\r\t\tduring: [\r\t\t\tresult := ExercismManager default\r\t\t\t\tshareExerciseDPaste: \r\t\t\t\t\t(ExercismExercise\r\t\t\t\t\t\tfind: exerciseName\r\t\t\t\t\t\tifAbsent: [ :name | ^ self reportError: nil for: name asKebabCase ])].\r\r\tresult\r\t\tifNotNil: [ \r\t\t\turl := result.\r\t\t\tUIManager default\r\t\t\t\tinform: (\'Successfully shared to: "{1}"!\' format: {url}).\r\t\t\tClipboard clipboardText: url.\r\t\t\tWebBrowser openOn: url.\r\t\t\t ] \r\t]\r\t\ton: ExercismError \r\t\tdo: [ :ex | self reportError: ex for: nil ] ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '159' ],		#self : OmReference [ '160' ],		#time : DateAndTime [ '2023-12-03T10:36:08.341874+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ClyExercismSubmitCommand class',				#isMetaSide : true			},			#name : #contextMenuOrder,			#protocol : #activation,			#sourceCode : 'contextMenuOrder\r\t\t^10',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '160' ],		#self : OmReference [ '161' ],		#time : DateAndTime [ '2023-12-03T10:36:08.342038+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismSubmitCommand,				#isMetaSide : false			},			#name : #defaultMenuIconName,			#protocol : #accessing,			#sourceCode : 'defaultMenuIconName\r\t^#smallExport',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '161' ],		#self : OmReference [ '162' ],		#time : DateAndTime [ '2023-12-03T10:36:08.342158+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismSubmitCommand,				#isMetaSide : false			},			#name : #defaultMenuItemName,			#protocol : #accessing,			#sourceCode : 'defaultMenuItemName\r\t^\'Submit exercise...\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '162' ],		#self : OmReference [ '163' ],		#time : DateAndTime [ '2023-12-03T10:36:08.342273+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismSubmitCommand,				#isMetaSide : false			},			#name : #description,			#protocol : #accessing,			#sourceCode : 'description \r\t^\'Sumbit your proposed solution to Exercism for mentor review\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '163' ],		#self : OmReference [ '164' ],		#time : DateAndTime [ '2023-12-03T10:36:08.342406+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ClyExercismSubmitCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t| exerciseName result |\r\r\texerciseName := self selectedItem exerciseName.\r\r\t[ result := ExercismManager default\r\t\tsubmitToExercism:\r\t\t\t(ExercismExercise\r\t\t\t\tfind: exerciseName\r\t\t\t\tifAbsent: [ :name | ^ self reportError: nil for: name asKebabCase ]).\r\r\tresult\r\t\tifNotNil: [ UIManager default\r\t\t\t\tinform: (\'Successfully submitted "{1}"!\' format: {exerciseName}) ] \r\t]\r\t\ton: ExercismError \r\t\tdo: [ :ex | self reportError: ex for: nil ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '164' ],		#self : OmReference [ '165' ],		#time : DateAndTime [ '2023-12-03T10:36:08.342537+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'STONJSONWriter class',				#isMetaSide : true			},			#name : #'on:',			#protocol : #'instance creation',			#sourceCode : 'on: writeStream\r\t^ (super on: writeStream)\r\t\t\tjsonMode: true;\r\t\t\tprettyPrint: true;\r\t\t\tnewLine: String lf;\r\t\t\tyourself',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '165' ],		#self : OmReference [ '166' ],		#time : DateAndTime [ '2023-12-03T10:36:08.342666+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'STONJSONWriter class',				#isMetaSide : true			},			#name : #'streamContentsOf:',			#protocol : #'instance creation',			#sourceCode : 'streamContentsOf: anObject\r\t"Answer a String, the results of streaming the writer contents for anObject (simple conveniance method)"\r\t\r\t^String streamContents: [ :stream |\r\t\t\t(self on: stream) nextPut: anObject ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '166' ],		#self : OmReference [ '167' ],		#time : DateAndTime [ '2023-12-03T10:36:08.342794+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #STONJSONWriter,				#isMetaSide : false			},			#name : #newlineIndent,			#protocol : #writing,			#sourceCode : 'newlineIndent\r\t"Override to adopt a json space identation convention"\r\r\tprettyPrint\r\t\tifTrue: [ writeStream nextPutAll: newLine.\r\t\t\tlevel timesRepeat: [ writeStream space: 2 ] ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '167' ],		#self : OmReference [ '168' ],		#time : DateAndTime [ '2023-12-03T10:36:08.342919+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #STONJSONWriter,				#isMetaSide : false			},			#name : #'writeAssociation:',			#protocol : #writing,			#sourceCode : 'writeAssociation: association\r\t"Overriden to support associations"\r\t\r\tself \r\t\tencodeKey: association key \r\t\tvalue: association value',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '168' ],		#self : OmReference [ '169' ],		#time : DateAndTime [ '2023-12-03T10:36:08.343049+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #STONJSONWriter,				#isMetaSide : false			},			#name : #'writeObject:do:',			#protocol : #writing,			#sourceCode : 'writeObject: anObject do: block\r\t"Overridden to support Collections and Dictionaries"\r\t\r\tjsonMode ifTrue: [ \r\t\t(anObject isKindOf: OrderedCollection)\r\t\t\tifTrue: [ ^self writeList: anObject ].\r\t\t(anObject isKindOf: OrderedDictionary)\r\t\t\tifTrue: [ ^self writeMap: anObject ].\r\t\t(anObject isKindOf: Dictionary)\r\t\t\tifTrue: [ ^self writeMap: anObject asOrderedDictionary ]].\r\t\t\r\tsuper writeObject: anObject do: block ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '169' ],		#self : OmReference [ '170' ],		#time : DateAndTime [ '2023-12-03T10:36:08.343173+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExUnauthorized class',				#isMetaSide : true			},			#name : #'signalBadToken:',			#protocol : #instance-creation,			#sourceCode : 'signalBadToken: tokenStringOrNil\r\t^ self new\r\t\ttoken: tokenStringOrNil;\r\t\tsignal',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '170' ],		#self : OmReference [ '171' ],		#time : DateAndTime [ '2023-12-03T10:36:08.343308+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExUnauthorized,				#isMetaSide : false			},			#name : #token,			#protocol : #accessing,			#sourceCode : 'token\r\t^ token',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '171' ],		#self : OmReference [ '172' ],		#time : DateAndTime [ '2023-12-03T10:36:08.343418+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExUnauthorized,				#isMetaSide : false			},			#name : #'token:',			#protocol : #accessing,			#sourceCode : 'token: anObject\r\ttoken := anObject',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '172' ],		#self : OmReference [ '173' ],		#time : DateAndTime [ '2023-12-03T10:36:08.343634+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TonelReader class',				#isMetaSide : true			},			#name : #'fromExerciseDirectory:',			#protocol : #'*ExercismTools',			#sourceCode : 'fromExerciseDirectory: aDirectory\r\r\t"set exercise directory where all source files of exercise occur"\r\r\t^ self new\r\t\texerciseDirectory: aDirectory;\r\t\tyourself ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '173' ],		#self : OmReference [ '174' ],		#time : DateAndTime [ '2023-12-03T10:36:08.343843+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TonelReader,				#isMetaSide : false			},			#name : #'exerciseDirectory:',			#protocol : #'*ExercismTools',			#sourceCode : 'exerciseDirectory: aDirReference\r\r\tpackageDirectory := aDirReference',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '174' ],		#self : OmReference [ '175' ],		#time : DateAndTime [ '2023-12-03T10:36:08.344071+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExTonelWriter,				#isMetaSide : false			},			#name : #'mappedSnapshot:',			#protocol : #'*ExercismTools',			#sourceCode : 'mappedSnapshot: aSnapshot\r\t"extracted from #writeSnapshot: to customise behavior"\r\t\r\t|tonelMap extensionDefinitions|\r\tsnapshot := aSnapshot.\r\ttonelMap := Dictionary new.\r\t\t\r\t"Tonel export classes with their methods, mapped from their filename to content streams"\r\t(snapshot definitions select: #isClassDefinition)\r\t\tdo: [ :classDef |  |filename tonelStream|\r\t\t\tfilename := classDef exTonelFilename.\r\t\t\ttonelStream := WriteStream on: String new.\r\t \t\tself writeClass: classDef on: tonelStream.\r\t  \t\ttonelMap at: filename put: tonelStream ].\r\t\r\t"... and method extensions"\r\textensionDefinitions := (snapshot definitions select: [ :each | \r\t\teach isMethodDefinition and: [ each isExtensionMethod ] ]) removeDuplicates.\r\r\textensionDefinitions do: [ :methodDef | |filename|\r\t\tfilename := methodDef exTonelFilename.\r\t\ttonelMap at: filename ifAbsentPut: [ \r\t\t\t(WriteStream on: String new) nextPutAll: \'Extension { #name : #\', methodDef className, \' }\' ; lf; yourself ].\r\t\tself writeMethodDefinition: methodDef on: (tonelMap at: filename). \r\t\t].\r\t^tonelMap\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '175' ],		#self : OmReference [ '176' ],		#time : DateAndTime [ '2023-12-03T10:36:08.344192+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExTonelWriter,				#isMetaSide : false			},			#name : #'obtainPackageDir:',			#protocol : #private,			#sourceCode : 'obtainPackageDir: aDefinition\r\t"Overridden to allow a specific directory to be supplied"\r\t\r\t^self sourceDirectory ifNil: [ super obtainPackageDir: aDefinition ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '176' ],		#self : OmReference [ '177' ],		#time : DateAndTime [ '2023-12-03T10:36:08.344332+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExTonelWriter,				#isMetaSide : false			},			#name : #sourceDirectory,			#protocol : #accessing,			#sourceCode : 'sourceDirectory\r\t^ sourceDirectory',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '177' ],		#self : OmReference [ '178' ],		#time : DateAndTime [ '2023-12-03T10:36:08.344443+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExTonelWriter,				#isMetaSide : false			},			#name : #'sourceDirectory:',			#protocol : #accessing,			#sourceCode : 'sourceDirectory: anObject\r\tsourceDirectory := anObject',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '178' ],		#self : OmReference [ '179' ],		#time : DateAndTime [ '2023-12-03T10:36:08.344607+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExTonelWriter,				#isMetaSide : false			},			#name : #'writeClass:on:',			#protocol : #'*ExercismTools',			#sourceCode : 'writeClass: aClassDefinition on: aStream\r\t"Not clear on whether this is an override and still needed? ~tma~"\r\t\r\tself writeClassDefinition: aClassDefinition on: aStream.\r\tself writeClassSideMethodDefinitions: aClassDefinition on: aStream.\r\tself writeInstanceSideMethodDefinitions: aClassDefinition on: aStream ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '179' ],		#self : OmReference [ '180' ],		#time : DateAndTime [ '2023-12-03T10:36:08.344812+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TonelParser,				#isMetaSide : false			},			#name : #'documentFrom:',			#protocol : #'*ExercismTools',			#sourceCode : 'documentFrom: aString\r\tself stream: aString readStream.\r\t^self document',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '180' ],		#self : OmReference [ '181' ],		#time : DateAndTime [ '2023-12-03T10:36:08.344975+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StaticTextMorph,				#isMetaSide : false			},			#name : #enabled,			#protocol : #testing,			#sourceCode : 'enabled\r\t^false',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '181' ],		#self : OmReference [ '182' ],		#time : DateAndTime [ '2023-12-03T10:36:08.345151+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismExercise class',				#isMetaSide : true			},			#name : #allExercises,			#protocol : #'instance creation',			#sourceCode : 'allExercises\r\t^ ExercismTest allSubclasses\r\t\tselect: [ :class | class class includesSelector: #exercise ]\r\t\tthenCollect: [ :class | class exercise ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '182' ],		#self : OmReference [ '183' ],		#time : DateAndTime [ '2023-12-03T10:36:08.345283+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismExercise class',				#isMetaSide : true			},			#name : #bonusExercises,			#protocol : #'instance creation',			#sourceCode : 'bonusExercises\r\t"self bonusExercises"\r\r\t^ (self allExercises\r\t\treject:\r\t\t\t[ :exercise | exercise isCore or: [ exercise isActive not ] ])\r\t\tasSortedCollection: [ :a :b | a name < b name ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '183' ],		#self : OmReference [ '184' ],		#time : DateAndTime [ '2023-12-03T10:36:08.345403+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismExercise class',				#isMetaSide : true			},			#name : #coreExercises,			#protocol : #'instance creation',			#sourceCode : 'coreExercises\r\t^(self allExercises select: [:e | e isCore and: [e isActive]])\r\t\tasSortedCollection: [ :a :b | a isFirst or: [a isFollowedBy: b ]]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '184' ],		#self : OmReference [ '185' ],		#time : DateAndTime [ '2023-12-03T10:36:08.345522+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismExercise class',				#isMetaSide : true			},			#name : #'exerciseNameFrom:',			#protocol : #'instance creation',			#sourceCode : 'exerciseNameFrom: packageOrTag\r\t"Answer the name of the exercise given its storage RPackage or tag"\t\r\t\t\r\t^($@ split: packageOrTag name) last asKebabCase.\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '185' ],		#self : OmReference [ '186' ],		#time : DateAndTime [ '2023-12-03T10:36:08.345652+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismExercise class',				#isMetaSide : true			},			#name : #'find:ifAbsent:',			#protocol : #'instance creation',			#sourceCode : 'find: exercismName ifAbsent: aBlock\r\t| kebabedName |\r\r\tkebabedName := exercismName asKebabCase.\r\t^ self allExercises\r\t\tdetect: [ :ex | ex name = kebabedName ]\r\t\tifNone: [ aBlock cull: exercismName ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '186' ],		#self : OmReference [ '187' ],		#time : DateAndTime [ '2023-12-03T10:36:08.345766+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismExercise class',				#isMetaSide : true			},			#name : #'for:',			#protocol : #'instance creation',			#sourceCode : 'for: anExercismTestCase\r\t^self new\r\t\ttestCase: anExercismTestCase;\r\t\tyourself',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '187' ],		#self : OmReference [ '188' ],		#time : DateAndTime [ '2023-12-03T10:36:08.345895+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #'=',			#protocol : #comparing,			#sourceCode : '= anObject\r\t"Answer whether the receiver and anObject represent the same object."\r\r\tself == anObject\r\t\tifTrue: [ ^ true ].\r\tself class = anObject class\r\t\tifFalse: [ ^ false ].\r\t^ self uuid = anObject uuid',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '188' ],		#self : OmReference [ '189' ],		#time : DateAndTime [ '2023-12-03T10:36:08.346102+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #asJsonData,			#protocol : #converting,			#sourceCode : 'asJsonData\r\t"Answer a collection of attributes"\r\t\r\t^{ \'slug\' -> self name.\r\t\t\'uuid\' -> self uuid.\r\t\t\'core\' -> self isCore.\r\t\t\'auto_approve\' -> self isAutoApproved.\r\t\t\'unlocked_by\' -> self unlockReference.\r\t\t\'difficulty\' -> self difficulty.\r\t\t\'topics\' -> self topics } asOrderedDictionary ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '189' ],		#self : OmReference [ '190' ],		#time : DateAndTime [ '2023-12-03T10:36:08.346229+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #descriptionText,			#protocol : #accessing,			#sourceCode : 'descriptionText\r\t"Answer the String, that is the hint text for exerciems (this is the text afer the markdown heading ## Hint"\r\r\t| text offset |\r\ttext := self testCase comment.\r\t(offset := text findString: self hintMarker) = 0 ifTrue: [ ^ text ].\r\t\r\t^(text truncateTo: offset - 1) trimBoth\r\t',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '190' ],		#self : OmReference [ '191' ],		#time : DateAndTime [ '2023-12-03T10:36:08.346341+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #difficulty,			#protocol : #accessing,			#sourceCode : 'difficulty\r\t^ difficulty',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '191' ],		#self : OmReference [ '192' ],		#time : DateAndTime [ '2023-12-03T10:36:08.346455+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #'difficulty:',			#protocol : #accessing,			#sourceCode : 'difficulty: anInteger\r\tdifficulty := anInteger',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '192' ],		#self : OmReference [ '193' ],		#time : DateAndTime [ '2023-12-03T10:36:08.346573+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #exerciseClass,			#protocol : #accessing,			#sourceCode : 'exerciseClass\r\t"Answer the main solution class, by convention this is the name of the exercise"\r\t\r\t^ self testCase\r\t\tifNil: [ nil ]\r\t\tifNotNil:\r\t\t\t[ :test | Smalltalk classNamed: self exerciseClassName ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '193' ],		#self : OmReference [ '194' ],		#time : DateAndTime [ '2023-12-03T10:36:08.346686+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #exerciseClassName,			#protocol : #accessing,			#sourceCode : 'exerciseClassName \r\t^self testCase name withoutSuffix: \'Test\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '194' ],		#self : OmReference [ '195' ],		#time : DateAndTime [ '2023-12-03T10:36:08.346797+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #exercisePackage,			#protocol : #accessing,			#sourceCode : 'exercisePackage\r\t^self testCase package',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '195' ],		#self : OmReference [ '196' ],		#time : DateAndTime [ '2023-12-03T10:36:08.346925+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #exercisePackageContainer,			#protocol : #internal,			#sourceCode : 'exercisePackageContainer\r\t"Answer the package or legacy tag, that containts the exercise - must conform to #classes, #snapshot protocols"\r\t\r\t| pkg |\r\t\r\t^ (pkg := self exercisePackage) = ExercismManager legacyExercismPackage\r\t\tifTrue: [ pkg classTagForClass: self testCase ]\r\t\tifFalse: [ pkg ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '196' ],		#self : OmReference [ '197' ],		#time : DateAndTime [ '2023-12-03T10:36:08.347052+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #followedBy,			#protocol : #navigating,			#sourceCode : 'followedBy\r"testcase : ^self unlockedBy ifNil: [\'\' ] ifNotNil: [ :parent | parent followedBy ]"\r\t^ self class coreExercises detect: [ :ex | ex isUnlockedBy: self ] ifNone: [  nil ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '197' ],		#self : OmReference [ '198' ],		#time : DateAndTime [ '2023-12-03T10:36:08.347195+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #'gtInspectorDetailsIn:',			#protocol : #gt-inspector,			#sourceCode : 'gtInspectorDetailsIn: composite\r\t<gtInspectorPresentationOrder: 30>\r\t^ composite table\r\t\ttitle: \'Exercism\';\r\t\tdisplay: [ \r\t\t\t\t\t{\'exercise\' -> self name.\r\t\t\t\t\t\'core\' -> true.\r\t\t\t\t\t\'difficulty\' -> self difficulty.\r\t\t\t\t\t\'unlocks\' -> self unlockedExercises.\r\t\t\t\t\t\'topics\' -> self topics.\r\t\t\t\t\t\'tests\' -> self testCase.\r\t\t\t\t\t\'solution\' -> self exerciseClass.\r\t\t\t\t\t\'uuid\' -> self uuid.\r\t\t\t\t\t\'followed by\' -> self followedBy.\r\t\t\t\t\t\'hint\' -> self hintText.\r\t\t\t\t\t } ];\r\t\tcolumn: \'Property\' evaluated: #key;\r\t\tcolumn: \'Value\' evaluated: [:v | \r\t\t\tv key = \'unlocks\' ifTrue: [v value asCommaString ] ifFalse: [ v value ]];\r\t\tsend: #value',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '198' ],		#self : OmReference [ '199' ],		#time : DateAndTime [ '2023-12-03T10:36:08.347315+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #hash,			#protocol : #comparing,			#sourceCode : 'hash\r\t"Answer an integer value that is related to the identity of the receiver."\r\r\t^ self class hash bitXor: self uuid hash',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '199' ],		#self : OmReference [ '200' ],		#time : DateAndTime [ '2023-12-03T10:36:08.347484+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #hintMarker,			#protocol : #accessing,			#sourceCode : 'hintMarker\r\t^ \'## Hint\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '200' ],		#self : OmReference [ '201' ],		#time : DateAndTime [ '2023-12-03T10:36:08.347616+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #hintText,			#protocol : #accessing,			#sourceCode : 'hintText\r\t"Answer the String, that is the hint text for exerciems (this is the text afer the markdown heading ## Hint"\r\r\t| hintIndex |\r\tself testCase comment\r\t\tifNotNil: [ :comment | \r\t\t\t| hintMarker |\r\t\t\thintMarker := self hintMarker.\r\t\t\thintIndex := comment findString: hintMarker.\r\t\t\thintIndex > 0\r\t\t\t\tifTrue: [ ^ (comment allButFirst: hintIndex + hintMarker size) trimBoth ] ].\r\t^ \'\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '201' ],		#self : OmReference [ '202' ],		#time : DateAndTime [ '2023-12-03T10:36:08.347729+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #id,			#protocol : #accessing,			#sourceCode : 'id \r\t^self name',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '202' ],		#self : OmReference [ '203' ],		#time : DateAndTime [ '2023-12-03T10:36:08.347848+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #initialize,			#protocol : #initialization,			#sourceCode : 'initialize\r\tsuper initialize.\r\tself\r\t\tisCore: false;\r\t\tisDeprecated: false;\r\t\tisAutoApproved: false;\r\t\ttopics: #()',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '203' ],		#self : OmReference [ '204' ],		#time : DateAndTime [ '2023-12-03T10:36:08.347976+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #isActive,			#protocol : #accessing,			#sourceCode : 'isActive\r\t^self testCase isActive ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '204' ],		#self : OmReference [ '205' ],		#time : DateAndTime [ '2023-12-03T10:36:08.348093+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #isAutoApproved,			#protocol : #accessing,			#sourceCode : 'isAutoApproved\r\t^ isAutoApproved',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '205' ],		#self : OmReference [ '206' ],		#time : DateAndTime [ '2023-12-03T10:36:08.348216+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #'isAutoApproved:',			#protocol : #accessing,			#sourceCode : 'isAutoApproved: anObject\r\tisAutoApproved := anObject',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '206' ],		#self : OmReference [ '207' ],		#time : DateAndTime [ '2023-12-03T10:36:08.348336+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #isCore,			#protocol : #accessing,			#sourceCode : 'isCore\r\t^ isCore',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '207' ],		#self : OmReference [ '208' ],		#time : DateAndTime [ '2023-12-03T10:36:08.348451+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #'isCore:',			#protocol : #accessing,			#sourceCode : 'isCore: aBoolean\r\tisCore := aBoolean',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '208' ],		#self : OmReference [ '209' ],		#time : DateAndTime [ '2023-12-03T10:36:08.348564+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #isDefined,			#protocol : #accessing,			#sourceCode : 'isDefined\r\t^self exerciseClass notNil',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '209' ],		#self : OmReference [ '210' ],		#time : DateAndTime [ '2023-12-03T10:36:08.348679+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #isDeprecated,			#protocol : #accessing,			#sourceCode : 'isDeprecated\r\t^ isDeprecated',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '210' ],		#self : OmReference [ '211' ],		#time : DateAndTime [ '2023-12-03T10:36:08.348793+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #'isDeprecated:',			#protocol : #accessing,			#sourceCode : 'isDeprecated: anObject\r\tisDeprecated := anObject',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '211' ],		#self : OmReference [ '212' ],		#time : DateAndTime [ '2023-12-03T10:36:08.348908+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #isEmpty,			#protocol : #accessing,			#sourceCode : 'isEmpty\r\t^self solutionClasses isEmpty',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '212' ],		#self : OmReference [ '213' ],		#time : DateAndTime [ '2023-12-03T10:36:08.349024+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #isFirst,			#protocol : #comparing,			#sourceCode : 'isFirst\r\t^ self unlockedBy isNil',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '213' ],		#self : OmReference [ '214' ],		#time : DateAndTime [ '2023-12-03T10:36:08.349151+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #'isFollowedBy:',			#protocol : #comparing,			#sourceCode : 'isFollowedBy: anExercismExercise\r\r\tself isFirst ifTrue: [ ^ self ~= anExercismExercise ].\r\tanExercismExercise isFirst ifTrue: [ ^ false ].\r\t\t\r\t^ (anExercismExercise isUnlockedBy: self)\r\t\tifTrue: [ true ]\r\t\tifFalse: [ self isFollowedBy: anExercismExercise unlockedBy ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '214' ],		#self : OmReference [ '215' ],		#time : DateAndTime [ '2023-12-03T10:36:08.349269+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #'isUnlockedBy:',			#protocol : #comparing,			#sourceCode : 'isUnlockedBy: anExercise\r\t^ self unlockedBy\r\t\tifNil: [ false ]\r\t\tifNotNil: [ :exercise | exercise = anExercise ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '215' ],		#self : OmReference [ '216' ],		#time : DateAndTime [ '2023-12-03T10:36:08.349386+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #name,			#protocol : #accessing,			#sourceCode : 'name \r\t^self exerciseClassName asKebabCase ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '216' ],		#self : OmReference [ '217' ],		#time : DateAndTime [ '2023-12-03T10:36:08.349661+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #'printOn:',			#protocol : #printing,			#sourceCode : 'printOn: aStream\r\t\r\taStream\r\t\tnextPutAll: \'Exercise(\';\r\t\tnextPutAll: self name.\r\tself isCore\r\t\tifTrue: [ aStream nextPut: $* ].\r\tself isDefined\r\t\tifTrue: [ aStream\r\t\t\t\tspace;\r\t\t\t\tprint: self difficulty ]\r\t\tifFalse: [ aStream nextPut: $? ].\r\taStream nextPut: $)',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '217' ],		#self : OmReference [ '218' ],		#time : DateAndTime [ '2023-12-03T10:36:08.349968+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #removeSolutionClasses,			#protocol : #removing,			#sourceCode : 'removeSolutionClasses\r\t"Solution classes with implemented solution to be removed - utilized by TestRunner before importing student solution"\r\t\r\t^self solutionClasses do: [:solutionClass | solutionClass  removeFromSystem]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '218' ],		#self : OmReference [ '219' ],		#time : DateAndTime [ '2023-12-03T10:36:08.350143+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #snapshot,			#protocol : #accessing,			#sourceCode : 'snapshot\r\t"Answer the MCSnapshot for the exercise"\r\t\r\t^self exercisePackageContainer snapshot',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '219' ],		#self : OmReference [ '220' ],		#time : DateAndTime [ '2023-12-03T10:36:08.350276+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #solutionClasses,			#protocol : #accessing,			#sourceCode : 'solutionClasses\r\t"Answer the classes that are submitted to Exercism"\r\t\r\t^self exercisePackageContainer classes reject: [ :c | c isKindOf: ExercismTest class ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '220' ],		#self : OmReference [ '221' ],		#time : DateAndTime [ '2023-12-03T10:36:08.3504+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #solutionId,			#protocol : #accessing,			#sourceCode : 'solutionId\r\t^self testCase solutionId',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '221' ],		#self : OmReference [ '222' ],		#time : DateAndTime [ '2023-12-03T10:36:08.35059+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #solutionSources,			#protocol : #accessing,			#sourceCode : 'solutionSources\r\t"Answer a Dictionary of filename to source code mappings for the solution that will be saved on Exercism. Exercism web interface displays files in order of upload."\r\t\r\t| packageFileMap testResult resultDictionary solutionClassNames solutionFileNames |\r\t\r\tpackageFileMap := ExTonelWriter new mappedSnapshot: self snapshot.\r\t\r\t"Exclude non-solution classes, i.e. filter out tests"\r\tsolutionClassNames := self solutionClasses collect: [ :c | c name ].\r\tsolutionFileNames := packageFileMap keys select: [ :filename | \r\t\tsolutionClassNames includes: (filename findTokens: \'.\') first ]. \r\r\t"Sort classes before extensions, then sort by class name"\r\tsolutionFileNames sort: [ :filenameA :filenameB | |tokensA tokensB|\r\t\ttokensA := filenameA findTokens: \'.\'.\r\t\ttokensB := filenameB findTokens: \'.\'.\r\t\t(tokensA second, tokensA first) < (tokensB second, tokensB first) ].\r\r\t"Summarise test results to show with solution"\r\ttestResult := [ self testCase suite run] on: Error do: [ TestResult new ].\r\t\r\t"Build result in the order we want files displayed by Exercism web interface"\r\tresultDictionary := OrderedDictionary new.\r\tsolutionFileNames do: [ :filename | \r\t\tresultDictionary at: filename put: ( packageFileMap at: filename) contents ].\r\tresultDictionary at: \'TestResults.txt\' put: testResult exercismSummary.\r\t^ resultDictionary\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '222' ],		#self : OmReference [ '223' ],		#time : DateAndTime [ '2023-12-03T10:36:08.35072+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #'storeSolutionId:',			#protocol : #storing,			#sourceCode : 'storeSolutionId: anId\r\t^self testCase solutionId: anId',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '223' ],		#self : OmReference [ '224' ],		#time : DateAndTime [ '2023-12-03T10:36:08.350856+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #testCase,			#protocol : #accessing,			#sourceCode : 'testCase\r\t^ testCase',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '224' ],		#self : OmReference [ '225' ],		#time : DateAndTime [ '2023-12-03T10:36:08.350982+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #'testCase:',			#protocol : #accessing,			#sourceCode : 'testCase: anExercismTest\r\ttestCase := anExercismTest',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '225' ],		#self : OmReference [ '226' ],		#time : DateAndTime [ '2023-12-03T10:36:08.361789+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #topics,			#protocol : #accessing,			#sourceCode : 'topics\r\t^ topics',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '226' ],		#self : OmReference [ '227' ],		#time : DateAndTime [ '2023-12-03T10:36:08.361938+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #'topics:',			#protocol : #accessing,			#sourceCode : 'topics: aStringArray\r\ttopics := aStringArray',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '227' ],		#self : OmReference [ '228' ],		#time : DateAndTime [ '2023-12-03T10:36:08.362066+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #trackId,			#protocol : #accessing,			#sourceCode : 'trackId\r\t^ExercismManager trackId',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '228' ],		#self : OmReference [ '229' ],		#time : DateAndTime [ '2023-12-03T10:36:08.362193+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #unlockReference,			#protocol : #accessing,			#sourceCode : 'unlockReference\r\t"Answer the String unlock reference for a non-core exercise, otherwise nil"\r\r\t^ self isCore\r\t\tifTrue: [ nil ]\r\t\tifFalse: [ self unlockedBy ifNotNil: [:parent | parent name ]]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '229' ],		#self : OmReference [ '230' ],		#time : DateAndTime [ '2023-12-03T10:36:08.362311+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #unlockedBy,			#protocol : #accessing,			#sourceCode : 'unlockedBy\r\t^ unlockedBy ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '230' ],		#self : OmReference [ '231' ],		#time : DateAndTime [ '2023-12-03T10:36:08.362429+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #'unlockedBy:',			#protocol : #accessing,			#sourceCode : 'unlockedBy: anExercismExercise\r\tunlockedBy := anExercismExercise',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '231' ],		#self : OmReference [ '232' ],		#time : DateAndTime [ '2023-12-03T10:36:08.36255+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #unlockedExercises,			#protocol : #accessing,			#sourceCode : 'unlockedExercises\r\t^self class bonusExercises select: [ :e | e isUnlockedBy: self ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '232' ],		#self : OmReference [ '233' ],		#time : DateAndTime [ '2023-12-03T10:36:08.362667+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #uuid,			#protocol : #accessing,			#sourceCode : 'uuid\r\t^self testCase uuid',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '233' ],		#self : OmReference [ '234' ],		#time : DateAndTime [ '2023-12-03T10:36:08.362789+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #verifySolutionForSubmission,			#protocol : #verifying,			#sourceCode : 'verifySolutionForSubmission\r\t<todo>',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '234' ],		#self : OmReference [ '235' ],		#time : DateAndTime [ '2023-12-03T10:36:08.362909+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #version,			#protocol : #accessing,			#sourceCode : 'version\r\t^self testCase version',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '235' ],		#self : OmReference [ '236' ],		#time : DateAndTime [ '2023-12-03T10:36:08.363039+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismExercise,				#isMetaSide : false			},			#name : #wordifiedName,			#protocol : #accessing,			#sourceCode : 'wordifiedName\r\t"Answer the english readable name of the exercise"\r\r\t^ String\r\t\tstreamContents: [ :aStream | \r\t\t\tself exerciseClassName \r\t\t\t\tdoWithIndex: [ :char :i | \r\t\t\t\t\t(char isUppercase and: [ i > 1 ])\r\t\t\t\t\t\tifTrue: [ aStream space ].\r\t\t\t\t\taStream nextPut: char ] ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '236' ],		#self : OmReference [ '237' ],		#time : DateAndTime [ '2023-12-03T10:36:08.363166+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'MockExercismExercise class',				#isMetaSide : true			},			#name : #allExercises,			#protocol : #'instance creation',			#sourceCode : 'allExercises \r\r\t^ { TwoFerTest exercise } asOrderedCollection ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '237' ],		#self : OmReference [ '238' ],		#time : DateAndTime [ '2023-12-03T10:36:08.363293+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismHttpClient class',				#isMetaSide : true			},			#name : #'configureToken:',			#protocol : #accessing,			#sourceCode : 'configureToken: your_CLI_token\r    "Get your_CLI_token at https://exercism.io/my/settings"\r    ApiToken := your_CLI_token',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '238' ],		#self : OmReference [ '239' ],		#time : DateAndTime [ '2023-12-03T10:36:08.363405+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismHttpClient class',				#isMetaSide : true			},			#name : #hasToken,			#protocol : #testing,			#sourceCode : 'hasToken\r    ^ApiToken notNil ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '239' ],		#self : OmReference [ '240' ],		#time : DateAndTime [ '2023-12-03T10:36:08.363516+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismHttpClient class',				#isMetaSide : true			},			#name : #hostName,			#protocol : #accessing,			#sourceCode : 'hostName\r\t^ \'api.exercism.io\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '240' ],		#self : OmReference [ '241' ],		#time : DateAndTime [ '2023-12-03T10:36:08.363623+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismHttpClient class',				#isMetaSide : true			},			#name : #new,			#protocol : #'instance creation',			#sourceCode : 'new\r\t^self newHost: self hostName',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '241' ],		#self : OmReference [ '242' ],		#time : DateAndTime [ '2023-12-03T10:36:08.363787+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismHttpClient class',				#isMetaSide : true			},			#name : #'newHost:',			#protocol : #'instance creation',			#sourceCode : 'newHost: hostName\r\r\t^self basicNew\r\t\tinitialize;\r\t\thostName: hostName;\r\t\tyourself\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '242' ],		#self : OmReference [ '243' ],		#time : DateAndTime [ '2023-12-03T10:36:08.363934+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismHttpClient class',				#isMetaSide : true			},			#name : #promptForToken,			#protocol : #caching,			#sourceCode : 'promptForToken\r\t| url linkText requestText initialAnswer title newToken  |\r\turl := \'https://exercism.org/settings/api_cli\'.\r\t\r\tlinkText := url asText\r\t\taddAttribute: (TextAction new actOnClickBlock: [WebBrowser openOn: url]);\r\t\taddAttribute: TextColor blue;\r\t\taddAttribute: TextEmphasis underlined.\r\t\t\r  \trequestText := \'CLI token available at  \' asText, linkText.\r\tinitialAnswer := ApiToken ifNil: [ \'\' ]. \r\ttitle := (initialAnswer ifEmpty: [ \'\' ] ifNotEmpty: [ \'Unauthorized or Invalid token. \' ]) , \r\t\t\'Please enter your Exercism student token\'.\r\t\t\r\tnewToken := MorphicUIManager default requestText: requestText initialAnswer: initialAnswer title: title.\r\tnewToken ifNil: [ ^false ].\r\t(newToken = ApiToken)  ifTrue: [ ^false ].\r\t\r\tExercismHttpClient configureToken: newToken.\r\t^true "retry"',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '243' ],		#self : OmReference [ '244' ],		#time : DateAndTime [ '2023-12-03T10:36:08.364041+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismHttpClient class',				#isMetaSide : true			},			#name : #reset,			#protocol : #caching,			#sourceCode : 'reset\r\tApiToken := nil\r\t',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '244' ],		#self : OmReference [ '245' ],		#time : DateAndTime [ '2023-12-03T10:36:08.364147+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismHttpClient class',				#isMetaSide : true			},			#name : #solutionPath,			#protocol : #accessing,			#sourceCode : 'solutionPath\r    ^\'/v1/solutions\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '245' ],		#self : OmReference [ '246' ],		#time : DateAndTime [ '2023-12-03T10:36:08.364254+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismHttpClient class',				#isMetaSide : true			},			#name : #token,			#protocol : #accessing,			#sourceCode : 'token\r\t^ ApiToken ifNil: [  \'not-configured\' ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '246' ],		#self : OmReference [ '247' ],		#time : DateAndTime [ '2023-12-03T10:36:08.364384+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismHttpClient class',				#isMetaSide : true			},			#name : #verifyToken,			#protocol : #testing,			#sourceCode : 'verifyToken\r\tself hasToken ifFalse: [ ExUnauthorized signal ].\r\t^ true',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '247' ],		#self : OmReference [ '248' ],		#time : DateAndTime [ '2023-12-03T10:36:08.364518+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #'addFormEntity:data:',			#protocol : #internal,			#sourceCode : 'addFormEntity: fieldName data: dataDictionary \r\t| multiPartFormDataEntity solutionEntity solutionPart |\r\t\r\tmultiPartFormDataEntity := ZnMultiPartFormDataEntity new.\r\r\tdataDictionary keysAndValuesDo: [ :key :value| \r\t\tsolutionEntity := ZnByteArrayEntity bytes: value.\r\t\tsolutionPart := ZnMimePart exercismFieldName: fieldName \r\t\t\t\tfileName: key entity: solutionEntity.\r\t\t\t\t\r\t\tmultiPartFormDataEntity addPart: solutionPart ].\r\t\t\r\tself zincClient entity: multiPartFormDataEntity \r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '248' ],		#self : OmReference [ '249' ],		#time : DateAndTime [ '2023-12-03T10:36:08.364627+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #createZnClient,			#protocol : #internal,			#sourceCode : 'createZnClient\r\t^ ZnClient new\r\t\thttps;\r\t\thost: self hostName;\r\t\tyourself',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '249' ],		#self : OmReference [ '250' ],		#time : DateAndTime [ '2023-12-03T10:36:08.364739+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #get,			#protocol : #internal,			#sourceCode : 'get\r\t"Answer the result of an HTTP GET command, thows an Exception if 401 response"\r\r\t| result |\r\r\tresult := self zincClient get.\r\r\tself responseCode = 401\r\t\tifTrue: [ self signalUnauthorized ].\r\r\t^ result',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '250' ],		#self : OmReference [ '251' ],		#time : DateAndTime [ '2023-12-03T10:36:08.364848+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #'getLatestExercise:for:',			#protocol : #public,			#sourceCode : 'getLatestExercise: exerciseId for: trackName\r\r\t^self getResource: (self solutionPathFor: \'/latest\') with: {\r\t\t\'track_id\'-> trackName.\r\t\t\'exercise_id\' -> exerciseId }',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '251' ],		#self : OmReference [ '252' ],		#time : DateAndTime [ '2023-12-03T10:36:08.364956+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #'getResource:',			#protocol : #public,			#sourceCode : 'getResource: filePath\r\r\t^ self getResource: filePath with: #()',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '252' ],		#self : OmReference [ '253' ],		#time : DateAndTime [ '2023-12-03T10:36:08.365065+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #'getResource:with:',			#protocol : #public,			#sourceCode : 'getResource: filePath with: queryMap\r\r\tself path: filePath.\r\t\r\tqueryMap asDictionary keysAndValuesDo: [ :key :value |\r\t\tself queryAt: key put: value  ].\r\t\r\t^ self get',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '253' ],		#self : OmReference [ '254' ],		#time : DateAndTime [ '2023-12-03T10:36:08.365171+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #'getSpecifiedExercise:',			#protocol : #public,			#sourceCode : 'getSpecifiedExercise: uuid\r\r\t^self getResource: (self solutionPathFor: uuid) ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '254' ],		#self : OmReference [ '255' ],		#time : DateAndTime [ '2023-12-03T10:36:08.365274+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #hostName,			#protocol : #accessing,			#sourceCode : 'hostName\r\t^ hostName',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '255' ],		#self : OmReference [ '256' ],		#time : DateAndTime [ '2023-12-03T10:36:08.36538+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #'hostName:',			#protocol : #accessing,			#sourceCode : 'hostName: hostNameString\r\thostName := hostNameString',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '256' ],		#self : OmReference [ '257' ],		#time : DateAndTime [ '2023-12-03T10:36:08.365502+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #parameterString,			#protocol : #internal,			#sourceCode : 'parameterString\r\t^ String\r\t\tstreamContents: [ :s | \r\t\t\tself zincClient request requestLine uri query \r\t\t\tifNotNil: [ :q |\r\t\t\t\tq associations do: [ :params | \r\t\t\t\t\ts\r\t\t\t\t\t\tnextPutAll: params key asString;\r\t\t\t\t\t\tnextPutAll: \': \';\r\t\t\t\t\t\tnextPutAll: params value ] \r\t\t\t\tseparatedBy: [ s nextPutAll: \', \' ]]]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '257' ],		#self : OmReference [ '258' ],		#time : DateAndTime [ '2023-12-03T10:36:08.36564+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #patch,			#protocol : #internal,			#sourceCode : 'patch\r\t| response status statusCode successCodes |\r\t\r\tresponse := self zincClient patch.\r\t\r\tstatus := self zincClient response statusLine.\r\tstatusCode := self responseCode.\r\t\r\tsuccessCodes := {201 -> \'SUCCESS\'. 400 -> \'NO CHANGES\'} asDictionary.\r\t\r\t(successCodes includesKey: statusCode)\r\t\tifTrue: [ \r\t\t\t\tself inform: \'Exercism Submit - \' , (successCodes at: statusCode) value. \r\t\t\t\t^response ].\r\t\t\r\tstatusCode = 401 ifTrue: [ \r\t\tExUnauthorized signalBadToken: ApiToken ].\r\t\r\tself error:\r\t\t\t\'Exercism Submit - UNKNOWN ERROR (\' , \r\t\t\tstatusCode printString, \' \' , status reason , \')\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '258' ],		#self : OmReference [ '259' ],		#time : DateAndTime [ '2023-12-03T10:36:08.365752+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #'patchSolution:with:',			#protocol : #public,			#sourceCode : 'patchSolution: solutionIdString with: solutionDataMap\r\t\r\t^self\r\t\tpath: (self solutionPathFor: solutionIdString);\r\t\taddFormEntity: \'files[]\' data: solutionDataMap;\r\t\tpatch',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '259' ],		#self : OmReference [ '260' ],		#time : DateAndTime [ '2023-12-03T10:36:08.365856+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #'path:',			#protocol : #internal,			#sourceCode : 'path: aString\r\tself zincClient path: aString\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '260' ],		#self : OmReference [ '261' ],		#time : DateAndTime [ '2023-12-03T10:36:08.365967+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #post,			#protocol : #internal,			#sourceCode : 'post\r\t"Answer the result of an HTTP GET command, thows an Exception if 401 response"\r\r\t| result |\r\r\tresult := self zincClient post.\r\r\tself responseCode = 401\r\t\tifTrue: [ self signalUnauthorized ].\r\r\t^ result',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '261' ],		#self : OmReference [ '262' ],		#time : DateAndTime [ '2023-12-03T10:36:08.366071+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #promptForToken,			#protocol : #internal,			#sourceCode : 'promptForToken \r\t^self class promptForToken',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '262' ],		#self : OmReference [ '263' ],		#time : DateAndTime [ '2023-12-03T10:36:08.366177+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #'queryAt:put:',			#protocol : #internal,			#sourceCode : 'queryAt: stringId put: stringValue\r\tself zincClient queryAt: stringId put: stringValue\r\t\t',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '263' ],		#self : OmReference [ '264' ],		#time : DateAndTime [ '2023-12-03T10:36:08.366281+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #responseCode,			#protocol : #public,			#sourceCode : 'responseCode\r\t^ self zincClient response code',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '264' ],		#self : OmReference [ '265' ],		#time : DateAndTime [ '2023-12-03T10:36:08.366386+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #signalUnauthorized,			#protocol : #internal,			#sourceCode : 'signalUnauthorized\r\tExUnauthorized signalBadToken: ApiToken',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '265' ],		#self : OmReference [ '266' ],		#time : DateAndTime [ '2023-12-03T10:36:08.36651+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #'solutionPathFor:',			#protocol : #internal,			#sourceCode : 'solutionPathFor: aString\r\t"Answer a path string that accounts for missing or extra / path characters"\r\t\r\t^ String\r\t\tstreamContents: [ :s | \r\t\t\ts\r\t\t\t\tnextPutAll: self class solutionPath exPathString;\r\t\t\t\tnextPutAll:\r\t\t\t\t\t(aString first = Path delimiter\r\t\t\t\t\t\tifTrue: [ aString allButFirst ]\r\t\t\t\t\t\tifFalse: [ aString ]) ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '266' ],		#self : OmReference [ '267' ],		#time : DateAndTime [ '2023-12-03T10:36:08.366616+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #'username:password:',			#protocol : #internal,			#sourceCode : 'username: nameString password: pwdString\r\tself zincClient username: nameString password: pwdString\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '267' ],		#self : OmReference [ '268' ],		#time : DateAndTime [ '2023-12-03T10:36:08.36672+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #verifyToken,			#protocol : #public,			#sourceCode : 'verifyToken\r\t^ self class verifyToken',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '268' ],		#self : OmReference [ '269' ],		#time : DateAndTime [ '2023-12-03T10:36:08.366828+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpClient,				#isMetaSide : false			},			#name : #zincClient,			#protocol : #accessing,			#sourceCode : 'zincClient\r\t^ (zincClient ifNil: [ zincClient := self createZnClient ])\r\t\theaderAt: \'Authorization\' put: \'Bearer \' , self class token;\r\t\tyourself',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '269' ],		#self : OmReference [ '270' ],		#time : DateAndTime [ '2023-12-03T10:36:08.366943+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismDownloadCommand class',				#isMetaSide : true			},			#name : #'from:track:exercise:',			#protocol : #command,			#sourceCode : 'from: aClient track: trackId exercise: exerciseId\r\t^(self client: aClient)\r\t\ttrack: trackId exercise: exerciseId;\r\t\tyourself',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '270' ],		#self : OmReference [ '271' ],		#time : DateAndTime [ '2023-12-03T10:36:08.367059+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismDownloadCommand class',				#isMetaSide : true			},			#name : #'track:exercise:',			#protocol : #command,			#sourceCode : 'track: trackId exercise: exerciseId\r\t^ self from: ExercismHttpClient new track: trackId exercise: exerciseId',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '271' ],		#self : OmReference [ '272' ],		#time : DateAndTime [ '2023-12-03T10:36:08.367182+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismDownloadCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t^ self\r\t\texecuteCheckingToken: [ | submission |\r\t\t\t\r\t\t\tsubmission := self fetchLatestSubmission.\r\t\t\tself fetchExerciseFilesFor: submission. \r\t\t\tself installExerciseFor: submission.\r\t\t\tsubmission storeSolutionId.\r\r\t\t\tsubmission ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '272' ],		#self : OmReference [ '273' ],		#time : DateAndTime [ '2023-12-03T10:36:08.367319+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismDownloadCommand,				#isMetaSide : false			},			#name : #'installExerciseFor:',			#protocol : #internal,			#sourceCode : 'installExerciseFor: submission\r\t\r\t"submission will put sources to memory directory and load definitions from snapshot"\r\tsubmission installDefinitionsFromSnapshot.\r\r\tSystemAnnouncer uniqueInstance\r\t\tannounce: (RPackageRegistered to: submission exercise exercisePackage).\r\t',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '273' ],		#self : OmReference [ '274' ],		#time : DateAndTime [ '2023-12-03T10:36:08.367433+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismDownloadCommand,				#isMetaSide : false			},			#name : #retrieveLatestData,			#protocol : #internal,			#sourceCode : 'retrieveLatestData\r\t| responseString |\r\t\t\r\tresponseString := self httpClient getLatestExercise: exerciseId for: trackName.\r\t^ STON fromString: responseString',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '274' ],		#self : OmReference [ '275' ],		#time : DateAndTime [ '2023-12-03T10:36:08.367562+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismDownloadCommand,				#isMetaSide : false			},			#name : #'track:exercise:',			#protocol : #accessing,			#sourceCode : 'track: aStringTrackName exercise: aStringExerciseId\r\ttrackName := aStringTrackName.\r\texerciseId := aStringExerciseId asKebabCase.',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '275' ],		#self : OmReference [ '276' ],		#time : DateAndTime [ '2023-12-03T10:36:08.367706+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismFetchCommand,				#isMetaSide : false			},			#name : #'fetchExerciseFilesFor:',			#protocol : #internal,			#sourceCode : 'fetchExerciseFilesFor: submission\r\r\tsubmission\r\t\tpopulateFileContentsWith: [ :filename | self httpClient getResource: filename ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '276' ],		#self : OmReference [ '277' ],		#time : DateAndTime [ '2023-12-03T10:36:08.367832+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismFetchCommand,				#isMetaSide : false			},			#name : #fetchLatestSubmission,			#protocol : #internal,			#sourceCode : 'fetchLatestSubmission\r\t| response |\r\t\r\tresponse := self retrieveLatestData.\r\t\r\tresponse\r\t\tat: \'error\'\r\t\tifPresent: [ :error | ExDomainError signal: (error at: \'message\'), (\' ({1})\' format: {self httpClient parameterString} ) ].\r\t\t\r\t^ExercismSubmission data: response',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '277' ],		#self : OmReference [ '278' ],		#time : DateAndTime [ '2023-12-03T10:36:08.367943+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismFetchCommand,				#isMetaSide : false			},			#name : #retrieveLatestData,			#protocol : #internal,			#sourceCode : 'retrieveLatestData\r\t^self subclassResponsibility ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '278' ],		#self : OmReference [ '279' ],		#time : DateAndTime [ '2023-12-03T10:36:08.368065+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismHttpCommand class',				#isMetaSide : true			},			#name : #'client:',			#protocol : #private,			#sourceCode : 'client: anHttpClient\r\t^self new\r\t\thttpClient: anHttpClient;\r\t\tyourself',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '279' ],		#self : OmReference [ '280' ],		#time : DateAndTime [ '2023-12-03T10:36:08.36819+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t"Execute the command, answers true if successful"\r\t\r\t^self subclassResponsibility ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '280' ],		#self : OmReference [ '281' ],		#time : DateAndTime [ '2023-12-03T10:36:08.368321+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpCommand,				#isMetaSide : false			},			#name : #'executeCheckingToken:',			#protocol : #execution,			#sourceCode : 'executeCheckingToken: aBlock\r\t"Evaluate aBlock, after verifying the api token"\r\r\t^ [ \r\t\tself httpClient verifyToken.\r\t\taBlock value \r\t]\r\t\ton: ExUnauthorized  \r\t\tdo: [ :error | \r\t\t\tself httpClient promptForToken\r\t\t\t\tifTrue: [ error retry ]\r\t\t\t\tifFalse: [ self inform: \'Operation Aborted!\'.\r\t\t\t\t\tnil ] ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '281' ],		#self : OmReference [ '282' ],		#time : DateAndTime [ '2023-12-03T10:36:08.368433+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpCommand,				#isMetaSide : false			},			#name : #httpClient,			#protocol : #accessing,			#sourceCode : 'httpClient\r\t"Anser the HttpRetriever used to marshal http requests"\r\t\r\t^ httpClient',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '282' ],		#self : OmReference [ '283' ],		#time : DateAndTime [ '2023-12-03T10:36:08.368545+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismHttpCommand,				#isMetaSide : false			},			#name : #'httpClient:',			#protocol : #accessing,			#sourceCode : 'httpClient: anHttpClient\r\t"Set the HttpRetriever used to marshal http requests"\r\t\r\thttpClient := anHttpClient',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '283' ],		#self : OmReference [ '284' ],		#time : DateAndTime [ '2023-12-03T10:36:08.368669+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismSubmitCommand class',				#isMetaSide : true			},			#name : #'exercise:',			#protocol : #command,			#sourceCode : 'exercise: anExercismExercise\r\t"Submit an exercism package"\r\r\t^ self from: ExercismHttpClient new exercise: anExercismExercise \r\t\t',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '284' ],		#self : OmReference [ '285' ],		#time : DateAndTime [ '2023-12-03T10:36:08.368789+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismSubmitCommand class',				#isMetaSide : true			},			#name : #'from:exercise:',			#protocol : #command,			#sourceCode : 'from: anHttpClient exercise: exercise\r\t"Submit an exercism package"\r\r\t"By default, don\'t submit TestCases with the solution"\r\texercise verifySolutionForSubmission.\r\t\t\r\t^(self client: anHttpClient)\r\t\texercise: exercise;\r\t\tyourself',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '285' ],		#self : OmReference [ '286' ],		#time : DateAndTime [ '2023-12-03T10:36:08.368917+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmitCommand,				#isMetaSide : false			},			#name : #execute,			#protocol : #execution,			#sourceCode : 'execute\r\t^ [ self\r\t\texecuteCheckingToken: [ self httpClient\r\t\t\t\tpatchSolution: self exercise solutionId\r\t\t\t\twith: self exercise solutionSources ] ]\r\t\ton: ExSolutionIdError\r\t\tdo: [ :error | \r\t\t\t| submission |\r\r\t\t\tsubmission := (ExercismDownloadCommand\r\t\t\t\ttrack: self exercise trackId\r\t\t\t\texercise: self exercise name) fetchLatestSubmission.\r\t\t\tsubmission storeSolutionId.\r\t\t\terror retry ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '286' ],		#self : OmReference [ '287' ],		#time : DateAndTime [ '2023-12-03T10:36:08.369037+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmitCommand,				#isMetaSide : false			},			#name : #exercise,			#protocol : #accessing,			#sourceCode : 'exercise\r\t^ exercise',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '287' ],		#self : OmReference [ '288' ],		#time : DateAndTime [ '2023-12-03T10:36:08.369144+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmitCommand,				#isMetaSide : false			},			#name : #'exercise:',			#protocol : #accessing,			#sourceCode : 'exercise: anExercismExercise\r\texercise := anExercismExercise',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '288' ],		#self : OmReference [ '289' ],		#time : DateAndTime [ '2023-12-03T10:36:08.369259+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismManager class',				#isMetaSide : true			},			#name : #default,			#protocol : #'instance creation',			#sourceCode : 'default\r\t"answer a defulat manager"\r\t\r\t^self new',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '289' ],		#self : OmReference [ '290' ],		#time : DateAndTime [ '2023-12-03T10:36:08.369491+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismManager class',				#isMetaSide : true			},			#name : #disableStudentCritics,			#protocol : #exercism,			#sourceCode : 'disableStudentCritics\r\r\tReUtilityMethodsRule enabled: false.\r\tReTestClassNotInPackageWithTestEndingNameRule enabled: false\r\t',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '290' ],		#self : OmReference [ '291' ],		#time : DateAndTime [ '2023-12-03T10:36:08.369611+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismManager class',				#isMetaSide : true			},			#name : #exercisePrefix,			#protocol : #config,			#sourceCode : 'exercisePrefix\r\t^ \'Exercise\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '291' ],		#self : OmReference [ '292' ],		#time : DateAndTime [ '2023-12-03T10:36:08.369743+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismManager class',				#isMetaSide : true			},			#name : #isUserMode,			#protocol : #exercism,			#sourceCode : 'isUserMode\r\t"Answer true if exercism is loaded in a clean image with no dev tools"\r\t\r\t^ ((IceRepository registry collect: [ :repo | repo name ])) asArray\r\t\t= #(\'iceberg\' \'pharo\' \'pharo-smalltalk\')\r\t\tand: [ (RPackageOrganizer default\r\t\t\t\tpackageNamed: \'ExercismDev\'\r\t\t\t\tifAbsent: [ nil ]) isNil ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '292' ],		#self : OmReference [ '293' ],		#time : DateAndTime [ '2023-12-03T10:36:08.369872+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismManager class',				#isMetaSide : true			},			#name : #legacyExercismPackage,			#protocol : #config,			#sourceCode : 'legacyExercismPackage\r\t"Answer the default exercism package, or nil if missing"\r\t| packageOrganiser |\r\t\r\tpackageOrganiser := RPackageOrganizer default.\r\t^ packageOrganiser\r\t\tpackageNamed: self legacyPackagePrefix \r\t\tifAbsent: [ nil ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '293' ],		#self : OmReference [ '294' ],		#time : DateAndTime [ '2023-12-03T10:36:08.369986+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismManager class',				#isMetaSide : true			},			#name : #legacyPackagePrefix,			#protocol : #config,			#sourceCode : 'legacyPackagePrefix\r\t^ \'Exercism\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '294' ],		#self : OmReference [ '295' ],		#time : DateAndTime [ '2023-12-03T10:36:08.370104+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismManager class',				#isMetaSide : true			},			#name : #solutionData,			#protocol : #cache,			#sourceCode : 'solutionData\r\t^ SolutionData ifNil: [ SolutionData := Dictionary new ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '295' ],		#self : OmReference [ '296' ],		#time : DateAndTime [ '2023-12-03T10:36:08.370218+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismManager class',				#isMetaSide : true			},			#name : #trackId,			#protocol : #config,			#sourceCode : 'trackId\r\t^\'pharo-smalltalk\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '296' ],		#self : OmReference [ '297' ],		#time : DateAndTime [ '2023-12-03T10:36:08.370337+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismManager class',				#isMetaSide : true			},			#name : #trackVersionString,			#protocol : #config,			#sourceCode : 'trackVersionString\r\r\t^ 2 asString',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '297' ],		#self : OmReference [ '298' ],		#time : DateAndTime [ '2023-12-03T10:36:08.370465+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismManager class',				#isMetaSide : true			},			#name : #upgrade,			#protocol : #exercism,			#sourceCode : 'upgrade\r\t"upgrade an environment (called from ugrade instructions)"\r\r\tself disableStudentCritics.\r\tWorld closeUnchangedWindows.',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '298' ],		#self : OmReference [ '299' ],		#time : DateAndTime [ '2023-12-03T10:36:08.370606+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismManager class',				#isMetaSide : true			},			#name : #welcome,			#protocol : #exercism,			#sourceCode : 'welcome\r\t"Setup the initial environment for a new user"\r\r\t| browser |\r\t\t\r\t"If in usermode, hide the repositories so solutions aren\'t easily visible with a git compare"\r\tself isUserMode\r\t\tifTrue: [ \r\t\t\tIceRepository reset.\r\t\t\tself disableStudentCritics ].\r\r\t"Select, package and then method so it scrolls nicely into view"\r\tbrowser := Smalltalk tools browser openOnPackage: WelcomeTest package.\r\tbrowser\r\t\t"selectPackage: Welcome package;"\r\t\tselectMethod: (WelcomeTest methodNamed: #testWelcome)',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '299' ],		#self : OmReference [ '300' ],		#time : DateAndTime [ '2023-12-03T10:36:08.370732+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismManager class',				#isMetaSide : true			},			#name : #'worldMenuCommandOn:',			#protocol : #'world menu',			#sourceCode : 'worldMenuCommandOn: aBuilder\r\t<worldMenu>\r\t(aBuilder item: #Exercism)\r\t\torder: 4.0;\r\t\ttarget: self;\r\t\thelp: \'Tools to support Exercism\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '300' ],		#self : OmReference [ '301' ],		#time : DateAndTime [ '2023-12-03T10:36:08.405291+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismManager,				#isMetaSide : false			},			#name : #'fetchFromExercismTo:',			#protocol : #exercism,			#sourceCode : 'fetchFromExercismTo: package\r\t"Prompt the user for an exercise to fetch, install it, and if successful, answer the loaded exercise"\r\r\t| exerciseName result |\r\r\texerciseName := (UIManager default\r\t\trequest: \'Enter a valid exercism exercise (e.g. hello-world):\')\r\t\tifNil: [ ^ nil ]\r\t\tifNotNil: [ :value | self parseTokenNamed: \'exercise\' from: value ].\r\r\tUIManager default inform: \'Loading: \' , exerciseName.\r\tresult := (ExercismDownloadCommand\r\t\ttrack: self class trackId\r\t\texercise: exerciseName) execute.\r\r\t^ result',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '301' ],		#self : OmReference [ '302' ],		#time : DateAndTime [ '2023-12-03T10:36:08.407862+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismManager,				#isMetaSide : false			},			#name : #'parseTokenNamed:from:',			#protocol : #helpers,			#sourceCode : 'parseTokenNamed: tokenName from: aString \r\t| parsedTokens exerciseOffset |\r\tparsedTokens := aString findTokens: \'= \'.\r\tparsedTokens size = 1 ifTrue: [ ^parsedTokens first ].\r\t\r\t(exerciseOffset := parsedTokens indexOf: \'--\',tokenName ) > 1 ifTrue: [ \r\t\t^parsedTokens at: exerciseOffset + 1 ].\r\t\r\t^nil',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '302' ],		#self : OmReference [ '303' ],		#time : DateAndTime [ '2023-12-03T10:36:08.40809+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismManager,				#isMetaSide : false			},			#name : #'shareExerciseDPaste:',			#protocol : #exercism,			#sourceCode : 'shareExerciseDPaste: exercise\r\t| source |\r\t\r\tsource := String\r\t\tstreamContents: [ :s | \r\t\t\ts nextPutAll: \'"This is a sample Pharo Exercism solution (see: https://exercism.io/my/tracks/pharo-smalltalk)\'; \r\t\t\tcr; \r\t\t\tnextPutAll: \'For the reference exercise, refer to: https://github.com/exercism/pharo-smalltalk/tree/master/exercises/\', exercise name, \'"\'; \r\t\t\tcr; cr.\r\t\t\t\r\t\t\t(exercise solutionClasses asSortedCollection: [ :a :b | a name <= b name ]) do: [ :class |\r\t\t\t\t\t(exercise exercisePackage extendsClass: class)\r\t\t\t\t\t\tifTrue: [ \r\t\t\t\t\t\t\tclass exPrintOutExtensionsFor: exercise exercisePackage on: s ] \r\t\t\t\t\t\tifFalse: [ \r\t\t\t\t\t\t\tclass exPrintOutOn: s ] ] ].\r\t^ ZnClient new\r\t\tsystemPolicy;\r\t\tbeOneShot;\r\t\turl: \'http://dpaste.com/api/v2/\';\r\t\taddPart: (ZnMimePart fieldName: \'title\' value: \'Pharo Exercism for: \', exercise name);\r\t\taddPart: (ZnMimePart fieldName: \'syntax\' value: \'smalltalk\');\r\t\taddPart: (ZnMimePart fieldName: \'expiry_days\' value: \'7\');\r\t\taddPart: (ZnMimePart fieldName: \'content\' value: source);\r\t\tpost',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '303' ],		#self : OmReference [ '304' ],		#time : DateAndTime [ '2023-12-03T10:36:08.408228+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismManager,				#isMetaSide : false			},			#name : #'shareExerciseStfx:',			#protocol : #exercism,			#sourceCode : 'shareExerciseStfx: package\r\t| source |\r\tpackage = self class legacyExercismPackage\r\t\tifTrue: [ self error: \'Select the sub-package with your solution!\' ].\r\t\t\r\tsource := String\r\t\tstreamContents: [ :s | \r\t\t\tpackage solutionSources\r\t\t\t\tkeysAndValuesDo: [ :filename :code | \r\t\t\t\t\ts << $" << filename << $".\r\t\t\t\t\ts cr; cr;\r\t\t\t\t\t\tnextPutAll: code;\r\t\t\t\t\t\tcr; cr ] ].\r\t\t\t\t\r\t^ ZnClient new\r\t\tsystemPolicy;\r\t\tbeOneShot;\r\t\turl: \'http://ws.stfx.eu\';\r\t\tcontents: source;\r\t\tpost',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '304' ],		#self : OmReference [ '305' ],		#time : DateAndTime [ '2023-12-03T10:36:08.40836+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismManager,				#isMetaSide : false			},			#name : #'submitToExercism:',			#protocol : #exercism,			#sourceCode : 'submitToExercism: packageOrTag\r\t\t\r\t(packageOrTag  = self class legacyExercismPackage) \r\t\tifTrue: [ self error: \'Select the sub-package with your solution!\' ].\r\t\t\t\t\r\t^(ExercismSubmitCommand exercise: packageOrTag) execute.\r\t',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '305' ],		#self : OmReference [ '306' ],		#time : DateAndTime [ '2023-12-03T10:36:08.408477+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismManager,				#isMetaSide : false			},			#name : #'viewOnExercism:',			#protocol : #exercism,			#sourceCode : 'viewOnExercism: packageOrTag\r\tWebBrowser openOn: \'https://exercism.org/tracks/pharo\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '306' ],		#self : OmReference [ '307' ],		#time : DateAndTime [ '2023-12-03T10:36:08.408614+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismSubmission class',				#isMetaSide : true			},			#name : #baseUrlKey,			#protocol : #accessing,			#sourceCode : 'baseUrlKey\r\t^ \'file_download_base_url\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '307' ],		#self : OmReference [ '308' ],		#time : DateAndTime [ '2023-12-03T10:36:08.40874+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismSubmission class',				#isMetaSide : true			},			#name : #'data:',			#protocol : #accessing,			#sourceCode : 'data: exercismDataDictionary\r\t^ self new\r\t\texercismData:\r\t\t\t(exercismDataDictionary\r\t\t\t\tat: \'solution\'\r\t\t\t\tifAbsent: [ exercismDataDictionary ]);\r\t\tyourself',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '308' ],		#self : OmReference [ '309' ],		#time : DateAndTime [ '2023-12-03T10:36:08.40886+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ExercismSubmission class',				#isMetaSide : true			},			#name : #'error:',			#protocol : #accessing,			#sourceCode : 'error: aString\r\t^self new \r\t\texercismData: { \'exercise\' ->> {\'id\' -> \'\' }} asDictionary;\r\t\terrorMessage: aString;\r\t\tyourself',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '309' ],		#self : OmReference [ '310' ],		#time : DateAndTime [ '2023-12-03T10:36:08.409072+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #baseUrl,			#protocol : #accessing,			#sourceCode : 'baseUrl \r\t^(self exercismData at: self class baseUrlKey) exPathString.',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '310' ],		#self : OmReference [ '311' ],		#time : DateAndTime [ '2023-12-03T10:36:08.409184+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #contentData,			#protocol : #accessing,			#sourceCode : 'contentData\r\t^ contentData',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '311' ],		#self : OmReference [ '312' ],		#time : DateAndTime [ '2023-12-03T10:36:08.409292+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #'contentData:',			#protocol : #accessing,			#sourceCode : 'contentData: anObject\r\tcontentData := anObject',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '312' ],		#self : OmReference [ '313' ],		#time : DateAndTime [ '2023-12-03T10:36:08.409401+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #'contentsFor:ifAbsent:',			#protocol : #accessing,			#sourceCode : 'contentsFor: aString ifAbsent: anObject \r\t^self contentData at: aString',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '313' ],		#self : OmReference [ '314' ],		#time : DateAndTime [ '2023-12-03T10:36:08.409518+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #createSnapshotFromDefinitions,			#protocol : #internal,			#sourceCode : 'createSnapshotFromDefinitions\r\r\t"return MC snapshot from definitions that can be loaded or submitted"\r\t^ MCSnapshot fromDefinitions: self definitionsToLoadFromDirectory\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '314' ],		#self : OmReference [ '315' ],		#time : DateAndTime [ '2023-12-03T10:36:08.40964+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #definitionsToLoadFromDirectory,			#protocol : #internal,			#sourceCode : 'definitionsToLoadFromDirectory\r\t\r\t"reader will return definitions to be loaded from directory containing package directory and .st files with classes"\r\t| tonelReader | \r\ttonelReader := TonelReader on: self latestExercisePackageSourceDir fileName: self exercisePackageName.\r\ttonelReader loadDefinitions.\r\t^ tonelReader definitions.\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '315' ],		#self : OmReference [ '316' ],		#time : DateAndTime [ '2023-12-03T10:36:08.40975+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #errorMessage,			#protocol : #accessing,			#sourceCode : 'errorMessage \r\r\t^self exercismData at: \'error\' ifAbsent: [ \'\' ]\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '316' ],		#self : OmReference [ '317' ],		#time : DateAndTime [ '2023-12-03T10:36:08.409858+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #'errorMessage:',			#protocol : #accessing,			#sourceCode : 'errorMessage: aString \r\r\tself exercismData at: \'error\' put: aString\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '317' ],		#self : OmReference [ '318' ],		#time : DateAndTime [ '2023-12-03T10:36:08.40997+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #exercise,			#protocol : #storing,			#sourceCode : 'exercise\r\t"Answer the ExercismExercise associated with this submission"\r\t\r\t^ExercismExercise find: self exerciseId ifAbsent: [nil]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '318' ],		#self : OmReference [ '319' ],		#time : DateAndTime [ '2023-12-03T10:36:08.410082+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #exerciseClassName,			#protocol : #accessing,			#sourceCode : 'exerciseClassName \r\t^self exerciseId kebabAsCamelCase ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '319' ],		#self : OmReference [ '320' ],		#time : DateAndTime [ '2023-12-03T10:36:08.41019+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #exerciseId,			#protocol : #accessing,			#sourceCode : 'exerciseId\r\t^(self exercismData at: \'exercise\') at: \'id\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '320' ],		#self : OmReference [ '321' ],		#time : DateAndTime [ '2023-12-03T10:36:08.4103+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #exercisePackageName,			#protocol : #internal,			#sourceCode : 'exercisePackageName\r\r\t^ ExercismManager exercisePrefix, \'@\', self exerciseClassName ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '321' ],		#self : OmReference [ '322' ],		#time : DateAndTime [ '2023-12-03T10:36:08.410408+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #exercismData,			#protocol : #accessing,			#sourceCode : 'exercismData\r\t^ exercismData',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '322' ],		#self : OmReference [ '323' ],		#time : DateAndTime [ '2023-12-03T10:36:08.410517+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #'exercismData:',			#protocol : #accessing,			#sourceCode : 'exercismData: anObject\r\texercismData := anObject',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '323' ],		#self : OmReference [ '324' ],		#time : DateAndTime [ '2023-12-03T10:36:08.410626+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #filenames,			#protocol : #accessing,			#sourceCode : 'filenames\r\t^self exercismData at: \'files\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '324' ],		#self : OmReference [ '325' ],		#time : DateAndTime [ '2023-12-03T10:36:08.410735+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #initialize,			#protocol : #accessing,			#sourceCode : 'initialize \r\r\tsuper initialize.\r\tself contentData: Dictionary new.',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '325' ],		#self : OmReference [ '326' ],		#time : DateAndTime [ '2023-12-03T10:36:08.410875+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #installDefinitionsFromSnapshot,			#protocol : #internal,			#sourceCode : 'installDefinitionsFromSnapshot\r\r\t"tonel reader will load definitions from directory containing package directory and .st files with classes, creates MC snapshot and install package with exercise to default package organizer"\r\t\r\tself createSnapshotFromDefinitions install',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '326' ],		#self : OmReference [ '327' ],		#time : DateAndTime [ '2023-12-03T10:36:08.410988+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #isValid,			#protocol : #storing,			#sourceCode : 'isValid\r\t"Answer true if the submission resulted in a valid exercise"\r\t\r\t^(self exercismData includesKey: \'error\') not and: [ self exercise notNil ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '327' ],		#self : OmReference [ '328' ],		#time : DateAndTime [ '2023-12-03T10:36:08.41113+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #latestExercisePackageSourceDir,			#protocol : #internal,			#sourceCode : 'latestExercisePackageSourceDir\r\r\t"return memory file reference with retreived latest exercise souuces - needed for tonel reader"\r\t|memFileRef packageDir|\r\tmemFileRef := FileSystem memory root.\r\tpackageDir := (memFileRef / self exercisePackageName) ensureCreateDirectory.\r\tself sourceFilenamesWithContentsDo: [:fileName :sourceString |\r\t\t"do write files here"\r\t\t|sourceFile|\r\t\tsourceFile := packageDir / fileName.\r\t\tsourceFile writeStreamDo: [:aStream | aStream nextPutAll: sourceString ]\r\t].\r\t^ memFileRef ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '328' ],		#self : OmReference [ '329' ],		#time : DateAndTime [ '2023-12-03T10:36:08.411249+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #'populateFileContentsWith:',			#protocol : #retrieving,			#sourceCode : 'populateFileContentsWith: aBlockClosure\r\tself sourceFilenames\r\t\tdo: [ :filename | \r\t\t\t| fileContent |\r\t\t\tfileContent := aBlockClosure value:\r\t\t\t\tself baseUrl , filename.\r\t\t\tfileContent\r\t\t\t\tifNotNil: [ self contentData at: filename put: fileContent ] ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '329' ],		#self : OmReference [ '330' ],		#time : DateAndTime [ '2023-12-03T10:36:08.411356+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #solutionId,			#protocol : #accessing,			#sourceCode : 'solutionId\r\t^self exercismData at: \'id\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '330' ],		#self : OmReference [ '331' ],		#time : DateAndTime [ '2023-12-03T10:36:08.411466+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #sourceFilenames,			#protocol : #accessing,			#sourceCode : 'sourceFilenames\r\t\r\t^self filenames select: [:filename | filename endsWith: \'.st\' ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '331' ],		#self : OmReference [ '332' ],		#time : DateAndTime [ '2023-12-03T10:36:08.411581+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #'sourceFilenamesWithContentsDo:',			#protocol : #retrieving,			#sourceCode : 'sourceFilenamesWithContentsDo: aBlockClosure\r\tself contentData\r\t\tkeysAndValuesDo:\r\t\t\t[ :filename :contents | aBlockClosure value: filename value: contents ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '332' ],		#self : OmReference [ '333' ],		#time : DateAndTime [ '2023-12-03T10:36:08.411693+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #storeSolutionId,			#protocol : #storing,			#sourceCode : 'storeSolutionId\r\tself exercise ifNotNil: [:exercise | exercise storeSolutionId: self solutionId]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '333' ],		#self : OmReference [ '334' ],		#time : DateAndTime [ '2023-12-03T10:36:08.411801+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ExercismSubmission,				#isMetaSide : false			},			#name : #user,			#protocol : #accessing,			#sourceCode : 'user\r\t^(self exercismData at: \'user\') at: \'handle\'',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '334' ],		#self : OmReference [ '335' ],		#time : DateAndTime [ '2023-12-03T10:36:08.412033+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WorldMorph,				#isMetaSide : false			},			#name : #'openModal:',			#protocol : #'*ExercismTools',			#sourceCode : 'openModal: aSystemWindow\r\r\t|modalMorph|\r\tmodalMorph := self submorphs detect: #isSystemWindow ifNone: [ self error: \'Could not find a system window to open a modal dialog.\' ].\r\r\t^ modalMorph openModal: aSystemWindow\r',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '335' ],		#self : OmReference [ '336' ],		#time : DateAndTime [ '2023-12-03T10:36:08.412447+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #'->>',			#protocol : #'*ExercismTools',			#sourceCode : '->> aCollectionOfAssociations\r\t"Similar to -> but converts aCollection to anOrderedDictionary, useful when building JSON structures"\r\r\t^self -> aCollectionOfAssociations asOrderedDictionary ',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '336' ],		#self : OmReference [ '337' ],		#time : DateAndTime [ '2023-12-03T10:36:08.412877+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #asKebabCase,			#protocol : #'*ExercismTools',			#sourceCode : 'asKebabCase\r\t"Answer a String that converts the CamelCase input to camel-case kebab output \r\tused by exercism"\r\r\t^ self class\r\t\tstreamContents: [ :kebabStream |\r\t\t\tself uncapitalized\r\t\t\t\tdo: [ :char |\r\t\t\t\t\tchar isUppercase\r\t\t\t\t\t\tifTrue: [ kebabStream nextPut: $- ].\r\t\t\t\t\tkebabStream nextPut: char asLowercase ] ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '337' ],		#self : OmReference [ '338' ],		#time : DateAndTime [ '2023-12-03T10:36:08.423113+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #asSentenceCase,			#protocol : #'*ExercismTools',			#sourceCode : 'asSentenceCase\r\t"Converts string of selector name to human readable sentence."\r\r\t^ self class\r\t\tstreamContents: [ :aStream |\r\t\t\tself do: [ :char |\r\t\t\t\t\tchar isUppercase\r\t\t\t\t\t\tifTrue: [ aStream nextPut: Character space ].\r\t\t\t\t\taStream nextPut: char asLowercase ] ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '338' ],		#self : OmReference [ '339' ],		#time : DateAndTime [ '2023-12-03T10:36:08.423592+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #'encodeDoublingDoubleQuotesOn:',			#protocol : #'*ExercismTools',			#sourceCode : 'encodeDoublingDoubleQuotesOn: s\r\t"Print inside string quotes, doubling inbedded quotes."\r\r\tself\r\t\tdo: [ :c | \r\t\t\tc = $"\r\t\t\t\tifTrue: [ s << $" ].\r\t\t\ts << c ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '339' ],		#self : OmReference [ '340' ],		#time : DateAndTime [ '2023-12-03T10:36:08.424018+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #exPathString,			#protocol : #'*ExercismTools',			#sourceCode : 'exPathString\r\t"Answer the receiver as a valid path, with a trailing /"\r\r\t^ String\r\t\tstreamContents: [ :s | \r\t\t\ts nextPutAll: self.\r\t\t\tself last = $/\r\t\t\t\tifFalse: [ s nextPut: $/ ] ]',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '340' ],		#self : OmReference [ '341' ],		#time : DateAndTime [ '2023-12-03T10:36:08.424439+11:00' ],		#trigger : OmReference [ '14' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #String,				#isMetaSide : false			},			#name : #kebabAsCamelCase,			#protocol : #'*ExercismTools',			#sourceCode : 'kebabAsCamelCase\r\t"Answer a String that converts the CamelCase input to camel-case kebab output \r\tused by exercism"\r\r\t^ (self copyReplaceAll: {$-} with: {Character space}) asCamelCase.',			#stamp : '',			#package : #ExercismTools		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-12-03T10:36:08.698927+11:00' ],		#prior : OmReference [ '341' ],		#self : OmReference [ '342' ]	},	#content : EpMonticelloVersionsLoad {		#versionNames : OrderedCollection [			'Exercise@Welcome-CompatibleUserName.1700215054'		]	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '342' ],		#self : OmReference [ '343' ],		#time : DateAndTime [ '2023-12-03T10:36:08.724404+11:00' ],		#trigger : @3	},	#content : EpCategoryAddition {		#classCategoryName : #'Exercise@Welcome',		#affectedPackageName : #'Exercise@Welcome'	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '343' ],		#self : OmReference [ '344' ],		#time : DateAndTime [ '2023-12-03T10:36:08.737291+11:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #WelcomeTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Welcome\'',				#superclassName : 'TestCase'			},			#name : #WelcomeTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WelcomeTest class\r\tinstanceVariableNames: \'\''				},				#name : #'WelcomeTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WelcomeTest,					#isMetaSide : false				},				#parent : @8,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Welcome',			#package : #'Exercise@Welcome',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '344' ],		#self : OmReference [ '345' ],		#time : DateAndTime [ '2023-12-03T10:36:08.738958+11:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'TestCase subclass: #WelcomeTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Welcome\'',				#superclassName : 'TestCase'			},			#name : #WelcomeTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'WelcomeTest class\r\tinstanceVariableNames: \'\''				},				#name : #'WelcomeTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @8			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #WelcomeTest,					#isMetaSide : false				},				#parent : @8,				#content : 'To start your Exercism journey, right click on the Exercise@Welcome package (or use the top level Exercism menu) and select \'Exercism | Fetch new exercise\', and then type: hello-world.\r\rNote: Each exercise will have some instructions in its test Comment tab, so be sure to read them when starting a new challenge.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Welcome',			#package : #'Exercise@Welcome',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'To start your Exercism journey, right click on the Exercise@Welcome package (or use the top level Exercism menu) and select \'Exercism | Fetch new exercise\', and then type: hello-world.\r\rNote: Each exercise will have some instructions in its test Comment tab, so be sure to read them when starting a new challenge.',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '345' ],		#self : OmReference [ '346' ],		#time : DateAndTime [ '2023-12-03T10:36:08.745751+11:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'WelcomeTest class',				#isMetaSide : true			},			#name : #followedBy,			#protocol : #config,			#sourceCode : 'followedBy \r\t^\'HelloWorld\'',			#stamp : '',			#package : #'Exercise@Welcome'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#prior : OmReference [ '346' ],		#self : OmReference [ '347' ],		#time : DateAndTime [ '2023-12-03T10:36:08.746338+11:00' ],		#trigger : OmReference [ '342' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #WelcomeTest,				#isMetaSide : false			},			#name : #testWelcome,			#protocol : #tests,			#sourceCode : 'testWelcome\r\t"This is a sample Pharo test fixture. \r\t\r\tTIP 1: Try running this test by clicking on the gray orb next to the method name above.\r\tTIP 2: Click to the class Comment tab for more information on getting started."\r\t\r\tself assert: #(\'Welcome\' \'to\' \'Pharo\') size equals: 3',			#stamp : '',			#package : #'Exercise@Welcome'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-12-03T10:38:47.201659+11:00' ],		#prior : OmReference [ '347' ],		#self : OmReference [ '348' ]	},	#content : EpCategoryAddition {		#classCategoryName : #'Exercise@HelloWorld',		#affectedPackageName : #'Exercise@HelloWorld'	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-12-03T10:38:47.203964+11:00' ],		#prior : OmReference [ '348' ],		#self : OmReference [ '349' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #HelloWorldTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@HelloWorld\'',				#superclassName : 'ExercismTest'			},			#name : #HelloWorldTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HelloWorldTest class\r\tinstanceVariableNames: \'\''				},				#name : #'HelloWorldTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HelloWorldTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@HelloWorld',			#package : #'Exercise@HelloWorld',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-12-03T10:38:47.205837+11:00' ],		#prior : OmReference [ '349' ],		#self : OmReference [ '350' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #HelloWorldTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@HelloWorld\'',				#superclassName : 'ExercismTest'			},			#name : #HelloWorldTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HelloWorldTest class\r\tinstanceVariableNames: \'\''				},				#name : #'HelloWorldTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HelloWorldTest,					#isMetaSide : false				},				#parent : @7,				#content : '# Hello World\r\rThe classical introductory exercise. Just say "Hello, World!".\r\r["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is\rthe traditional first program for beginning programming in a new language\ror environment.\r\rThe objectives are simple:\r\r- Write a function that returns the string "Hello, World!".\r- Run the test suite and make sure that it succeeds.\r- Submit your solution and check it at the website.\r\rIf everything goes well, you will be ready to fetch your first real exercise\r\r## Hint\r\rIf you are editting this file in a text editor and not in Pharo - \rplease review the [Getting Started](https://exercism.io/tracks/pharo/installation) section. \r\rWhile you can use a text editor, the Pharo IDE is partly what makes the language so special.\r\rIn Pharo you can run code (including tests) with broken methods and missing classes.  When the VM encounters broken code, it raises a debugger which lets you explore the problem a little better.  \r\rYou then have the option to press the Create button to add a missing class or method, as well as correct any code that causes an error. When you do so, the debugger will backup and let you resume execution with your new changes.\r\rTry doing this with your HelloWorld example, by simply running any one of the unit test methods.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@HelloWorld',			#package : #'Exercise@HelloWorld',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# Hello World\r\rThe classical introductory exercise. Just say "Hello, World!".\r\r["Hello, World!"](http://en.wikipedia.org/wiki/%22Hello,_world!%22_program) is\rthe traditional first program for beginning programming in a new language\ror environment.\r\rThe objectives are simple:\r\r- Write a function that returns the string "Hello, World!".\r- Run the test suite and make sure that it succeeds.\r- Submit your solution and check it at the website.\r\rIf everything goes well, you will be ready to fetch your first real exercise\r\r## Hint\r\rIf you are editting this file in a text editor and not in Pharo - \rplease review the [Getting Started](https://exercism.io/tracks/pharo/installation) section. \r\rWhile you can use a text editor, the Pharo IDE is partly what makes the language so special.\r\rIn Pharo you can run code (including tests) with broken methods and missing classes.  When the VM encounters broken code, it raises a debugger which lets you explore the problem a little better.  \r\rYou then have the option to press the Create button to add a missing class or method, as well as correct any code that causes an error. When you do so, the debugger will backup and let you resume execution with your new changes.\r\rTry doing this with your HelloWorld example, by simply running any one of the unit test methods.',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-12-03T10:38:47.208321+11:00' ],		#prior : OmReference [ '350' ],		#self : OmReference [ '351' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #HelloWorld\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@HelloWorld\'',				#superclassName : 'Object'			},			#name : #HelloWorld,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HelloWorld class\r\tinstanceVariableNames: \'\''				},				#name : #'HelloWorld class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HelloWorld,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@HelloWorld',			#package : #'Exercise@HelloWorld',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-12-03T10:38:47.260648+11:00' ],		#prior : OmReference [ '351' ],		#self : OmReference [ '352' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'HelloWorldTest class',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\t"Answer the configured exercise meta data for this exercise, an ExercismExercise.\r\tHelloWorld is a special case as it\'s the first exercise"\r\t\r\t^(ExercismExercise for: self) \r\t\tisCore: true;\r\t\tisAutoApproved: true;\r\t\tdifficulty: 1;\r\t\ttopics: #(\'introduction\' \'strings\');\r\t\tyourself',			#stamp : '',			#package : #'Exercise@HelloWorld'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-12-03T10:38:47.261447+11:00' ],		#prior : OmReference [ '352' ],		#self : OmReference [ '353' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'HelloWorldTest class',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\t"Answer a unique id for this exercise"\r\t^\'a1812b5e-2788-4ea6-b948-bfe54edeb0da\'',			#stamp : '',			#package : #'Exercise@HelloWorld'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-12-03T10:38:47.261929+11:00' ],		#prior : OmReference [ '353' ],		#self : OmReference [ '354' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'HelloWorldTest class',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\t"Answer the exercise version number string this test was derived from"\r\t\r\t^\'1.1.0\'  ',			#stamp : '',			#package : #'Exercise@HelloWorld'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-12-03T10:38:47.262254+11:00' ],		#prior : OmReference [ '354' ],		#self : OmReference [ '355' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HelloWorldTest,				#isMetaSide : false			},			#name : #testHello,			#protocol : #testing,			#sourceCode : 'testHello\r\tself assert: HelloWorld sayHello equals: \'Hello, World!\'',			#stamp : '',			#package : #'Exercise@HelloWorld'		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2023-12-03T10:38:47.262512+11:00' ],		#prior : OmReference [ '355' ],		#self : OmReference [ '356' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'HelloWorld class',				#isMetaSide : true			},			#name : #sayHello,			#protocol : #example,			#sourceCode : 'sayHello\r\t^ \'Goodbye, Mars!\'',			#stamp : '',			#package : #'Exercise@HelloWorld'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:50:16.000861+11:00' ],		#prior : OmReference [ '356' ],		#self : OmReference [ '357' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HelloWorld,				#isMetaSide : false			},			#name : #sayHello,			#protocol : #'as yet unclassified',			#sourceCode : 'sayHello\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'Hello world!\'.',			#stamp : 'AndyMarks 12/3/2023 10:50',			#package : #'Exercise@HelloWorld'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:50:16.025762+11:00' ],		#prior : OmReference [ '357' ],		#self : OmReference [ '358' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HelloWorld,				#isMetaSide : false			},			#name : #sayHello,			#protocol : #'as yet unclassified',			#sourceCode : 'sayHello\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'Hello world!\'.',			#stamp : 'AndyMarks 12/3/2023 10:50',			#package : #'Exercise@HelloWorld'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HelloWorld,				#isMetaSide : false			},			#name : #sayHello,			#protocol : #example,			#sourceCode : 'sayHello\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'Hello world!\'.',			#stamp : 'AndyMarks 12/3/2023 10:50',			#package : #'Exercise@HelloWorld'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:50:48.504524+11:00' ],		#prior : OmReference [ '358' ],		#self : OmReference [ '359' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HelloWorld,				#isMetaSide : false			},			#name : #sayHello,			#protocol : #example,			#sourceCode : 'sayHello\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'Hello world!\'.',			#stamp : 'AndyMarks 12/3/2023 10:50',			#package : #'Exercise@HelloWorld'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HelloWorld,				#isMetaSide : false			},			#name : #sayHello,			#protocol : #example,			#sourceCode : 'sayHello\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'Hello, World!\'.',			#stamp : 'AndyMarks 12/3/2023 10:50',			#package : #'Exercise@HelloWorld'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:53:11.26573+11:00' ],		#prior : OmReference [ '359' ],		#self : OmReference [ '360' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HelloWorld,				#isMetaSide : false			},			#name : #sayHello,			#protocol : #example,			#sourceCode : 'sayHello\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'Hello, World!\'.',			#stamp : 'AndyMarks 12/3/2023 10:50',			#package : #'Exercise@HelloWorld'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HelloWorld,				#isMetaSide : false			},			#name : #sayHello,			#protocol : #'as yet unclassified',			#sourceCode : 'sayHello\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'Hello, World!\'.',			#stamp : 'AndyMarks 12/3/2023 10:50',			#package : #'Exercise@HelloWorld'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:53:11.318236+11:00' ],		#prior : OmReference [ '360' ],		#self : OmReference [ '361' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #HelloWorld,				#isMetaSide : false			},			#name : #sayHello,			#protocol : #example,			#sourceCode : 'sayHello\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'Hello, World!\'.',			#stamp : 'AndyMarks 12/3/2023 10:50',			#package : #'Exercise@HelloWorld'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:53:11.320022+11:00' ],		#prior : OmReference [ '361' ],		#self : OmReference [ '362' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #HelloWorld\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@HelloWorld\'',				#superclassName : 'Object'			},			#name : #HelloWorld,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'HelloWorld class\r\tinstanceVariableNames: \'\''				},				#name : #'HelloWorld class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #HelloWorld,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@HelloWorld',			#package : #'Exercise@HelloWorld',			#sharedPools : OrderedCollection [ ]		},		#protocol : #example	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:53:29.406996+11:00' ],		#prior : OmReference [ '362' ],		#self : OmReference [ '363' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'HelloWorld class',				#isMetaSide : true			},			#name : #sayHello,			#protocol : #example,			#sourceCode : 'sayHello\r\t^ \'Goodbye, Mars!\'',			#stamp : '',			#package : #'Exercise@HelloWorld'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'HelloWorld class',				#isMetaSide : true			},			#name : #sayHello,			#protocol : #example,			#sourceCode : 'sayHello\r\t^ \'Hello, World!\'',			#stamp : 'AndyMarks 12/3/2023 10:53',			#package : #'Exercise@HelloWorld'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:58:21.29415+11:00' ],		#prior : OmReference [ '363' ],		#self : OmReference [ '364' ]	},	#content : EpCategoryAddition {		#classCategoryName : #'Exercise@TwoFer',		#affectedPackageName : #'Exercise@TwoFer'	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:58:21.296026+11:00' ],		#prior : OmReference [ '364' ],		#self : OmReference [ '365' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #TwoFerTest\r\tinstanceVariableNames: \'twoFer\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@TwoFer\'',				#superclassName : 'ExercismTest'			},			#name : #TwoFerTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TwoFerTest,						#isMetaSide : false					},					#name : #twoFer,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TwoFerTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TwoFerTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TwoFerTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@TwoFer',			#package : #'Exercise@TwoFer',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:58:21.299352+11:00' ],		#prior : OmReference [ '365' ],		#self : OmReference [ '366' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #TwoFerTest\r\tinstanceVariableNames: \'twoFer\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@TwoFer\'',				#superclassName : 'ExercismTest'			},			#name : #TwoFerTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #TwoFerTest,						#isMetaSide : false					},					#name : #twoFer,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TwoFerTest class\r\tinstanceVariableNames: \'\''				},				#name : #'TwoFerTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TwoFerTest,					#isMetaSide : false				},				#parent : @7,				#content : '# Two Fer\r\r`Two-fer` or `2-fer` is short for two for one. One for you and one for me.\r\rGiven a name, return a string with the message:\r\r```text\rOne for X, one for me.\r```\r\rWhere X is the given name.\r\rHowever, if the name is missing, return the string:\r\r```text\rOne for you, one for me.\r```\r\rHere are some examples:\r\r|Name    | String to return \r|:------:|:-----------------: \r|Alice   | One for Alice, one for me. \r|Bob     | One for Bob, one for me.\r|        | One for you, one for me.\r|Zaphod  | One for Zaphod, one for me.\r\r## Hint\r\rIn Pharo, classes are objects that can have instance and class methods, however unlike HelloWorld the tests for TwoFer have been written to call instance methods. Typically class methods are used for constructing new objects (like a contructor in other languages).\r\rWhile referring to methods, its useful to know that a method which has no parameters, is called a unary method, and a method taking multiple parameters, each deliniated by a word ending with a \':\', is called a keyword method.\r\rThere is also a third type of method, binary, which takes only 1 parameter and uses a symbol(s) for a name (typically a mathematical one like: +, -, & etc).',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@TwoFer',			#package : #'Exercise@TwoFer',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# Two Fer\r\r`Two-fer` or `2-fer` is short for two for one. One for you and one for me.\r\rGiven a name, return a string with the message:\r\r```text\rOne for X, one for me.\r```\r\rWhere X is the given name.\r\rHowever, if the name is missing, return the string:\r\r```text\rOne for you, one for me.\r```\r\rHere are some examples:\r\r|Name    | String to return \r|:------:|:-----------------: \r|Alice   | One for Alice, one for me. \r|Bob     | One for Bob, one for me.\r|        | One for you, one for me.\r|Zaphod  | One for Zaphod, one for me.\r\r## Hint\r\rIn Pharo, classes are objects that can have instance and class methods, however unlike HelloWorld the tests for TwoFer have been written to call instance methods. Typically class methods are used for constructing new objects (like a contructor in other languages).\r\rWhile referring to methods, its useful to know that a method which has no parameters, is called a unary method, and a method taking multiple parameters, each deliniated by a word ending with a \':\', is called a keyword method.\r\rThere is also a third type of method, binary, which takes only 1 parameter and uses a symbol(s) for a name (typically a mathematical one like: +, -, & etc).',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:58:21.355754+11:00' ],		#prior : OmReference [ '366' ],		#self : OmReference [ '367' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TwoFerTest class',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\t"Answer the configured exercise meta data for this exercise, an ExercismExercise"\r\t\r\t^(self createExerciseAfter: HelloWorldTest)\r\t\tisCore: true;\r\t\tdifficulty: 1;\r\t\ttopics: #(\'strings\' \'text-formatting\' \'refactoring\');\r\t\tyourself\r\t',			#stamp : '',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:58:21.35646+11:00' ],		#prior : OmReference [ '367' ],		#self : OmReference [ '368' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TwoFerTest class',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\t"Answer a unique id for this exercise"\r\t^\'9806fcc0-8505-4012-bd64-3f7468014df5\'',			#stamp : '',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:58:21.357014+11:00' ],		#prior : OmReference [ '368' ],		#self : OmReference [ '369' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'TwoFerTest class',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\t"Answer the exercise version number string this test was derived from"\r\t\r\t^\'1.2.0\'',			#stamp : '',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:58:21.357419+11:00' ],		#prior : OmReference [ '369' ],		#self : OmReference [ '370' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFerTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\ttwoFer := TwoFer new.',			#stamp : '',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:58:21.357742+11:00' ],		#prior : OmReference [ '370' ],		#self : OmReference [ '371' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFerTest,				#isMetaSide : false			},			#name : #testANameGiven,			#protocol : #tests,			#sourceCode : 'testANameGiven\r\tself assert: (twoFer who: \'Alice\') equals: \'One for Alice, one for me.\'',			#stamp : '',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:58:21.358002+11:00' ],		#prior : OmReference [ '371' ],		#self : OmReference [ '372' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFerTest,				#isMetaSide : false			},			#name : #testAnotherNameGiven,			#protocol : #tests,			#sourceCode : 'testAnotherNameGiven\r\tself assert: (twoFer who: \'Bob\') equals: \'One for Bob, one for me.\' ',			#stamp : '',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:58:21.358213+11:00' ],		#prior : OmReference [ '372' ],		#self : OmReference [ '373' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFerTest,				#isMetaSide : false			},			#name : #testNoNameGiven,			#protocol : #tests,			#sourceCode : 'testNoNameGiven\r\tself assert: twoFer who equals: \'One for you, one for me.\' \r\t',			#stamp : '',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T10:59:26.232938+11:00' ],		#prior : OmReference [ '373' ],		#self : OmReference [ '374' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #TwoFer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@TwoFer\'',				#superclassName : 'Object'			},			#name : #TwoFer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'TwoFer class\r\tinstanceVariableNames: \'\''				},				#name : #'TwoFer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #TwoFer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@TwoFer',			#package : #'Exercise@TwoFer',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:01:52.158245+11:00' ],		#prior : OmReference [ '374' ],		#self : OmReference [ '375' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #who,			#protocol : #'as yet unclassified',			#sourceCode : 'who\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'One for you, one for me.\'.',			#stamp : 'AndyMarks 12/3/2023 11:01',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:02:29.396152+11:00' ],		#prior : OmReference [ '375' ],		#self : OmReference [ '376' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #who,			#protocol : #'as yet unclassified',			#sourceCode : 'who\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'One for you, one for me.\'.',			#stamp : 'AndyMarks 12/3/2023 11:01',			#package : #'Exercise@TwoFer'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #who,			#protocol : #accessing,			#sourceCode : 'who\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'One for you, one for me.\'.',			#stamp : 'AndyMarks 12/3/2023 11:01',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:02:45.017961+11:00' ],		#prior : OmReference [ '376' ],		#self : OmReference [ '377' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #who,			#protocol : #accessing,			#sourceCode : 'who\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'One for you, one for me.\'.',			#stamp : 'AndyMarks 12/3/2023 11:01',			#package : #'Exercise@TwoFer'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #who,			#protocol : #accessing,			#sourceCode : 'who\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^self who: \'\'.',			#stamp : 'AndyMarks 12/3/2023 11:02',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:03:07.655169+11:00' ],		#prior : OmReference [ '377' ],		#self : OmReference [ '378' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #who,			#protocol : #accessing,			#sourceCode : 'who\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^self who: \'\'.',			#stamp : 'AndyMarks 12/3/2023 11:02',			#package : #'Exercise@TwoFer'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #who,			#protocol : #accessing,			#sourceCode : 'who\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'One for you, one for me.\'.',			#stamp : 'AndyMarks 12/3/2023 11:03',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:04:30.185464+11:00' ],		#prior : OmReference [ '378' ],		#self : OmReference [ '379' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #'who:',			#protocol : #accessing,			#sourceCode : 'who:\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tname.\r   ^\'One for Alice, one for me.\'.',			#stamp : 'AndyMarks 12/3/2023 11:04',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:05:04.010141+11:00' ],		#prior : OmReference [ '379' ],		#self : OmReference [ '380' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #'who:',			#protocol : #accessing,			#sourceCode : 'who:\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tname.\r   ^\'One for Alice, one for me.\'.',			#stamp : 'AndyMarks 12/3/2023 11:04',			#package : #'Exercise@TwoFer'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #'who:',			#protocol : #accessing,			#sourceCode : 'who:\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tname.\r   ^\'One for \', name, \', one for me.\'.',			#stamp : 'AndyMarks 12/3/2023 11:05',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:05:30.417309+11:00' ],		#prior : OmReference [ '380' ],		#self : OmReference [ '381' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #who,			#protocol : #accessing,			#sourceCode : 'who\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^\'One for you, one for me.\'.',			#stamp : 'AndyMarks 12/3/2023 11:03',			#package : #'Exercise@TwoFer'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #who,			#protocol : #accessing,			#sourceCode : 'who\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^self who: \'me\'.',			#stamp : 'AndyMarks 12/3/2023 11:05',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:05:46.522834+11:00' ],		#prior : OmReference [ '381' ],		#self : OmReference [ '382' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #who,			#protocol : #accessing,			#sourceCode : 'who\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^self who: \'me\'.',			#stamp : 'AndyMarks 12/3/2023 11:05',			#package : #'Exercise@TwoFer'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #who,			#protocol : #accessing,			#sourceCode : 'who\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^self who: \'you\'.',			#stamp : 'AndyMarks 12/3/2023 11:05',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:10:56.04537+11:00' ],		#prior : OmReference [ '382' ],		#self : OmReference [ '383' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #who,			#protocol : #accessing,			#sourceCode : 'who\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^self who: \'you\'.',			#stamp : 'AndyMarks 12/3/2023 11:05',			#package : #'Exercise@TwoFer'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #who,			#protocol : #accessing,			#sourceCode : 'who\r\t"default argument implementation of #who:"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^self who: \'you\'.',			#stamp : 'AndyMarks 12/3/2023 11:10',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:13:37.185825+11:00' ],		#prior : OmReference [ '383' ],		#self : OmReference [ '384' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #'who:',			#protocol : #accessing,			#sourceCode : 'who:\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tname.\r   ^\'One for \', name, \', one for me.\'.',			#stamp : 'AndyMarks 12/3/2023 11:05',			#package : #'Exercise@TwoFer'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #'who:',			#protocol : #accessing,			#sourceCode : 'who:\r\t"returns a "\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tname.\r\t\r   ^\'One for \', name, \', one for me.\'.',			#stamp : 'AndyMarks 12/3/2023 11:13',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:14:57.353282+11:00' ],		#prior : OmReference [ '384' ],		#self : OmReference [ '385' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #'who:',			#protocol : #accessing,			#sourceCode : 'who:\r\t"returns a "\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tname.\r\t\r   ^\'One for \', name, \', one for me.\'.',			#stamp : 'AndyMarks 12/3/2023 11:13',			#package : #'Exercise@TwoFer'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #TwoFer,				#isMetaSide : false			},			#name : #'who:',			#protocol : #accessing,			#sourceCode : 'who: aName\r\t"returns a "\r\t"scope: class-variables  &  instance-variables"\t\r\t\r   ^\'One for \', aName, \', one for me.\'.',			#stamp : 'AndyMarks 12/3/2023 11:14',			#package : #'Exercise@TwoFer'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.117618+11:00' ],		#prior : OmReference [ '385' ],		#self : OmReference [ '386' ]	},	#content : EpCategoryAddition {		#classCategoryName : #'Exercise@Leap',		#affectedPackageName : #'Exercise@Leap'	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.119649+11:00' ],		#prior : OmReference [ '386' ],		#self : OmReference [ '387' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #LeapTest\r\tinstanceVariableNames: \'leapCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Leap\'',				#superclassName : 'ExercismTest'			},			#name : #LeapTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LeapTest,						#isMetaSide : false					},					#name : #leapCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LeapTest class\r\tinstanceVariableNames: \'\''				},				#name : #'LeapTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LeapTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Leap',			#package : #'Exercise@Leap',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.121445+11:00' ],		#prior : OmReference [ '387' ],		#self : OmReference [ '388' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #LeapTest\r\tinstanceVariableNames: \'leapCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Leap\'',				#superclassName : 'ExercismTest'			},			#name : #LeapTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #LeapTest,						#isMetaSide : false					},					#name : #leapCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'LeapTest class\r\tinstanceVariableNames: \'\''				},				#name : #'LeapTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #LeapTest,					#isMetaSide : false				},				#parent : @7,				#content : '# Leap\r\rGiven a year, report if it is a leap year.\r\rThe tricky thing here is that a leap year in the Gregorian calendar occurs:\r\r```text\ron every year that is evenly divisible by 4\r  except every year that is evenly divisible by 100\r    unless the year is also evenly divisible by 400\r```\r\rFor example, 1997 is not a leap year, but 1996 is.  1900 is not a leap\ryear, but 2000 is.\r\r## Notes\r\rThough our exercise adopts some very simple rules, there is more to\rlearn!\r\rFor a delightful, four minute explanation of the whole leap year\rphenomenon, go watch [this youtube video][video].\r\r[video]: http://www.youtube.com/watch?v=xX96xng7sAE\r\r## Hint\r\rThe tests for this exercise (and future exercises), are prefix numbered like \'test00_\'. \rThis is not a normal convention in Pharo, however to ease the study of the language it is \ruseful to present tests in a deterministic order.\r\rFor this exercise, study the \'arithmetic\' method category for class Number, as well as how boolean operators are also defined as messages. Notice how "and:" and "or:" are implented in the classes True and False. You can use the context menu item "senders of..." to view how other parts of Pharo use these operators.\r\rYou may also find something useful trying... `World > Tools > Finder > Examples > 20 . 4 . true`\r<br> which is asking Pharo which operations between the first and second elements result in the third.\r<br> [View demo][demo]\r\r[demo]: https://github.com/exercism/pharo-smalltalk/raw/master/docs/images/Hint-Finder-Leap.gif',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Leap',			#package : #'Exercise@Leap',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# Leap\r\rGiven a year, report if it is a leap year.\r\rThe tricky thing here is that a leap year in the Gregorian calendar occurs:\r\r```text\ron every year that is evenly divisible by 4\r  except every year that is evenly divisible by 100\r    unless the year is also evenly divisible by 400\r```\r\rFor example, 1997 is not a leap year, but 1996 is.  1900 is not a leap\ryear, but 2000 is.\r\r## Notes\r\rThough our exercise adopts some very simple rules, there is more to\rlearn!\r\rFor a delightful, four minute explanation of the whole leap year\rphenomenon, go watch [this youtube video][video].\r\r[video]: http://www.youtube.com/watch?v=xX96xng7sAE\r\r## Hint\r\rThe tests for this exercise (and future exercises), are prefix numbered like \'test00_\'. \rThis is not a normal convention in Pharo, however to ease the study of the language it is \ruseful to present tests in a deterministic order.\r\rFor this exercise, study the \'arithmetic\' method category for class Number, as well as how boolean operators are also defined as messages. Notice how "and:" and "or:" are implented in the classes True and False. You can use the context menu item "senders of..." to view how other parts of Pharo use these operators.\r\rYou may also find something useful trying... `World > Tools > Finder > Examples > 20 . 4 . true`\r<br> which is asking Pharo which operations between the first and second elements result in the third.\r<br> [View demo][demo]\r\r[demo]: https://github.com/exercism/pharo-smalltalk/raw/master/docs/images/Hint-Finder-Leap.gif',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.175033+11:00' ],		#prior : OmReference [ '388' ],		#self : OmReference [ '389' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LeapTest class',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\t"Answer the configured exercise meta data for this exercise, an ExercismExercise"\r\t\r\t^(self createExerciseAfter: TwoFerTest)\r\t\tisCore: true;\r\t\tdifficulty: 1;\r\t\ttopics: #(\'math\' \'conditionals\' \'logic\');\r\t\tyourself\r\t\r\t\t\t\t',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.175769+11:00' ],		#prior : OmReference [ '389' ],		#self : OmReference [ '390' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LeapTest class',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\t"Answer a unique id for this exercise"\r\t^\'82b07f5c-119c-4250-8c07-a0a7e1a95458\'',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.176257+11:00' ],		#prior : OmReference [ '390' ],		#self : OmReference [ '391' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'LeapTest class',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\t"Generated from specification: 25 February 2019"\r\t^\'1.5.1\'',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.176639+11:00' ],		#prior : OmReference [ '391' ],		#self : OmReference [ '392' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\tleapCalculator := Leap new',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.176918+11:00' ],		#prior : OmReference [ '392' ],		#self : OmReference [ '393' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #test01_YearNotDivisibleBy4CommonYear,			#protocol : #tests,			#sourceCode : 'test01_YearNotDivisibleBy4CommonYear\r\t| result |\r\r\tresult := leapCalculator leapYear: 2015 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.177167+11:00' ],		#prior : OmReference [ '393' ],		#self : OmReference [ '394' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #test02_YearDivisibleBy2NotDivisibleBy4CommonYear,			#protocol : #tests,			#sourceCode : 'test02_YearDivisibleBy2NotDivisibleBy4CommonYear\r\t| result |\r\r\tresult := leapCalculator leapYear: 1970 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.177371+11:00' ],		#prior : OmReference [ '394' ],		#self : OmReference [ '395' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #test03_YearDivisibleBy4NotDivisibleBy100LeapYear,			#protocol : #tests,			#sourceCode : 'test03_YearDivisibleBy4NotDivisibleBy100LeapYear\r\t| result |\r\r\tresult := leapCalculator leapYear: 1996 .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.177588+11:00' ],		#prior : OmReference [ '395' ],		#self : OmReference [ '396' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #test04_YearDivisibleBy100NotDivisibleBy400CommonYear,			#protocol : #tests,			#sourceCode : 'test04_YearDivisibleBy100NotDivisibleBy400CommonYear\r\t| result |\r\r\tresult := leapCalculator leapYear: 2100 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.177766+11:00' ],		#prior : OmReference [ '396' ],		#self : OmReference [ '397' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #test05_YearDivisibleBy400LeapYear,			#protocol : #tests,			#sourceCode : 'test05_YearDivisibleBy400LeapYear\r\t| result |\r\r\tresult := leapCalculator leapYear: 2000 .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.177934+11:00' ],		#prior : OmReference [ '397' ],		#self : OmReference [ '398' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #test06_YearDivisibleBy200NotDivisibleBy400CommonYear,			#protocol : #tests,			#sourceCode : 'test06_YearDivisibleBy200NotDivisibleBy400CommonYear\r\t| result |\r\r\tresult := leapCalculator leapYear: 1800 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:16:50.178112+11:00' ],		#prior : OmReference [ '398' ],		#self : OmReference [ '399' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #LeapTest,				#isMetaSide : false			},			#name : #testMisuseOfSelector,			#protocol : #extra,			#sourceCode : 'testMisuseOfSelector\r\tself verifySolution: leapCalculator class avoidsSelector: #isLeapYear',			#stamp : '',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:17:22.403314+11:00' ],		#prior : OmReference [ '399' ],		#self : OmReference [ '400' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Leap\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Leap\'',				#superclassName : 'Object'			},			#name : #Leap,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Leap class\r\tinstanceVariableNames: \'\''				},				#name : #'Leap class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Leap,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Leap',			#package : #'Exercise@Leap',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:18:31.737184+11:00' ],		#prior : OmReference [ '400' ],		#self : OmReference [ '401' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #'as yet unclassified',			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^false.',			#stamp : 'AndyMarks 12/3/2023 11:18',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:18:45.625419+11:00' ],		#prior : OmReference [ '401' ],		#self : OmReference [ '402' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #'as yet unclassified',			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^false.',			#stamp : 'AndyMarks 12/3/2023 11:18',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^false.',			#stamp : 'AndyMarks 12/3/2023 11:18',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:25:25.23604+11:00' ],		#prior : OmReference [ '402' ],		#self : OmReference [ '403' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^false.',			#stamp : 'AndyMarks 12/3/2023 11:18',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\t^false.',			#stamp : 'AndyMarks 12/3/2023 11:25',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:25:56.077879+11:00' ],		#prior : OmReference [ '403' ],		#self : OmReference [ '404' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\t^false.',			#stamp : 'AndyMarks 12/3/2023 11:25',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear / 4 == 0.\r\t^false.',			#stamp : 'AndyMarks 12/3/2023 11:25',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:26:19.263555+11:00' ],		#prior : OmReference [ '404' ],		#self : OmReference [ '405' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear / 4 == 0.\r\t^false.',			#stamp : 'AndyMarks 12/3/2023 11:25',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear / 4 == 0.\r\tdivisibleby100 := aYear / 100 == 0.\r\tdivisibleBy400 := aYear / 400 == 0.\r\t\r\t^false.',			#stamp : 'AndyMarks 12/3/2023 11:26',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T11:27:11.850788+11:00' ],		#prior : OmReference [ '405' ],		#self : OmReference [ '406' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear / 4 == 0.\r\tdivisibleby100 := aYear / 100 == 0.\r\tdivisibleBy400 := aYear / 400 == 0.\r\t\r\t^false.',			#stamp : 'AndyMarks 12/3/2023 11:26',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear / 4 == 0.\r\tdivisibleby100 := aYear / 100 == 0.\r\tdivisibleBy400 := aYear / 400 == 0.\r\t\r\t^divisibleBy4.',			#stamp : 'AndyMarks 12/3/2023 11:27',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:11:23.215068+11:00' ],		#prior : OmReference [ '406' ],		#self : OmReference [ '407' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear / 4 == 0.\r\tdivisibleby100 := aYear / 100 == 0.\r\tdivisibleBy400 := aYear / 400 == 0.\r\t\r\t^divisibleBy4.',			#stamp : 'AndyMarks 12/3/2023 11:27',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear / 4 == 0.\r\tdivisibleby100 := aYear / 100 == 0.\r\tdivisibleBy400 := aYear / 400 == 0.\r\t\r\t^divisibleBy400\r\tifTrue: true\r\tifFalse:\r\t\tdivisibleby100 \r\t\tifTrue: true\r\t\tifFalse: divisibleBy4 ',			#stamp : 'AndyMarks 12/3/2023 13:11',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:12:42.02798+11:00' ],		#prior : OmReference [ '407' ],		#self : OmReference [ '408' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear / 4 == 0.\r\tdivisibleby100 := aYear / 100 == 0.\r\tdivisibleBy400 := aYear / 400 == 0.\r\t\r\t^divisibleBy400\r\tifTrue: true\r\tifFalse:\r\t\tdivisibleby100 \r\t\tifTrue: true\r\t\tifFalse: divisibleBy4 ',			#stamp : 'AndyMarks 12/3/2023 13:11',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear / 4 == 0.\r\tdivisibleby100 := aYear / 100 == 0.\r\tdivisibleBy400 := aYear / 400 == 0.\r\t\r\t^divisibleBy400\r\tifTrue: true\r\tifFalse: [ \r\t\tdivisibleby100 \r\t\tifTrue: true\r\t\tifFalse: divisibleBy4  ]',			#stamp : 'AndyMarks 12/3/2023 13:12',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:16:12.660233+11:00' ],		#prior : OmReference [ '408' ],		#self : OmReference [ '409' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear / 4 == 0.\r\tdivisibleby100 := aYear / 100 == 0.\r\tdivisibleBy400 := aYear / 400 == 0.\r\t\r\t^divisibleBy400\r\tifTrue: true\r\tifFalse: [ \r\t\tdivisibleby100 \r\t\tifTrue: true\r\t\tifFalse: divisibleBy4  ]',			#stamp : 'AndyMarks 12/3/2023 13:12',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear / 4 == 0.\r\tdivisibleby100 := aYear / 100 == 0.\r\tdivisibleBy400 := aYear / 400 == 0.\r\t\r\t^divisibleBy400\r\t\tifTrue: true\r\t\tifFalse: [ \r\t\t\tdivisibleby100 \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleBy4  ]',			#stamp : 'AndyMarks 12/3/2023 13:16',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:20:33.07749+11:00' ],		#prior : OmReference [ '409' ],		#self : OmReference [ '410' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear / 4 == 0.\r\tdivisibleby100 := aYear / 100 == 0.\r\tdivisibleBy400 := aYear / 400 == 0.\r\t\r\t^divisibleBy400\r\t\tifTrue: true\r\t\tifFalse: [ \r\t\t\tdivisibleby100 \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleBy4  ]',			#stamp : 'AndyMarks 12/3/2023 13:16',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear // 4 == 0.\r\tdivisibleby100 := aYear // 100 == 0.\r\tdivisibleBy400 := aYear // 400 == 0.\r\t\r\t^divisibleBy400\r\t\tifTrue: true\r\t\tifFalse: [ \r\t\t\tdivisibleby100 \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleBy4  ]',			#stamp : 'AndyMarks 12/3/2023 13:20',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:24:16.646606+11:00' ],		#prior : OmReference [ '410' ],		#self : OmReference [ '411' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear // 4 == 0.\r\tdivisibleby100 := aYear // 100 == 0.\r\tdivisibleBy400 := aYear // 400 == 0.\r\t\r\t^divisibleBy400\r\t\tifTrue: true\r\t\tifFalse: [ \r\t\t\tdivisibleby100 \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleBy4  ]',			#stamp : 'AndyMarks 12/3/2023 13:20',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear rem: 4 == 0.\r\tdivisibleby100 := aYear rem: 100 == 0.\r\tdivisibleBy400 := aYear rem: 400 == 0.\r\t\r\t^divisibleBy400\r\t\tifTrue: true\r\t\tifFalse: [ \r\t\t\tdivisibleby100 \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleBy4  ]',			#stamp : 'AndyMarks 12/3/2023 13:24',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:26:28.397181+11:00' ],		#prior : OmReference [ '411' ],		#self : OmReference [ '412' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := aYear rem: 4 == 0.\r\tdivisibleby100 := aYear rem: 100 == 0.\r\tdivisibleBy400 := aYear rem: 400 == 0.\r\t\r\t^divisibleBy400\r\t\tifTrue: true\r\t\tifFalse: [ \r\t\t\tdivisibleby100 \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleBy4  ]',			#stamp : 'AndyMarks 12/3/2023 13:24',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\t\r\t^divisibleBy400\r\t\tifTrue: true\r\t\tifFalse: [ \r\t\t\tdivisibleby100 \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleBy4  ]',			#stamp : 'AndyMarks 12/3/2023 13:26',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:33:25.589126+11:00' ],		#prior : OmReference [ '412' ],		#self : OmReference [ '413' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\t\r\t^divisibleBy400\r\t\tifTrue: true\r\t\tifFalse: [ \r\t\t\tdivisibleby100 \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleBy4  ]',			#stamp : 'AndyMarks 12/3/2023 13:26',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [ \r\t\t\tdivisibleby100 and: divisibleBy400 \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: false\r\t\t\t ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:33',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:34:29.272113+11:00' ],		#prior : OmReference [ '413' ],		#self : OmReference [ '414' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\t\r\t^divisibleBy400\r\t\tifTrue: true\r\t\tifFalse: [ \r\t\t\tdivisibleby100 \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleBy4  ]',			#stamp : 'AndyMarks 12/3/2023 13:26',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [ \r\t\t\tdivisibleBy400\r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleby100 \r\t\t\t ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:34',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:36:49.224387+11:00' ],		#prior : OmReference [ '414' ],		#self : OmReference [ '415' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [ \r\t\t\tdivisibleBy400\r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleby100 \r\t\t\t ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:34',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [ \r\t\t\tdivisibleby100 not and: divisibleBy400 \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleby100 ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:36',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:36:59.305242+11:00' ],		#prior : OmReference [ '415' ],		#self : OmReference [ '416' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [ \r\t\t\tdivisibleby100 not and: divisibleBy400 \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleby100 ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:36',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [ \r\t\t\t(divisibleby100 not and: divisibleBy400) \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleby100 ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:36',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:38:05.781482+11:00' ],		#prior : OmReference [ '416' ],		#self : OmReference [ '417' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [ \r\t\t\t(divisibleby100 not and: divisibleBy400) \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleby100 ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:36',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [ \r\t\t\t(divisibleby100 not and: divisibleBy400) \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleBy4  ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:38',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:40:25.004218+11:00' ],		#prior : OmReference [ '417' ],		#self : OmReference [ '418' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [ \r\t\t\t(divisibleby100 not and: divisibleBy400) \r\t\t\t\tifTrue: true\r\t\t\t\tifFalse: divisibleBy4  ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:38',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [ \r\t\t\tdivisibleby100\r\t\t\t\tifTrue: divisibleBy400 \r\t\t\t\tifFalse: false  ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:40',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:40:56.131664+11:00' ],		#prior : OmReference [ '418' ],		#self : OmReference [ '419' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [ \r\t\t\tdivisibleby100\r\t\t\t\tifTrue: divisibleBy400 \r\t\t\t\tifFalse: false  ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:40',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [ \r\t\t\tdivisibleby100\r\t\t\t\tifTrue: divisibleBy400 \r\t\t\t\tifFalse: true  ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:40',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:41:18.603503+11:00' ],		#prior : OmReference [ '419' ],		#self : OmReference [ '420' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [ \r\t\t\tdivisibleby100\r\t\t\t\tifTrue: divisibleBy400 \r\t\t\t\tifFalse: true  ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:40',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: \r\t\t\tdivisibleby100\r\t\t\t\tifTrue: divisibleBy400 \r\t\t\t\tifFalse: true\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:41',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-03T13:41:22.283071+11:00' ],		#prior : OmReference [ '420' ],		#self : OmReference [ '421' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: \r\t\t\tdivisibleby100\r\t\t\t\tifTrue: divisibleBy400 \r\t\t\t\tifFalse: true\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:41',			#package : #'Exercise@Leap'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Leap,				#isMetaSide : false			},			#name : #'leapYear:',			#protocol : #queries,			#sourceCode : 'leapYear: aYear\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| divisibleBy4 divisibleby100 divisibleBy400 |\r\t\r\tdivisibleBy4 := (aYear rem: 4) == 0.\r\tdivisibleby100 := (aYear rem: 100) == 0.\r\tdivisibleBy400 := (aYear rem: 400) == 0.\r\r\t^divisibleBy4 \r\t\tifTrue: [\r\t\t\tdivisibleby100\r\t\t\t\tifTrue: divisibleBy400 \r\t\t\t\tifFalse: true  ]\r\t\tifFalse: false.\t\r',			#stamp : 'AndyMarks 12/3/2023 13:41',			#package : #'Exercise@Leap'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:51:47.763752+11:00' ],		#prior : OmReference [ '421' ],		#self : OmReference [ '422' ]	},	#content : EpCategoryAddition {		#classCategoryName : #'Exercise@ReverseString',		#affectedPackageName : #'Exercise@ReverseString'	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:51:47.765761+11:00' ],		#prior : OmReference [ '422' ],		#self : OmReference [ '423' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #ReverseStringTest\r\tinstanceVariableNames: \'reverseStringCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@ReverseString\'',				#superclassName : 'ExercismTest'			},			#name : #ReverseStringTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ReverseStringTest,						#isMetaSide : false					},					#name : #reverseStringCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReverseStringTest class\r\tinstanceVariableNames: \'\''				},				#name : #'ReverseStringTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ReverseStringTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@ReverseString',			#package : #'Exercise@ReverseString',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:51:47.767545+11:00' ],		#prior : OmReference [ '423' ],		#self : OmReference [ '424' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #ReverseStringTest\r\tinstanceVariableNames: \'reverseStringCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@ReverseString\'',				#superclassName : 'ExercismTest'			},			#name : #ReverseStringTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #ReverseStringTest,						#isMetaSide : false					},					#name : #reverseStringCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReverseStringTest class\r\tinstanceVariableNames: \'\''				},				#name : #'ReverseStringTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ReverseStringTest,					#isMetaSide : false				},				#parent : @7,				#content : '# Reverse String\r\rReverse a string\r\rFor example:\rinput: "cool"\routput: "looc"\r\r## Hint\r\rWhile there is are `#reversed` and `#reverseDo:` methods for Strings, can you figure out how to do this yourself using lower level character iteration and streams? \r\rTo help you browse code, Pharo has a neat code finder tool. Press Shift-Enter to activate it.\r\rNOTE: We have followed the Exercism convention of calling the solution ReverseString, however a more Smalltalk name would be StringReverser.\r\r## Smalltalk and Strings\r\rConcerning strings, there are some obvious little details like double quotes for comments, single quotes for strings, and special syntax for characters (e.g., $x for character “x”) that might confuse you on first reading as the conventions are different from those used by other languages. \r\rThere is also the notion of a symbol which is a string that is unique memory-wide; i.e. when it is constructed (typically at compile-time), a memory search is made to determine if another one like it exists; and only the original is used. The rationale is not just memory saving but significant speed-up when comparing symbols.\r\r```smalltalk\r"this is a comment"\r\'this is a string\'\r#\'this is a symbol\'\r#thisIsASymbolToo\r```\r\rThere are also very few commas in Smalltalk programs because they play no syntactic role.\rThat’s why array literals, for example, are comma-free; e.g.\r`#(1 2 3 4 5)`\rHowever, comma is an operator in its own right and you will notice it when concatenating two strings; e.g.\r`\'string1\', \'string2\'`\r\rFinally, it\'s worth knowing that Strings and Characters are distinct classes. String are a collection of Characters. This can catch you off guard when iterating over strings as you can end up giving characters to a method that expects strings. Consider...\r```smalltalk\r((\'hello\' at: 2) = $e) inspect.\r((\'hello\' at: 2) = \'e\') inspect.\r```\r\r## Smalltalk and Streams\rStreams are useful for sequential reading and writing.  They make code cleaner by avoiding the need to increment an index.\rStreams operate on any collection.\r```smalltalk\rstream := WriteStream on: String new.\rstream nextPut: $h ; nextPutAll: \'ell\' ; nextPut: $o.\rstream contents inspect\r```',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@ReverseString',			#package : #'Exercise@ReverseString',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# Reverse String\r\rReverse a string\r\rFor example:\rinput: "cool"\routput: "looc"\r\r## Hint\r\rWhile there is are `#reversed` and `#reverseDo:` methods for Strings, can you figure out how to do this yourself using lower level character iteration and streams? \r\rTo help you browse code, Pharo has a neat code finder tool. Press Shift-Enter to activate it.\r\rNOTE: We have followed the Exercism convention of calling the solution ReverseString, however a more Smalltalk name would be StringReverser.\r\r## Smalltalk and Strings\r\rConcerning strings, there are some obvious little details like double quotes for comments, single quotes for strings, and special syntax for characters (e.g., $x for character “x”) that might confuse you on first reading as the conventions are different from those used by other languages. \r\rThere is also the notion of a symbol which is a string that is unique memory-wide; i.e. when it is constructed (typically at compile-time), a memory search is made to determine if another one like it exists; and only the original is used. The rationale is not just memory saving but significant speed-up when comparing symbols.\r\r```smalltalk\r"this is a comment"\r\'this is a string\'\r#\'this is a symbol\'\r#thisIsASymbolToo\r```\r\rThere are also very few commas in Smalltalk programs because they play no syntactic role.\rThat’s why array literals, for example, are comma-free; e.g.\r`#(1 2 3 4 5)`\rHowever, comma is an operator in its own right and you will notice it when concatenating two strings; e.g.\r`\'string1\', \'string2\'`\r\rFinally, it\'s worth knowing that Strings and Characters are distinct classes. String are a collection of Characters. This can catch you off guard when iterating over strings as you can end up giving characters to a method that expects strings. Consider...\r```smalltalk\r((\'hello\' at: 2) = $e) inspect.\r((\'hello\' at: 2) = \'e\') inspect.\r```\r\r## Smalltalk and Streams\rStreams are useful for sequential reading and writing.  They make code cleaner by avoiding the need to increment an index.\rStreams operate on any collection.\r```smalltalk\rstream := WriteStream on: String new.\rstream nextPut: $h ; nextPutAll: \'ell\' ; nextPut: $o.\rstream contents inspect\r```',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:51:47.826643+11:00' ],		#prior : OmReference [ '424' ],		#self : OmReference [ '425' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ReverseStringTest class',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\t"Answer the configured exercise meta data for this exercise, an ExercismExercise"\r\t\r\t^(self createExerciseAfter: LeapTest)\r\t\tisCore: true;\r\t\tdifficulty: 1;\r\t\ttopics: #(\'strings\' \'iteration\');\r\t\tyourself\r\t\r\t\t\t\t',			#stamp : '',			#package : #'Exercise@ReverseString'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:51:47.82736+11:00' ],		#prior : OmReference [ '425' ],		#self : OmReference [ '426' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ReverseStringTest class',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\t"Answer a unique id for this exercise"\r\t^\'bab40685-2f87-4d4f-8886-0a4d21a0d90d\'',			#stamp : '',			#package : #'Exercise@ReverseString'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:51:47.827847+11:00' ],		#prior : OmReference [ '426' ],		#self : OmReference [ '427' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'ReverseStringTest class',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\t"Generated from specification: 25 February 2019"\r\t^\'1.1.0\'',			#stamp : '',			#package : #'Exercise@ReverseString'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:51:47.828205+11:00' ],		#prior : OmReference [ '427' ],		#self : OmReference [ '428' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseStringTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\treverseStringCalculator := ReverseString new',			#stamp : '',			#package : #'Exercise@ReverseString'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:51:47.830675+11:00' ],		#prior : OmReference [ '428' ],		#self : OmReference [ '429' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseStringTest,				#isMetaSide : false			},			#name : #test01_AnEmptyString,			#protocol : #tests,			#sourceCode : 'test01_AnEmptyString\r\t| result |\r\r\tresult := reverseStringCalculator reverseValue: \'\' .\r\tself assert: result equals: \'\'',			#stamp : '',			#package : #'Exercise@ReverseString'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:51:47.830963+11:00' ],		#prior : OmReference [ '429' ],		#self : OmReference [ '430' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseStringTest,				#isMetaSide : false			},			#name : #test02_AWord,			#protocol : #tests,			#sourceCode : 'test02_AWord\r\t| result |\r\r\tresult := reverseStringCalculator reverseValue: \'robot\' .\r\tself assert: result equals: \'tobor\'',			#stamp : '',			#package : #'Exercise@ReverseString'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:51:47.831165+11:00' ],		#prior : OmReference [ '430' ],		#self : OmReference [ '431' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseStringTest,				#isMetaSide : false			},			#name : #test03_ACapitalizedWord,			#protocol : #tests,			#sourceCode : 'test03_ACapitalizedWord\r\t| result |\r\r\tresult := reverseStringCalculator reverseValue: \'Ramen\' .\r\tself assert: result equals: \'nemaR\'',			#stamp : '',			#package : #'Exercise@ReverseString'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:51:47.831355+11:00' ],		#prior : OmReference [ '431' ],		#self : OmReference [ '432' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseStringTest,				#isMetaSide : false			},			#name : #test04_ASentenceWithPunctuation,			#protocol : #tests,			#sourceCode : 'test04_ASentenceWithPunctuation\r\t| result |\r\r\tresult := reverseStringCalculator reverseValue: \'I\'\'m hungry!\' .\r\tself assert: result equals: \'!yrgnuh m\'\'I\'',			#stamp : '',			#package : #'Exercise@ReverseString'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:51:47.831525+11:00' ],		#prior : OmReference [ '432' ],		#self : OmReference [ '433' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseStringTest,				#isMetaSide : false			},			#name : #test05_APalindrome,			#protocol : #tests,			#sourceCode : 'test05_APalindrome\r\t| result |\r\r\tresult := reverseStringCalculator reverseValue: \'racecar\' .\r\tself assert: result equals: \'racecar\'',			#stamp : '',			#package : #'Exercise@ReverseString'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:51:47.831697+11:00' ],		#prior : OmReference [ '433' ],		#self : OmReference [ '434' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseStringTest,				#isMetaSide : false			},			#name : #testMisuseOfSelector,			#protocol : #extra,			#sourceCode : 'testMisuseOfSelector\r\tself verifySolution: reverseStringCalculator class avoidsSelector: #reverse.\r\tself verifySolution: reverseStringCalculator class avoidsSelector: #reversed',			#stamp : '',			#package : #'Exercise@ReverseString'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:53:15.071096+11:00' ],		#prior : OmReference [ '434' ],		#self : OmReference [ '435' ]	},	#content : EpCategoryAddition {		#classCategoryName : #'',		#affectedPackageName : #''	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:53:15.075473+11:00' ],		#prior : OmReference [ '435' ],		#self : OmReference [ '436' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #ReverseString\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'\'',				#superclassName : 'Object'			},			#name : #ReverseString,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'ReverseString class\r\tinstanceVariableNames: \'\''				},				#name : #'ReverseString class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #ReverseString,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'',			#package : #'',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:53:48.932054+11:00' ],		#prior : OmReference [ '436' ],		#self : OmReference [ '437' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aString.',			#stamp : 'AndyMarks 12/4/2023 20:53',			#package : #''		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T20:54:34.931914+11:00' ],		#prior : OmReference [ '437' ],		#self : OmReference [ '438' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aString.',			#stamp : 'AndyMarks 12/4/2023 20:53',			#package : #''		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aString reversed .',			#stamp : 'AndyMarks 12/4/2023 20:54',			#package : #''		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T21:00:15.443472+11:00' ],		#prior : OmReference [ '438' ],		#self : OmReference [ '439' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aString reversed .',			#stamp : 'AndyMarks 12/4/2023 20:54',			#package : #''		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed |\r\t\t\t\r\treversed := WriteStream on: String new.\r\t\r\t^reversed.',			#stamp : 'AndyMarks 12/4/2023 21:00',			#package : #''		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T21:03:19.151956+11:00' ],		#prior : OmReference [ '439' ],		#self : OmReference [ '440' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed |\r\t\t\t\r\treversed := WriteStream on: String new.\r\t\r\t^reversed.',			#stamp : 'AndyMarks 12/4/2023 21:00',			#package : #''		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length |\r\t\t\t\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i |  ].\r\t\r\t^reversed.',			#stamp : 'AndyMarks 12/4/2023 21:03',			#package : #''		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T21:04:08.648925+11:00' ],		#prior : OmReference [ '440' ],		#self : OmReference [ '441' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length |\r\t\t\t\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i |  ].\r\t\r\t^reversed.',			#stamp : 'AndyMarks 12/4/2023 21:03',			#package : #''		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length |\r\t\t\t\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: aString at: (length - i) ].\r\t\r\t^reversed.',			#stamp : 'AndyMarks 12/4/2023 21:04',			#package : #''		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T21:04:19.859396+11:00' ],		#prior : OmReference [ '441' ],		#self : OmReference [ '442' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length |\r\t\t\t\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: aString at: (length - i) ].\r\t\r\t^reversed.',			#stamp : 'AndyMarks 12/4/2023 21:04',			#package : #''		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length |\r\t\t\t\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: (length - i)) ].\r\t\r\t^reversed.',			#stamp : 'AndyMarks 12/4/2023 21:04',			#package : #''		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T21:08:19.826555+11:00' ],		#prior : OmReference [ '442' ],		#self : OmReference [ '443' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length |\r\t\t\t\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: (length - i)) ].\r\t\r\t^reversed.',			#stamp : 'AndyMarks 12/4/2023 21:04',			#package : #''		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length |\r\t\t\t\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: (length - i)) ].\r\t\r\t^reversed contents inspect.',			#stamp : 'AndyMarks 12/4/2023 21:08',			#package : #''		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T21:11:33.490902+11:00' ],		#prior : OmReference [ '443' ],		#self : OmReference [ '444' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #'as yet unclassified',			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length |\r\t\t\t\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: (length - i)) ].\r\t\r\t^reversed contents inspect.',			#stamp : 'AndyMarks 12/4/2023 21:08',			#package : #''		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #modifying,			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length |\r\t\t\t\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: (length - i)) ].\r\t\r\t^reversed contents inspect.',			#stamp : 'AndyMarks 12/4/2023 21:08',			#package : #''		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T21:14:37.416429+11:00' ],		#prior : OmReference [ '444' ],		#self : OmReference [ '445' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Scratch\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'\'',				#superclassName : 'Object'			},			#name : #Scratch,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Scratch class\r\tinstanceVariableNames: \'\''				},				#name : #'Scratch class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Scratch,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'',			#package : #'',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T21:16:31.827011+11:00' ],		#prior : OmReference [ '445' ],		#self : OmReference [ '446' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Scratch,				#isMetaSide : false			},			#name : #methodSelectorAndArgumentNames,			#protocol : #'as yet unclassified',			#sourceCode : 'methodSelectorAndArgumentNames\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length aString |\r\t\t\t\r\taString := \'robot\'.\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: (length - i)) ].\r\t\r\t^reversed contents inspect.',			#stamp : 'AndyMarks 12/4/2023 21:16',			#package : #''		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T21:17:54.000925+11:00' ],		#prior : OmReference [ '446' ],		#self : OmReference [ '447' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Scratch,				#isMetaSide : false			},			#name : #methodSelectorAndArgumentNames,			#protocol : #'as yet unclassified',			#sourceCode : 'methodSelectorAndArgumentNames\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length aString |\r\t\t\t\r\taString := \'robot\'.\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: (length - i)) ].\r\t\r\t^reversed contents inspect.',			#stamp : 'AndyMarks 12/4/2023 21:16',			#package : #''		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Scratch,				#isMetaSide : false			},			#name : #methodSelectorAndArgumentNames,			#protocol : #'as yet unclassified',			#sourceCode : 'methodSelectorAndArgumentNames\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length aString |\r\t\t\t\r\taString := \'robot\'.\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: ((length - i) + 1))].\r\t\r\t^reversed contents inspect.',			#stamp : 'AndyMarks 12/4/2023 21:17',			#package : #''		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T21:18:36.903147+11:00' ],		#prior : OmReference [ '447' ],		#self : OmReference [ '448' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Scratch,				#isMetaSide : false			},			#name : #methodSelectorAndArgumentNames,			#protocol : #'as yet unclassified',			#sourceCode : 'methodSelectorAndArgumentNames\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length aString |\r\t\t\t\r\taString := \'robot\'.\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: ((length - i) + 1))].\r\t\r\t^reversed contents inspect.',			#stamp : 'AndyMarks 12/4/2023 21:17',			#package : #''		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Scratch,				#isMetaSide : false			},			#name : #methodSelectorAndArgumentNames,			#protocol : #'as yet unclassified',			#sourceCode : 'methodSelectorAndArgumentNames\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length aString result |\r\t\t\t\r\taString := \'robot\'.\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: ((length - i) + 1))].\r\r\tresult := reversed contents inspect.\r\t^result.',			#stamp : 'AndyMarks 12/4/2023 21:18',			#package : #''		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-04T21:20:09.022313+11:00' ],		#prior : OmReference [ '448' ],		#self : OmReference [ '449' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #modifying,			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length |\r\t\t\t\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: (length - i)) ].\r\t\r\t^reversed contents inspect.',			#stamp : 'AndyMarks 12/4/2023 21:08',			#package : #''		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #modifying,			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length |\r\t\t\t\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: ((length - i) + 1)) ].\r\t\r\t^reversed contents inspect.',			#stamp : 'AndyMarks 12/4/2023 21:20',			#package : #''		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:21:02.056677+11:00' ],		#prior : OmReference [ '449' ],		#self : OmReference [ '450' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #modifying,			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length |\r\t\t\t\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: ((length - i) + 1)) ].\r\t\r\t^reversed contents inspect.',			#stamp : 'AndyMarks 12/4/2023 21:20',			#package : #''		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #ReverseString,				#isMetaSide : false			},			#name : #'reverseValue:',			#protocol : #modifying,			#sourceCode : 'reverseValue: aString\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\r\t| reversed length |\r\t\t\t\r\treversed := WriteStream on: String new.\r\tlength := aString size .\r\t\r\taString doWithIndex: [ :char :i | reversed nextPut: (aString at: ((length - i) + 1)) ].\r\t\r\t^reversed contents.',			#stamp : 'AndyMarks 12/9/2023 14:21',			#package : #''		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.217459+11:00' ],		#prior : OmReference [ '450' ],		#self : OmReference [ '451' ]	},	#content : EpCategoryAddition {		#classCategoryName : #'Exercise@Isogram',		#affectedPackageName : #'Exercise@Isogram'	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.21942+11:00' ],		#prior : OmReference [ '451' ],		#self : OmReference [ '452' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #IsogramTest\r\tinstanceVariableNames: \'isogramCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Isogram\'',				#superclassName : 'ExercismTest'			},			#name : #IsogramTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #IsogramTest,						#isMetaSide : false					},					#name : #isogramCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'IsogramTest class\r\tinstanceVariableNames: \'\''				},				#name : #'IsogramTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #IsogramTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Isogram',			#package : #'Exercise@Isogram',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.221926+11:00' ],		#prior : OmReference [ '452' ],		#self : OmReference [ '453' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #IsogramTest\r\tinstanceVariableNames: \'isogramCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Isogram\'',				#superclassName : 'ExercismTest'			},			#name : #IsogramTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #IsogramTest,						#isMetaSide : false					},					#name : #isogramCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'IsogramTest class\r\tinstanceVariableNames: \'\''				},				#name : #'IsogramTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #IsogramTest,					#isMetaSide : false				},				#parent : @7,				#content : '# Isogram\r\rDetermine if a word or phrase is an isogram.\r\rAn isogram (also known as a "nonpattern word") is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times.\r\rExamples of isograms:\r\r- lumberjacks\r- background\r- downstream\r- six-year-old\r\rThe word *isograms*, however, is not an isogram, because the s repeats.\r\r## Hint\r\rThere is a range of interesting data types in Pharo, it\'s worth taking the time to browse the  hierarchy of class Collection and reading some of the class comments and running some of the examples.\r',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Isogram',			#package : #'Exercise@Isogram',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# Isogram\r\rDetermine if a word or phrase is an isogram.\r\rAn isogram (also known as a "nonpattern word") is a word or phrase without a repeating letter, however spaces and hyphens are allowed to appear multiple times.\r\rExamples of isograms:\r\r- lumberjacks\r- background\r- downstream\r- six-year-old\r\rThe word *isograms*, however, is not an isogram, because the s repeats.\r\r## Hint\r\rThere is a range of interesting data types in Pharo, it\'s worth taking the time to browse the  hierarchy of class Collection and reading some of the class comments and running some of the examples.\r',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.282423+11:00' ],		#prior : OmReference [ '453' ],		#self : OmReference [ '454' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'IsogramTest class',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\t"Answer the configured exercise meta data for this exercise, an ExercismExercise"\r\t\r\t^(self createExerciseAfter: ReverseStringTest)\r\t\tisCore: true;\r\t\tdifficulty: 2;\r\t\ttopics: #(\'strings\' \'iteration\');\r\t\tyourself\r',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.283126+11:00' ],		#prior : OmReference [ '454' ],		#self : OmReference [ '455' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'IsogramTest class',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\t"Answer a unique id for this exercise"\r\t^\'9e0074be-4a3f-0d00-bb4e-73e5071d6982\'',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.283635+11:00' ],		#prior : OmReference [ '455' ],		#self : OmReference [ '456' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'IsogramTest class',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\t"Generated from specification: 28 February 2019"\r\t^\'1.7.0\'',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.284022+11:00' ],		#prior : OmReference [ '456' ],		#self : OmReference [ '457' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\tisogramCalculator := Isogram new',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.284348+11:00' ],		#prior : OmReference [ '457' ],		#self : OmReference [ '458' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test01_CheckIfTheGivenStringIsAnIsogramEmptyString,			#protocol : #tests,			#sourceCode : 'test01_CheckIfTheGivenStringIsAnIsogramEmptyString\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'\' .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.284624+11:00' ],		#prior : OmReference [ '458' ],		#self : OmReference [ '459' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test02_CheckIfTheGivenStringIsAnIsogramIsogramWithOnlyLowerCaseCharacters,			#protocol : #tests,			#sourceCode : 'test02_CheckIfTheGivenStringIsAnIsogramIsogramWithOnlyLowerCaseCharacters\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'isogram\' .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.284849+11:00' ],		#prior : OmReference [ '459' ],		#self : OmReference [ '460' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test03_CheckIfTheGivenStringIsAnIsogramWordWithOneDuplicatedCharacter,			#protocol : #tests,			#sourceCode : 'test03_CheckIfTheGivenStringIsAnIsogramWordWithOneDuplicatedCharacter\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'eleven\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.285098+11:00' ],		#prior : OmReference [ '460' ],		#self : OmReference [ '461' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test04_CheckIfTheGivenStringIsAnIsogramWordWithOneDuplicatedCharacterFromTheEndOfTheAlphabet,			#protocol : #tests,			#sourceCode : 'test04_CheckIfTheGivenStringIsAnIsogramWordWithOneDuplicatedCharacterFromTheEndOfTheAlphabet\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'zzyzx\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.285288+11:00' ],		#prior : OmReference [ '461' ],		#self : OmReference [ '462' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test05_CheckIfTheGivenStringIsAnIsogramLongestReportedEnglishIsogram,			#protocol : #tests,			#sourceCode : 'test05_CheckIfTheGivenStringIsAnIsogramLongestReportedEnglishIsogram\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'subdermatoglyphic\' .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.285459+11:00' ],		#prior : OmReference [ '462' ],		#self : OmReference [ '463' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test06_CheckIfTheGivenStringIsAnIsogramWordWithDuplicatedCharacterInMixedCase,			#protocol : #tests,			#sourceCode : 'test06_CheckIfTheGivenStringIsAnIsogramWordWithDuplicatedCharacterInMixedCase\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'Alphabet\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.285627+11:00' ],		#prior : OmReference [ '463' ],		#self : OmReference [ '464' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test07_CheckIfTheGivenStringIsAnIsogramWordWithDuplicatedCharacterInMixedCaseLowercaseFirst,			#protocol : #tests,			#sourceCode : 'test07_CheckIfTheGivenStringIsAnIsogramWordWithDuplicatedCharacterInMixedCaseLowercaseFirst\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'alphAbet\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.285796+11:00' ],		#prior : OmReference [ '464' ],		#self : OmReference [ '465' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test08_CheckIfTheGivenStringIsAnIsogramHypotheticalIsogrammicWordWithHyphen,			#protocol : #tests,			#sourceCode : 'test08_CheckIfTheGivenStringIsAnIsogramHypotheticalIsogrammicWordWithHyphen\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'thumbscrew-japingly\' .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.28597+11:00' ],		#prior : OmReference [ '465' ],		#self : OmReference [ '466' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test09_CheckIfTheGivenStringIsAnIsogramHypotheticalWordWithDuplicatedCharacterFollowingHyphen,			#protocol : #tests,			#sourceCode : 'test09_CheckIfTheGivenStringIsAnIsogramHypotheticalWordWithDuplicatedCharacterFollowingHyphen\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'thumbscrew-jappingly\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.286136+11:00' ],		#prior : OmReference [ '466' ],		#self : OmReference [ '467' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test10_CheckIfTheGivenStringIsAnIsogramIsogramWithDuplicatedHyphen,			#protocol : #tests,			#sourceCode : 'test10_CheckIfTheGivenStringIsAnIsogramIsogramWithDuplicatedHyphen\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'six-year-old\' .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.286298+11:00' ],		#prior : OmReference [ '467' ],		#self : OmReference [ '468' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test11_CheckIfTheGivenStringIsAnIsogramMadeupNameThatIsAnIsogram,			#protocol : #tests,			#sourceCode : 'test11_CheckIfTheGivenStringIsAnIsogramMadeupNameThatIsAnIsogram\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'Emily Jung Schwartzkopf\' .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.286459+11:00' ],		#prior : OmReference [ '468' ],		#self : OmReference [ '469' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test12_CheckIfTheGivenStringIsAnIsogramDuplicatedCharacterInTheMiddle,			#protocol : #tests,			#sourceCode : 'test12_CheckIfTheGivenStringIsAnIsogramDuplicatedCharacterInTheMiddle\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'accentor\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:28:27.286621+11:00' ],		#prior : OmReference [ '469' ],		#self : OmReference [ '470' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #IsogramTest,				#isMetaSide : false			},			#name : #test13_CheckIfTheGivenStringIsAnIsogramSameFirstAndLastCharacters,			#protocol : #tests,			#sourceCode : 'test13_CheckIfTheGivenStringIsAnIsogramSameFirstAndLastCharacters\r\t| result |\r\r\tresult := isogramCalculator isIsogramPhrase: \'angola\' .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:29:32.428515+11:00' ],		#prior : OmReference [ '470' ],		#self : OmReference [ '471' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Isogram\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'\'',				#superclassName : 'Object'			},			#name : #Isogram,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Isogram class\r\tinstanceVariableNames: \'\''				},				#name : #'Isogram class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Isogram,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'',			#package : #'',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:30:02.981882+11:00' ],		#prior : OmReference [ '471' ],		#self : OmReference [ '472' ]	},	#content : EpBehaviorCategoryChange {		#oldCategory : #'',		#newCategory : 'Exercise@Isogram',		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Isogram\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Isogram\'',				#superclassName : 'Object'			},			#name : #Isogram,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Isogram class\r\tinstanceVariableNames: \'\''				},				#name : #'Isogram class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Isogram,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Isogram',			#package : #'Exercise@Isogram',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:30:49.877981+11:00' ],		#prior : OmReference [ '472' ],		#self : OmReference [ '473' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\tself shouldBeImplemented.',			#stamp : 'AndyMarks 12/9/2023 14:30',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:33:38.256398+11:00' ],		#prior : OmReference [ '473' ],		#self : OmReference [ '474' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\tself shouldBeImplemented.',			#stamp : 'AndyMarks 12/9/2023 14:30',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: aString.\r\t\r\t^letters length == aString length.',			#stamp : 'AndyMarks 12/9/2023 14:33',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:39:39.045154+11:00' ],		#prior : OmReference [ '474' ],		#self : OmReference [ '475' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: aString.\r\t\r\t^letters length == aString length.',			#stamp : 'AndyMarks 12/9/2023 14:36',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: aString.\r\t\r\t^letters size == aString length.',			#stamp : 'AndyMarks 12/9/2023 14:39',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:39:57.383965+11:00' ],		#prior : OmReference [ '475' ],		#self : OmReference [ '476' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: aString.\r\t\r\t^letters size == aString length.',			#stamp : 'AndyMarks 12/9/2023 14:39',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: aString.\r\t\r\t^letters size == aString size.',			#stamp : 'AndyMarks 12/9/2023 14:39',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:42:35.598759+11:00' ],		#prior : OmReference [ '476' ],		#self : OmReference [ '477' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: aString.\r\t\r\t^letters size == aString size.',			#stamp : 'AndyMarks 12/9/2023 14:39',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: (aString translateToLowercase).\r\t\r\t^letters size == aString size.',			#stamp : 'AndyMarks 12/9/2023 14:42',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:43:16.907587+11:00' ],		#prior : OmReference [ '477' ],		#self : OmReference [ '478' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: (aString translateToLowercase).\r\t\r\t^letters size == aString size.',			#stamp : 'AndyMarks 12/9/2023 14:42',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: aString.\r\t\r\t^letters size == aString size.',			#stamp : 'AndyMarks 12/9/2023 14:43',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:43:44.769281+11:00' ],		#prior : OmReference [ '478' ],		#self : OmReference [ '479' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: aString.\r\t\r\t^letters size == aString size.',			#stamp : 'AndyMarks 12/9/2023 14:43',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: aString translateToLowercase .\r\t\r\t^letters size == aString size.',			#stamp : 'AndyMarks 12/9/2023 14:43',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:44:48.972042+11:00' ],		#prior : OmReference [ '479' ],		#self : OmReference [ '480' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: aString translateToLowercase .\r\t\r\t^letters size == aString size.',			#stamp : 'AndyMarks 12/9/2023 14:43',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: aString asLowercase  .\r\t\r\t^letters size == aString size.',			#stamp : 'AndyMarks 12/9/2023 14:44',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T14:53:53.398037+11:00' ],		#prior : OmReference [ '480' ],		#self : OmReference [ '481' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| letters |\r\t\r\tletters := Set newFrom: aString asLowercase  .\r\t\r\t^letters size == aString size.',			#stamp : 'AndyMarks 12/9/2023 14:44',			#package : #'Exercise@Isogram'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Isogram,				#isMetaSide : false			},			#name : #'isIsogramPhrase:',			#protocol : #queries,			#sourceCode : 'isIsogramPhrase: aString \r\t| uniqueLetters cleanString |\r\t\r\tcleanString := aString onlyLetters asLowercase .\r\t\r\tuniqueLetters := Set newFrom: cleanString  .\r\t\r\t^uniqueLetters size == cleanString size.',			#stamp : 'AndyMarks 12/9/2023 14:53',			#package : #'Exercise@Isogram'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.840359+11:00' ],		#prior : OmReference [ '481' ],		#self : OmReference [ '482' ]	},	#content : EpCategoryAddition {		#classCategoryName : #'Exercise@Grains',		#affectedPackageName : #'Exercise@Grains'	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.842825+11:00' ],		#prior : OmReference [ '482' ],		#self : OmReference [ '483' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #GrainsTest\r\tinstanceVariableNames: \'grainsCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Grains\'',				#superclassName : 'ExercismTest'			},			#name : #GrainsTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GrainsTest,						#isMetaSide : false					},					#name : #grainsCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GrainsTest class\r\tinstanceVariableNames: \'\''				},				#name : #'GrainsTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GrainsTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Grains',			#package : #'Exercise@Grains',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.845222+11:00' ],		#prior : OmReference [ '483' ],		#self : OmReference [ '484' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #GrainsTest\r\tinstanceVariableNames: \'grainsCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Grains\'',				#superclassName : 'ExercismTest'			},			#name : #GrainsTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #GrainsTest,						#isMetaSide : false					},					#name : #grainsCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'GrainsTest class\r\tinstanceVariableNames: \'\''				},				#name : #'GrainsTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #GrainsTest,					#isMetaSide : false				},				#parent : @7,				#content : '# Grains\r\rCalculate the number of grains of wheat on a chessboard given that the number\ron each square doubles.\r\rThere once was a wise servant who saved the life of a prince. The king\rpromised to pay whatever the servant could dream up. Knowing that the\rking loved chess, the servant told the king he would like to have grains\rof wheat. One grain on the first square of a chess board, with the number\rof grains doubling on each successive square.\r\rThere are 64 squares on a chessboard (where square 1 has one grain, square 2 has two grains, and so on).\r\rWrite code that shows:\r- how many grains were on a given square, and\r- the total number of grains on the chessboard\r\r## For bonus points\r\rDid you get the tests passing and the code clean? If you want to, these\rare some additional things you could try:\r\r- Optimize for speed.\r- Optimize for readability.\r\rThen please share your thoughts in a comment on the submission. Did this\rexperiment make the code better? Worse? Did you learn anything from it?\r\r## Hint\r\rThese kinds of problems (where an answer is dependent on a previous) one are often called recursion. There are different ways to code for recursion, it might be worth reasearching if you are not familiar with this. Pharo is well optimised for recursion, and it is a commonly used pattern.\r\rNote: in the original problem specification, the grainsCalculator is called via #square, however we have renamed this method #atSquare: which is a more Smalltalk like name, that better describes that you are asking for an answer "at a square".  \r',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Grains',			#package : #'Exercise@Grains',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# Grains\r\rCalculate the number of grains of wheat on a chessboard given that the number\ron each square doubles.\r\rThere once was a wise servant who saved the life of a prince. The king\rpromised to pay whatever the servant could dream up. Knowing that the\rking loved chess, the servant told the king he would like to have grains\rof wheat. One grain on the first square of a chess board, with the number\rof grains doubling on each successive square.\r\rThere are 64 squares on a chessboard (where square 1 has one grain, square 2 has two grains, and so on).\r\rWrite code that shows:\r- how many grains were on a given square, and\r- the total number of grains on the chessboard\r\r## For bonus points\r\rDid you get the tests passing and the code clean? If you want to, these\rare some additional things you could try:\r\r- Optimize for speed.\r- Optimize for readability.\r\rThen please share your thoughts in a comment on the submission. Did this\rexperiment make the code better? Worse? Did you learn anything from it?\r\r## Hint\r\rThese kinds of problems (where an answer is dependent on a previous) one are often called recursion. There are different ways to code for recursion, it might be worth reasearching if you are not familiar with this. Pharo is well optimised for recursion, and it is a commonly used pattern.\r\rNote: in the original problem specification, the grainsCalculator is called via #square, however we have renamed this method #atSquare: which is a more Smalltalk like name, that better describes that you are asking for an answer "at a square".  \r',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.951986+11:00' ],		#prior : OmReference [ '484' ],		#self : OmReference [ '485' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'GrainsTest class',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\t"Answer the configured exercise meta data for this exercise, an ExercismExercise"\r\t\r\t^(self createExerciseAfter: IsogramTest)\r\t\tisCore: true;\r\t\tdifficulty: 2;\r\t\ttopics: #(\'math\' \'recursion\');\r\t\tyourself\r',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.957121+11:00' ],		#prior : OmReference [ '485' ],		#self : OmReference [ '486' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'GrainsTest class',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\t"Answer a unique id for this exercise"\r\t^\'93dde1bb-8040-0d00-812a-052301deb008\'',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.961043+11:00' ],		#prior : OmReference [ '486' ],		#self : OmReference [ '487' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'GrainsTest class',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\t"Generated from specification: 15 March 2019"\r\t^\'1.2.0\'',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.963743+11:00' ],		#prior : OmReference [ '487' ],		#self : OmReference [ '488' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\tgrainsCalculator := Grains new',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.965959+11:00' ],		#prior : OmReference [ '488' ],		#self : OmReference [ '489' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test01_ReturnsTheNumberOfGrainsOnTheSquareAt1,			#protocol : #tests,			#sourceCode : 'test01_ReturnsTheNumberOfGrainsOnTheSquareAt1\r\t| result |\r\r\tresult := grainsCalculator atSquare: 1 .\r\tself assert: result equals: 1',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.971686+11:00' ],		#prior : OmReference [ '489' ],		#self : OmReference [ '490' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test02_ReturnsTheNumberOfGrainsOnTheSquareAt2,			#protocol : #tests,			#sourceCode : 'test02_ReturnsTheNumberOfGrainsOnTheSquareAt2\r\t| result |\r\r\tresult := grainsCalculator atSquare: 2 .\r\tself assert: result equals: 2',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.97403+11:00' ],		#prior : OmReference [ '490' ],		#self : OmReference [ '491' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test03_ReturnsTheNumberOfGrainsOnTheSquareAt3,			#protocol : #tests,			#sourceCode : 'test03_ReturnsTheNumberOfGrainsOnTheSquareAt3\r\t| result |\r\r\tresult := grainsCalculator atSquare: 3 .\r\tself assert: result equals: 4',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.976236+11:00' ],		#prior : OmReference [ '491' ],		#self : OmReference [ '492' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test04_ReturnsTheNumberOfGrainsOnTheSquareAt4,			#protocol : #tests,			#sourceCode : 'test04_ReturnsTheNumberOfGrainsOnTheSquareAt4\r\t| result |\r\r\tresult := grainsCalculator atSquare: 4 .\r\tself assert: result equals: 8',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.978223+11:00' ],		#prior : OmReference [ '492' ],		#self : OmReference [ '493' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test05_ReturnsTheNumberOfGrainsOnTheSquareAt16,			#protocol : #tests,			#sourceCode : 'test05_ReturnsTheNumberOfGrainsOnTheSquareAt16\r\t| result |\r\r\tresult := grainsCalculator atSquare: 16 .\r\tself assert: result equals: 32768',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.980107+11:00' ],		#prior : OmReference [ '493' ],		#self : OmReference [ '494' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test06_ReturnsTheNumberOfGrainsOnTheSquareAt32,			#protocol : #tests,			#sourceCode : 'test06_ReturnsTheNumberOfGrainsOnTheSquareAt32\r\t| result |\r\r\tresult := grainsCalculator atSquare: 32 .\r\tself assert: result equals: 2147483648',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.982074+11:00' ],		#prior : OmReference [ '494' ],		#self : OmReference [ '495' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test07_ReturnsTheNumberOfGrainsOnTheSquareAt64,			#protocol : #tests,			#sourceCode : 'test07_ReturnsTheNumberOfGrainsOnTheSquareAt64\r\t| result |\r\r\tresult := grainsCalculator atSquare: 64 .\r\tself assert: result equals: 9223372036854775808',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.983925+11:00' ],		#prior : OmReference [ '495' ],		#self : OmReference [ '496' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test08_ReturnsTheNumberOfGrainsOnTheSquareSquare0RaisesAnException,			#protocol : #tests,			#sourceCode : 'test08_ReturnsTheNumberOfGrainsOnTheSquareSquare0RaisesAnException\r\tself\r\t\tshould: [grainsCalculator atSquare: 0]\r\t\traise: Error\r\t\twhoseDescriptionIncludes: \'square must be between 1 and 64\'\r\t\tdescription: \'Should get an error with the correct description\'.\r\t\t\r\t\t\r\t\t\r',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.98578+11:00' ],		#prior : OmReference [ '496' ],		#self : OmReference [ '497' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test09_ReturnsTheNumberOfGrainsOnTheSquareNegativeSquareRaisesAnException,			#protocol : #tests,			#sourceCode : 'test09_ReturnsTheNumberOfGrainsOnTheSquareNegativeSquareRaisesAnException\r\tself\r\t\tshould: [grainsCalculator atSquare: -1]\r\t\traise: Error\r\t\twhoseDescriptionIncludes: \'square must be between 1 and 64\'\r\t\tdescription: \'Should get an error with the correct description\'.',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.987891+11:00' ],		#prior : OmReference [ '497' ],		#self : OmReference [ '498' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test10_ReturnsTheNumberOfGrainsOnTheSquareSquareGreaterThan64RaisesAnException,			#protocol : #tests,			#sourceCode : 'test10_ReturnsTheNumberOfGrainsOnTheSquareSquareGreaterThan64RaisesAnException\r\tself\r\t\tshould: [grainsCalculator atSquare: 65]\r\t\traise: Error\r\t\twhoseDescriptionIncludes: \'square must be between 1 and 64\'\r\t\tdescription: \'Should get an error with the correct description\'.',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:00:07.98992+11:00' ],		#prior : OmReference [ '498' ],		#self : OmReference [ '499' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #GrainsTest,				#isMetaSide : false			},			#name : #test11_ReturnsTheTotalNumberOfGrainsOnTheBoard,			#protocol : #tests,			#sourceCode : 'test11_ReturnsTheTotalNumberOfGrainsOnTheBoard\r\t| result |\r\r\tresult := grainsCalculator total.\r\tself assert: result equals: 18446744073709551615',			#stamp : '',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:01:30.479443+11:00' ],		#prior : OmReference [ '499' ],		#self : OmReference [ '500' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Grains\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Grains\'',				#superclassName : 'Object'			},			#name : #Grains,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Grains class\r\tinstanceVariableNames: \'\''				},				#name : #'Grains class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Grains,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Grains',			#package : #'Exercise@Grains',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:02:30.410776+11:00' ],		#prior : OmReference [ '500' ],		#self : OmReference [ '501' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #'as yet unclassified',			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aNumber.',			#stamp : 'AndyMarks 12/9/2023 15:02',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:02:30.436981+11:00' ],		#prior : OmReference [ '501' ],		#self : OmReference [ '502' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #'as yet unclassified',			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aNumber.',			#stamp : 'AndyMarks 12/9/2023 15:02',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aNumber.',			#stamp : 'AndyMarks 12/9/2023 15:02',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:03:39.153242+11:00' ],		#prior : OmReference [ '502' ],		#self : OmReference [ '503' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aNumber.',			#stamp : 'AndyMarks 12/9/2023 15:02',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aNumber pow: 2.',			#stamp : 'AndyMarks 12/9/2023 15:03',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:08:32.139895+11:00' ],		#prior : OmReference [ '503' ],		#self : OmReference [ '504' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aNumber pow: 2.',			#stamp : 'AndyMarks 12/9/2023 15:03',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tSmallInteger newFrom: aNumber pow: 2.\r\t^aNumber pow: 2.',			#stamp : 'AndyMarks 12/9/2023 15:08',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:08:43.539192+11:00' ],		#prior : OmReference [ '504' ],		#self : OmReference [ '505' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\tSmallInteger newFrom: aNumber pow: 2.\r\t^aNumber pow: 2.',			#stamp : 'AndyMarks 12/9/2023 15:08',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aNumber pow: 2.',			#stamp : 'AndyMarks 12/9/2023 15:08',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:13:34.311153+11:00' ],		#prior : OmReference [ '505' ],		#self : OmReference [ '506' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aNumber pow: 2.',			#stamp : 'AndyMarks 12/9/2023 15:08',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aNumber ** 2.',			#stamp : 'AndyMarks 12/9/2023 15:13',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:14:19.175335+11:00' ],		#prior : OmReference [ '506' ],		#self : OmReference [ '507' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^aNumber ** 2.',			#stamp : 'AndyMarks 12/9/2023 15:13',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^2 ** (aNumber - 1).',			#stamp : 'AndyMarks 12/9/2023 15:14',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:15:55.860857+11:00' ],		#prior : OmReference [ '507' ],		#self : OmReference [ '508' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^2 ** (aNumber - 1).',			#stamp : 'AndyMarks 12/9/2023 15:14',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\taNumber between: 1 and: 64\r\tifTrue: [ ^2 ** (aNumber - 1) ]\r\tifFalse: [self error ].',			#stamp : 'AndyMarks 12/9/2023 15:15',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:17:57.803811+11:00' ],		#prior : OmReference [ '508' ],		#self : OmReference [ '509' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\taNumber between: 1 and: 64\r\tifTrue: [ ^2 ** (aNumber - 1) ]\r\tifFalse: [self error ].',			#stamp : 'AndyMarks 12/9/2023 15:15',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t(aNumber between: 1 and: 64) \r\tifTrue:  [^2 ** (aNumber - 1)]\r\tifFalse: [self error  ].',			#stamp : 'AndyMarks 12/9/2023 15:17',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:18:04.735692+11:00' ],		#prior : OmReference [ '509' ],		#self : OmReference [ '510' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t(aNumber between: 1 and: 64) \r\tifTrue:  [^2 ** (aNumber - 1)]\r\tifFalse: [self error  ].',			#stamp : 'AndyMarks 12/9/2023 15:17',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t(aNumber between: 1 and: 64) \r\t\tifTrue:  [^2 ** (aNumber - 1)]\r\t\tifFalse: [self error  ].',			#stamp : 'AndyMarks 12/9/2023 15:18',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:19:15.247959+11:00' ],		#prior : OmReference [ '510' ],		#self : OmReference [ '511' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t(aNumber between: 1 and: 64) \r\t\tifTrue:  [^2 ** (aNumber - 1)]\r\t\tifFalse: [self error  ].',			#stamp : 'AndyMarks 12/9/2023 15:18',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t(aNumber between: 1 and: 64) \r\t\tifTrue:  [^2 ** (aNumber - 1)]\r\t\tifFalse: [^self error  ].',			#stamp : 'AndyMarks 12/9/2023 15:19',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:19:49.004317+11:00' ],		#prior : OmReference [ '511' ],		#self : OmReference [ '512' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t(aNumber between: 1 and: 64) \r\t\tifTrue:  [^2 ** (aNumber - 1)]\r\t\tifFalse: [^self error  ].',			#stamp : 'AndyMarks 12/9/2023 15:19',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t(aNumber between: 1 and: 64) \r\t\tifTrue:  [^2 ** (aNumber - 1)]\r\t\tifFalse: [^Error new  ].',			#stamp : 'AndyMarks 12/9/2023 15:19',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:20:23.678323+11:00' ],		#prior : OmReference [ '512' ],		#self : OmReference [ '513' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t(aNumber between: 1 and: 64) \r\t\tifTrue:  [^2 ** (aNumber - 1)]\r\t\tifFalse: [^Error new  ].',			#stamp : 'AndyMarks 12/9/2023 15:19',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t(aNumber between: 1 and: 64) \r\t\tifTrue:  [^2 ** (aNumber - 1)]\r\t\tifFalse: [^Error newFrom: \'square must be between 1 and 64\' ].',			#stamp : 'AndyMarks 12/9/2023 15:20',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:21:12.797247+11:00' ],		#prior : OmReference [ '513' ],		#self : OmReference [ '514' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #'as yet unclassified',			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^0',			#stamp : 'AndyMarks 12/9/2023 15:21',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:21:12.842755+11:00' ],		#prior : OmReference [ '514' ],		#self : OmReference [ '515' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #'as yet unclassified',			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^0',			#stamp : 'AndyMarks 12/9/2023 15:21',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^0',			#stamp : 'AndyMarks 12/9/2023 15:21',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:21:16.664241+11:00' ],		#prior : OmReference [ '515' ],		#self : OmReference [ '516' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^0',			#stamp : 'AndyMarks 12/9/2023 15:21',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^0.',			#stamp : 'AndyMarks 12/9/2023 15:21',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:28:52.20776+11:00' ],		#prior : OmReference [ '516' ],		#self : OmReference [ '517' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^0.',			#stamp : 'AndyMarks 12/9/2023 15:21',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^2 ** 128.',			#stamp : 'AndyMarks 12/9/2023 15:28',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:29:08.882501+11:00' ],		#prior : OmReference [ '517' ],		#self : OmReference [ '518' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^2 ** 128.',			#stamp : 'AndyMarks 12/9/2023 15:28',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^2 ** 65.',			#stamp : 'AndyMarks 12/9/2023 15:29',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:34:59.152189+11:00' ],		#prior : OmReference [ '518' ],		#self : OmReference [ '519' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^2 ** 65.',			#stamp : 'AndyMarks 12/9/2023 15:29',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^Interval from: 1 to: 64 sumNumbers: [ :square | self atSquare: square ].',			#stamp : 'AndyMarks 12/9/2023 15:34',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:35:11.769494+11:00' ],		#prior : OmReference [ '519' ],		#self : OmReference [ '520' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^Interval from: 1 to: 64 sumNumbers: [ :square | self atSquare: square ].',			#stamp : 'AndyMarks 12/9/2023 15:34',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^(Interval from: 1 to: 64) sumNumbers: [ :square | self atSquare: square ].',			#stamp : 'AndyMarks 12/9/2023 15:35',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:35:50.342211+11:00' ],		#prior : OmReference [ '520' ],		#self : OmReference [ '521' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t^(Interval from: 1 to: 64) sumNumbers: [ :square | self atSquare: square ].',			#stamp : 'AndyMarks 12/9/2023 15:35',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| allSquares |\r\tallSquares := Interval from: 1 to: 64.\r\t^allSquares sumNumbers: [ :square | self atSquare: square ].',			#stamp : 'AndyMarks 12/9/2023 15:35',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:35:52.493621+11:00' ],		#prior : OmReference [ '521' ],		#self : OmReference [ '522' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| allSquares |\r\tallSquares := Interval from: 1 to: 64.\r\t^allSquares sumNumbers: [ :square | self atSquare: square ].',			#stamp : 'AndyMarks 12/9/2023 15:35',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #total,			#protocol : #accessing,			#sourceCode : 'total\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t| allSquares |\r\tallSquares := Interval from: 1 to: 64.\r\t\r\t^allSquares sumNumbers: [ :square | self atSquare: square ].',			#stamp : 'AndyMarks 12/9/2023 15:35',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:37:17.676403+11:00' ],		#prior : OmReference [ '522' ],		#self : OmReference [ '523' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t(aNumber between: 1 and: 64) \r\t\tifTrue:  [^2 ** (aNumber - 1)]\r\t\tifFalse: [^Error newFrom: \'square must be between 1 and 64\' ].',			#stamp : 'AndyMarks 12/9/2023 15:20',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t(aNumber between: 1 and: 64) \r\t\tifTrue:  [^2 ** (aNumber - 1)]\r\t\tifFalse: [^self error: \'square must be between 1 and 64\' ].',			#stamp : 'AndyMarks 12/9/2023 15:37',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-09T15:37:35.213936+11:00' ],		#prior : OmReference [ '523' ],		#self : OmReference [ '524' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t(aNumber between: 1 and: 64) \r\t\tifTrue:  [^2 ** (aNumber - 1)]\r\t\tifFalse: [^self error: \'square must be between 1 and 64\' ].',			#stamp : 'AndyMarks 12/9/2023 15:37',			#package : #'Exercise@Grains'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Grains,				#isMetaSide : false			},			#name : #'atSquare:',			#protocol : #accessing,			#sourceCode : 'atSquare: aNumber\r\t"comment stating purpose of instance-side method"\r\t"scope: class-variables  &  instance-variables"\t\r\t\t\t\r\t(aNumber between: 1 and: 64) \r\t\tifTrue:  [^2 ** (aNumber - 1)]\r\t\tifFalse: [self error: \'square must be between 1 and 64\' ].',			#stamp : 'AndyMarks 12/9/2023 15:37',			#package : #'Exercise@Grains'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.557349+11:00' ],		#prior : OmReference [ '524' ],		#self : OmReference [ '525' ]	},	#content : EpCategoryAddition {		#classCategoryName : #'Exercise@Allergies',		#affectedPackageName : #'Exercise@Allergies'	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.560921+11:00' ],		#prior : OmReference [ '525' ],		#self : OmReference [ '526' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #AllergiesTest\r\tinstanceVariableNames: \'allergiesCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Allergies\'',				#superclassName : 'ExercismTest'			},			#name : #AllergiesTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AllergiesTest,						#isMetaSide : false					},					#name : #allergiesCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AllergiesTest class\r\tinstanceVariableNames: \'\''				},				#name : #'AllergiesTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AllergiesTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Allergies',			#package : #'Exercise@Allergies',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.562736+11:00' ],		#prior : OmReference [ '526' ],		#self : OmReference [ '527' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'ExercismTest subclass: #AllergiesTest\r\tinstanceVariableNames: \'allergiesCalculator\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Allergies\'',				#superclassName : 'ExercismTest'			},			#name : #AllergiesTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #AllergiesTest,						#isMetaSide : false					},					#name : #allergiesCalculator,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'AllergiesTest class\r\tinstanceVariableNames: \'\''				},				#name : #'AllergiesTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #AllergiesTest,					#isMetaSide : false				},				#parent : @7,				#content : '# Allergies\r\rGiven a person\'s allergy score, determine whether or not they\'re allergic to a given item, and their full list of allergies.\r\rAn allergy test produces a single numeric score which contains the\rinformation about all the allergies the person has (that they were\rtested for).\r\rThe list of items (and their value) that were tested are:\r\r* eggs (1)\r* peanuts (2)\r* shellfish (4)\r* strawberries (8)\r* tomatoes (16)\r* chocolate (32)\r* pollen (64)\r* cats (128)\r\rSo if Tom is allergic to peanuts and chocolate, he gets a score of 34.\r\rNow, given just that score of 34, your program should be able to say:\r\r- Whether Tom is allergic to any one of those allergens listed above.\r- All the allergens Tom is allergic to.\r\rNote: a given score may include allergens **not** listed above (i.e.\rallergens that score 256, 512, 1024, etc.).  Your program should\rignore those components of the score.  For example, if the allergy\rscore is 257, your program should only report the eggs (1) allergy.\r\r## Hint\r\rNotice how each of the items is a power of 2, a property that you should be able to leverage.\r\r',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Allergies',			#package : #'Exercise@Allergies',			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : '# Allergies\r\rGiven a person\'s allergy score, determine whether or not they\'re allergic to a given item, and their full list of allergies.\r\rAn allergy test produces a single numeric score which contains the\rinformation about all the allergies the person has (that they were\rtested for).\r\rThe list of items (and their value) that were tested are:\r\r* eggs (1)\r* peanuts (2)\r* shellfish (4)\r* strawberries (8)\r* tomatoes (16)\r* chocolate (32)\r* pollen (64)\r* cats (128)\r\rSo if Tom is allergic to peanuts and chocolate, he gets a score of 34.\r\rNow, given just that score of 34, your program should be able to say:\r\r- Whether Tom is allergic to any one of those allergens listed above.\r- All the allergens Tom is allergic to.\r\rNote: a given score may include allergens **not** listed above (i.e.\rallergens that score 256, 512, 1024, etc.).  Your program should\rignore those components of the score.  For example, if the allergy\rscore is 257, your program should only report the eggs (1) allergy.\r\r## Hint\r\rNotice how each of the items is a power of 2, a property that you should be able to leverage.\r\r',		#oldStamp : '',		#newStamp : ''	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.659749+11:00' ],		#prior : OmReference [ '527' ],		#self : OmReference [ '528' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AllergiesTest class',				#isMetaSide : true			},			#name : #exercise,			#protocol : #config,			#sourceCode : 'exercise\r\t"Answer the configured exercise meta data for this exercise, an ExercismExercise"\r\r\t^(self createExerciseAfter: GrainsTest)\r\t\tisCore: true;\r\t\tdifficulty: 3;\r\t\ttopics: #(\'bitwise_operations\' \'filtering\');\r\t\tyourself',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.664266+11:00' ],		#prior : OmReference [ '528' ],		#self : OmReference [ '529' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AllergiesTest class',				#isMetaSide : true			},			#name : #generator,			#protocol : #generator,			#sourceCode : 'generator\r\t"Potential generator hints"\r\t\r\t^ {(\'@allergicToItem:score:\' -> #allergicToItem:forScore:).\r\t(\'@listScore:\' -> #\'allergyListForScore:\')}',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.672665+11:00' ],		#prior : OmReference [ '529' ],		#self : OmReference [ '530' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AllergiesTest class',				#isMetaSide : true			},			#name : #uuid,			#protocol : #config,			#sourceCode : 'uuid\r\t"Answer a unique id for this exercise"\r\t^\'49ae8e78-a641-0d00-ba20-5f9f04641ab1\'',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.681898+11:00' ],		#prior : OmReference [ '530' ],		#self : OmReference [ '531' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'AllergiesTest class',				#isMetaSide : true			},			#name : #version,			#protocol : #config,			#sourceCode : 'version\r\t"Generated from specification: 1 April 2019"\r\t^\'1.2.1\'',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.687084+11:00' ],		#prior : OmReference [ '531' ],		#self : OmReference [ '532' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #setUp,			#protocol : #running,			#sourceCode : 'setUp\r\tsuper setUp.\r\tallergiesCalculator := Allergies new',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.692361+11:00' ],		#prior : OmReference [ '532' ],		#self : OmReference [ '533' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test01_NoAllergiesMeansNotAllergicToPeanuts,			#protocol : #tests,			#sourceCode : 'test01_NoAllergiesMeansNotAllergicToPeanuts\r\t| result |\r\r\tresult := allergiesCalculator allergicToItem: \'peanuts\' forScore: 0 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.697185+11:00' ],		#prior : OmReference [ '533' ],		#self : OmReference [ '534' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test02_NoAllergiesMeansNotAllergicToCats,			#protocol : #tests,			#sourceCode : 'test02_NoAllergiesMeansNotAllergicToCats\r\t| result |\r\r\tresult := allergiesCalculator allergicToItem: \'cats\' forScore: 0 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.704647+11:00' ],		#prior : OmReference [ '534' ],		#self : OmReference [ '535' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test03_NoAllergiesMeansNotAllergicToStrawberries,			#protocol : #tests,			#sourceCode : 'test03_NoAllergiesMeansNotAllergicToStrawberries\r\t| result |\r\r\tresult := allergiesCalculator allergicToItem: \'strawberries\' forScore: 0 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.709446+11:00' ],		#prior : OmReference [ '535' ],		#self : OmReference [ '536' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test04_AllergicToOnlyEggs,			#protocol : #tests,			#sourceCode : 'test04_AllergicToOnlyEggs\r\t| result |\r\r\tresult := allergiesCalculator allergicToItem: \'eggs\' forScore: 1 .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.714258+11:00' ],		#prior : OmReference [ '536' ],		#self : OmReference [ '537' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test05_AllergicToEggsInAdditionToOtherStuffLikeEggsRepeated,			#protocol : #tests,			#sourceCode : 'test05_AllergicToEggsInAdditionToOtherStuffLikeEggsRepeated\r\t| result |\r\r\tresult := allergiesCalculator allergicToItem: \'eggs\' forScore: 5 .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.719013+11:00' ],		#prior : OmReference [ '537' ],		#self : OmReference [ '538' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test06_AllergicToEggsInAdditionToOtherStuffLikeShellfish,			#protocol : #tests,			#sourceCode : 'test06_AllergicToEggsInAdditionToOtherStuffLikeShellfish\r\t| result |\r\r\tresult := allergiesCalculator allergicToItem: \'shellfish\' forScore: 5 .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.726469+11:00' ],		#prior : OmReference [ '538' ],		#self : OmReference [ '539' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test07_AllergicToEggsInAdditionToOtherStuffLikeStrawberries,			#protocol : #tests,			#sourceCode : 'test07_AllergicToEggsInAdditionToOtherStuffLikeStrawberries\r\t| result |\r\r\tresult := allergiesCalculator allergicToItem: \'strawberries\' forScore: 5 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.731221+11:00' ],		#prior : OmReference [ '539' ],		#self : OmReference [ '540' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test08_AllergicToStrawberriesButNotPeanuts,			#protocol : #tests,			#sourceCode : 'test08_AllergicToStrawberriesButNotPeanuts\r\t| result |\r\r\tresult := allergiesCalculator allergicToItem: \'peanuts\' forScore: 9 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.736001+11:00' ],		#prior : OmReference [ '540' ],		#self : OmReference [ '541' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test09_AllergicToStrawberriesButNotShellfish,			#protocol : #tests,			#sourceCode : 'test09_AllergicToStrawberriesButNotShellfish\r\t| result |\r\r\tresult := allergiesCalculator allergicToItem: \'shellfish\' forScore: 9 .\r\tself assert: result equals: false',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.740841+11:00' ],		#prior : OmReference [ '541' ],		#self : OmReference [ '542' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test10_AllergicToStrawberriesAndAlsoEggs,			#protocol : #tests,			#sourceCode : 'test10_AllergicToStrawberriesAndAlsoEggs\r\t| result |\r\r\tresult := allergiesCalculator allergicToItem: \'eggs\' forScore: 9 .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.745588+11:00' ],		#prior : OmReference [ '542' ],		#self : OmReference [ '543' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test11_AllergicToStrawberriesAndAlsoStrawberriesRepeated,			#protocol : #tests,			#sourceCode : 'test11_AllergicToStrawberriesAndAlsoStrawberriesRepeated\r\t| result |\r\r\tresult := allergiesCalculator allergicToItem: \'strawberries\' forScore: 9 .\r\tself assert: result equals: true',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.754301+11:00' ],		#prior : OmReference [ '543' ],		#self : OmReference [ '544' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test12_ListWhenNoAllergies,			#protocol : #tests,			#sourceCode : 'test12_ListWhenNoAllergies\r\t| result |\r\r\tresult := allergiesCalculator allergyListForScore: 0 .\r\tself assert: result equals: #()',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.75909+11:00' ],		#prior : OmReference [ '544' ],		#self : OmReference [ '545' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test13_ListWhenJustEggs,			#protocol : #tests,			#sourceCode : 'test13_ListWhenJustEggs\r\t| result |\r\r\tresult := allergiesCalculator allergyListForScore: 1 .\r\tself assert: result equals: #(\'eggs\' )',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.763813+11:00' ],		#prior : OmReference [ '545' ],		#self : OmReference [ '546' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test14_ListWhenJustPeanuts,			#protocol : #tests,			#sourceCode : 'test14_ListWhenJustPeanuts\r\t| result |\r\r\tresult := allergiesCalculator allergyListForScore: 2 .\r\tself assert: result equals: #(\'peanuts\' )',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.768517+11:00' ],		#prior : OmReference [ '546' ],		#self : OmReference [ '547' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test15_ListWhenJustStrawberries,			#protocol : #tests,			#sourceCode : 'test15_ListWhenJustStrawberries\r\t| result |\r\r\tresult := allergiesCalculator allergyListForScore: 8 .\r\tself assert: result equals: #(\'strawberries\' )',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.775919+11:00' ],		#prior : OmReference [ '547' ],		#self : OmReference [ '548' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test16_ListWhenEggsAndPeanuts,			#protocol : #tests,			#sourceCode : 'test16_ListWhenEggsAndPeanuts\r\t| result |\r\r\tresult := allergiesCalculator allergyListForScore: 3 .\r\tself assert: result equals: #(\'eggs\' \'peanuts\' )',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.789211+11:00' ],		#prior : OmReference [ '548' ],		#self : OmReference [ '549' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test17_ListWhenMoreThanEggsButNotPeanuts,			#protocol : #tests,			#sourceCode : 'test17_ListWhenMoreThanEggsButNotPeanuts\r\t| result |\r\r\tresult := allergiesCalculator allergyListForScore: 5 .\r\tself assert: result equals: #(\'eggs\' \'shellfish\' )',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.793736+11:00' ],		#prior : OmReference [ '549' ],		#self : OmReference [ '550' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test18_ListWhenLotsOfStuff,			#protocol : #tests,			#sourceCode : 'test18_ListWhenLotsOfStuff\r\t| result |\r\r\tresult := allergiesCalculator allergyListForScore: 248 .\r\tself assert: result equals: #(\'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\' )',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.798185+11:00' ],		#prior : OmReference [ '550' ],		#self : OmReference [ '551' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test19_ListWhenEverything,			#protocol : #tests,			#sourceCode : 'test19_ListWhenEverything\r\t| result |\r\r\tresult := allergiesCalculator allergyListForScore: 255 .\r\tself assert: result equals: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\' )',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:41:34.805773+11:00' ],		#prior : OmReference [ '551' ],		#self : OmReference [ '552' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #AllergiesTest,				#isMetaSide : false			},			#name : #test20_ListWhenNoAllergenScoreParts,			#protocol : #tests,			#sourceCode : 'test20_ListWhenNoAllergenScoreParts\r\t| result |\r\r\tresult := allergiesCalculator allergyListForScore: 509 .\r\tself assert: result equals: #(\'eggs\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\' )',			#stamp : '',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:43:09.805478+11:00' ],		#prior : OmReference [ '552' ],		#self : OmReference [ '553' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Allergies\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'\'',				#superclassName : 'Object'			},			#name : #Allergies,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Allergies class\r\tinstanceVariableNames: \'\''				},				#name : #'Allergies class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Allergies,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'',			#package : #'',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:43:37.404806+11:00' ],		#prior : OmReference [ '553' ],		#self : OmReference [ '554' ]	},	#content : EpBehaviorCategoryChange {		#oldCategory : #'',		#newCategory : #'Exercise@Allergies',		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'Object subclass: #Allergies\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpackage: \'Exercise@Allergies\'',				#superclassName : 'Object'			},			#name : #Allergies,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'Allergies class\r\tinstanceVariableNames: \'\''				},				#name : #'Allergies class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #Allergies,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #'Exercise@Allergies',			#package : #'Exercise@Allergies',			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:44:34.586579+11:00' ],		#prior : OmReference [ '554' ],		#self : OmReference [ '555' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergicToItem:forScore:',			#protocol : #queries,			#sourceCode : 'allergicToItem: aString forScore: anInteger \r\tself shouldBeImplemented.',			#stamp : 'AndyMarks 12/10/2023 08:44',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:45:53.410141+11:00' ],		#prior : OmReference [ '555' ],		#self : OmReference [ '556' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergicToItem:forScore:',			#protocol : #queries,			#sourceCode : 'allergicToItem: aString forScore: anInteger \r\tself shouldBeImplemented.',			#stamp : 'AndyMarks 12/10/2023 08:44',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergicToItem:forScore:',			#protocol : #queries,			#sourceCode : 'allergicToItem: aString forScore: anInteger \r\t^False.',			#stamp : 'AndyMarks 12/10/2023 08:45',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:46:00.685089+11:00' ],		#prior : OmReference [ '556' ],		#self : OmReference [ '557' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergicToItem:forScore:',			#protocol : #queries,			#sourceCode : 'allergicToItem: aString forScore: anInteger \r\t^False.',			#stamp : 'AndyMarks 12/10/2023 08:45',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergicToItem:forScore:',			#protocol : #queries,			#sourceCode : 'allergicToItem: aString forScore: anInteger \r\t^false.',			#stamp : 'AndyMarks 12/10/2023 08:46',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:46:33.2952+11:00' ],		#prior : OmReference [ '557' ],		#self : OmReference [ '558' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: anInteger \r\tself shouldBeImplemented.',			#stamp : 'AndyMarks 12/10/2023 08:46',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:47:10.84402+11:00' ],		#prior : OmReference [ '558' ],		#self : OmReference [ '559' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: anInteger \r\tself shouldBeImplemented.',			#stamp : 'AndyMarks 12/10/2023 08:46',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: anInteger \r\t^#().',			#stamp : 'AndyMarks 12/10/2023 08:47',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:50:44.263893+11:00' ],		#prior : OmReference [ '559' ],		#self : OmReference [ '560' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergicToItem:forScore:',			#protocol : #queries,			#sourceCode : 'allergicToItem: aString forScore: anInteger \r\t^false.',			#stamp : 'AndyMarks 12/10/2023 08:46',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergicToItem:forScore:',			#protocol : #queries,			#sourceCode : 'allergicToItem: anAllergy forScore: aScore \r\t^aScore anyMask: 2.',			#stamp : 'AndyMarks 12/10/2023 08:50',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:51:18.897408+11:00' ],		#prior : OmReference [ '560' ],		#self : OmReference [ '561' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergicToItem:forScore:',			#protocol : #queries,			#sourceCode : 'allergicToItem: anAllergy forScore: aScore \r\t^aScore anyMask: 2.',			#stamp : 'AndyMarks 12/10/2023 08:50',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergicToItem:forScore:',			#protocol : #queries,			#sourceCode : 'allergicToItem: anAllergy forScore: aScore \r\t^aScore anyMask: 1.',			#stamp : 'AndyMarks 12/10/2023 08:51',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:54:34.418394+11:00' ],		#prior : OmReference [ '561' ],		#self : OmReference [ '562' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergicToItem:forScore:',			#protocol : #queries,			#sourceCode : 'allergicToItem: anAllergy forScore: aScore \r\t^aScore anyMask: 1.',			#stamp : 'AndyMarks 12/10/2023 08:51',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergicToItem:forScore:',			#protocol : #queries,			#sourceCode : 'allergicToItem: anAllergy forScore: aScore \r\t| allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') andValues: #(1 2 4 8 16 32 64 128).\r\t\r\t^aScore anyMask: 1.',			#stamp : 'AndyMarks 12/10/2023 08:54',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:55:42.570663+11:00' ],		#prior : OmReference [ '562' ],		#self : OmReference [ '563' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergicToItem:forScore:',			#protocol : #queries,			#sourceCode : 'allergicToItem: anAllergy forScore: aScore \r\t| allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') andValues: #(1 2 4 8 16 32 64 128).\r\t\r\t^aScore anyMask: 1.',			#stamp : 'AndyMarks 12/10/2023 08:54',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergicToItem:forScore:',			#protocol : #queries,			#sourceCode : 'allergicToItem: anAllergy forScore: aScore \r\t| allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') andValues: #(1 2 4 8 16 32 64 128).\r\t\r\t^aScore anyMask: (allergies at: anAllergy).',			#stamp : 'AndyMarks 12/10/2023 08:55',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T08:58:04.690771+11:00' ],		#prior : OmReference [ '563' ],		#self : OmReference [ '564' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: anInteger \r\t^#().',			#stamp : 'AndyMarks 12/10/2023 08:47',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: anInteger \r\t| allergyList |\r\t\r\tallergyList := #().\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 08:58',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T09:01:40.103033+11:00' ],		#prior : OmReference [ '564' ],		#self : OmReference [ '565' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: anInteger \r\t| allergyList |\r\t\r\tallergyList := #().\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 08:58',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: anInteger \r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') andValues: #(1 2 4 8 16 32 64 128).\r\r\t\r\tallergyList := #().\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:01',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T09:02:38.737848+11:00' ],		#prior : OmReference [ '565' ],		#self : OmReference [ '566' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: anInteger \r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') andValues: #(1 2 4 8 16 32 64 128).\r\r\t\r\tallergyList := #().\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:01',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: anInteger \r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\t\r\tallergyList := #().\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:02',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T09:06:52.487419+11:00' ],		#prior : OmReference [ '566' ],		#self : OmReference [ '567' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: anInteger \r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\t\r\tallergyList := #().\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:02',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\taScore anyMask: value\r\t\tifTrue: [ allergyList put allergy]\r\t\t].\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:06',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T09:07:32.949194+11:00' ],		#prior : OmReference [ '567' ],		#self : OmReference [ '568' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\taScore anyMask: value\r\t\tifTrue: [ allergyList put allergy]\r\t\t].\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:06',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\taScore anyMask: value\r\t\t\tifTrue: [ allergyList put allergy ]\r\t\t].\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:07',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T09:07:47.193094+11:00' ],		#prior : OmReference [ '568' ],		#self : OmReference [ '569' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\taScore anyMask: value\r\t\t\tifTrue: [ allergyList put allergy ]\r\t\t].\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:07',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList put allergy ]\r\t\t].\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:07',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T09:08:06.621333+11:00' ],		#prior : OmReference [ '569' ],		#self : OmReference [ '570' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList put allergy ]\r\t\t].\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:07',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList put allergy ]\r\t\t].\r\t\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:08',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T09:10:08.951862+11:00' ],		#prior : OmReference [ '570' ],		#self : OmReference [ '571' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList put allergy ]\r\t\t].\r\t\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:08',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList put allergy ].\r\t\t].\r\t\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:10',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T09:10:37.451483+11:00' ],		#prior : OmReference [ '571' ],		#self : OmReference [ '572' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList put allergy ].\r\t\t].\r\t\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:10',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList add: allergy ].\r\t\t].\r\t\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:10',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T09:11:07.034192+11:00' ],		#prior : OmReference [ '572' ],		#self : OmReference [ '573' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList add: allergy ].\r\t\t].\r\t\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:10',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList put: allergy ].\r\t\t].\r\t\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:11',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T09:15:05.786286+11:00' ],		#prior : OmReference [ '573' ],		#self : OmReference [ '574' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList put: allergy ].\r\t\t].\r\t\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:11',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList appendTo: allergy ].\r\t\t].\r\t\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:15',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T09:17:01.713169+11:00' ],		#prior : OmReference [ '574' ],		#self : OmReference [ '575' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := #().\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList appendTo: allergy ].\r\t\t].\r\t\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:15',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := OrderedCollection new.\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList add: allergy ].\r\t\t].\r\t\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:17',			#package : #'Exercise@Allergies'		}	}}OmEntry {	#tags : {		#author : 'AndyMarks',		#time : DateAndTime [ '2023-12-10T09:17:24.453753+11:00' ],		#prior : OmReference [ '575' ],		#self : OmReference [ '576' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := OrderedCollection new.\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList add: allergy ].\r\t\t].\r\t\r\t^allergyList .',			#stamp : 'AndyMarks 12/10/2023 09:17',			#package : #'Exercise@Allergies'		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #Allergies,				#isMetaSide : false			},			#name : #'allergyListForScore:',			#protocol : #querying,			#sourceCode : 'allergyListForScore: aScore\r\t| allergyList allergies |\r\t\r\tallergies := SmallDictionary newFromKeys: #(1 2 4 8 16 32 64 128) andValues: #(\'eggs\' \'peanuts\' \'shellfish\' \'strawberries\' \'tomatoes\' \'chocolate\' \'pollen\' \'cats\') .\r\tallergyList := OrderedCollection new.\r\tallergies keysAndValuesDo: [ :value :allergy | \r\t\t(aScore anyMask: value)\r\t\t\tifTrue: [ allergyList add: allergy ].\r\t\t].\r\t\r\t^allergyList asArray  .',			#stamp : 'AndyMarks 12/10/2023 09:17',			#package : #'Exercise@Allergies'		}	}}