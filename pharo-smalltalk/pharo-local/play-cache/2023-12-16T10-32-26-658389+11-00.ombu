OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-16T10:33:06.933929+11:00' ],		#self : OmReference [ '1' ]	},	#content : '(\'1 2 3\' findTokens: String space) at: 3.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-16T10:34:50.607151+11:00' ],		#self : OmReference [ '2' ]	},	#content : '| rows |\rrows := \'1 2 3\r4 5 6\r7 8 9\' findTokens: String cr, String lf.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-16T10:35:03.201426+11:00' ],		#self : OmReference [ '3' ]	},	#content : '| rows |\rrows := \'1 2 3\r4 5 6\r7 8 9\' findTokens: String cr, String lf.\r\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-16T10:35:29.446684+11:00' ],		#self : OmReference [ '4' ]	},	#content : '| rows  column |\rrows := \'1 2 3\r4 5 6\r7 8 9\' findTokens: String cr, String lf.\r\rcolumn := rows do: [ :row | (row findTokens: String space) at: 2  ].\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-16T10:35:56.297834+11:00' ],		#self : OmReference [ '5' ]	},	#content : '| rows  column |\rrows := \'1 2 3\r4 5 6\r7 8 9\' findTokens: String cr, String lf.\r\rcolumn := rows do: [ :row | (row findTokens: String space) at: 2  ].\r\rcolumn asArray.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-16T10:36:18.489387+11:00' ],		#self : OmReference [ '6' ]	},	#content : '| rows  column |\rrows := \'1 2 3 4\r4 5 6 7\r7 8 9 0\' findTokens: String cr, String lf.\r\rcolumn := rows do: [ :row | (row findTokens: String space) at: 2  ].\r\rcolumn asArray.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-16T10:36:42.286518+11:00' ],		#self : OmReference [ '7' ]	},	#content : '| rows  column |\rrows := \'1 2 3 4\r4 5 6 7\r7 8 9 0\' findTokens: String cr, String lf.\r\rcolumn := rows do: [ :row | ((row findTokens: String space) at: 2) asInteger  ].\r\rcolumn asArray.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-16T10:38:17.600163+11:00' ],		#self : OmReference [ '8' ]	},	#content : '| rows  column |\rrows := \'1 2 3 4\r4 5 6 7\r7 8 9 0\' findTokens: String cr, String lf.\r\rcolumn := rows do: [ :row | ((row findTokens: Character space) at: 2) asInteger  ].\r\rcolumn asArray.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-16T10:39:52.98691+11:00' ],		#self : OmReference [ '9' ]	},	#content : '| rows  column |\rrows := \'1 2 3 4\r4 5 6 7\r7 8 9 0\' findTokens: String cr, String lf.\r\rrows asArray.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-16T10:40:59.337994+11:00' ],		#self : OmReference [ '10' ]	},	#content : '| rows  column |\rrows := \'1 2 3 4\r4 5 6 7\r7 8 9 0\' findTokens: String cr, String lf.\r\rcolumn := rows collect: [ :row | ((row findTokens: String space) at: 2) asInteger  ].\rcolumn asArray.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:07:07.94281+11:00' ],		#self : OmReference [ '11' ]	},	#content : '\'1 2 3 4 5\' findTokens: Character space\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:09:49.040051+11:00' ],		#self : OmReference [ '12' ]	},	#content : '\r\'1\' isNumber: 1 inspect.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:10:37.671059+11:00' ],		#self : OmReference [ '13' ]	},	#content : '\'1 2 3 4 5\' splitOn: Character space.\r\r\'1\' isNumber: 1 inspect.'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:11:24.173199+11:00' ],		#self : OmReference [ '14' ]	},	#content : '\'1 2 3 4 5\' splitOn: (Character space) do: [ :char |\r\tchar inspect ].\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:12:47.442516+11:00' ],		#self : OmReference [ '15' ]	},	#content : '\'1 2 3 4 5\' splitOn: (Character space) do: [ :char |\r\tNumberParser isNumber: char ].\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:14:50.961746+11:00' ],		#self : OmReference [ '16' ]	},	#content : '\'1 2 3 4 5\' splitOn: (Character space) do: [ :char |\r\tNumberParser isNumber: char \r\tisTrue: char inspect].\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:15:11.425288+11:00' ],		#self : OmReference [ '17' ]	},	#content : '\'1 2 3 4 5\' splitOn: (Character space) do: [ :char |\r\t(NumberParser isNumber: char )\r\tisTrue: char inspect].\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:16:57.267543+11:00' ],		#self : OmReference [ '18' ]	},	#content : '| isNumericElement |\r\'1 2 3 4 5\' splitOn: (Character space) do: [ :char |\r\t\r\tisNumericElement := NumberParser isNumber: char.\r\tisNumericElement ifTrue: char inspect].\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:17:09.053172+11:00' ],		#self : OmReference [ '19' ]	},	#content : '| isNumericElement |\r\'1 2 3 4 a 5\' splitOn: (Character space) do: [ :char |\r\t\r\tisNumericElement := NumberParser isNumber: char.\r\tisNumericElement ifTrue: char inspect].\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:17:35.608038+11:00' ],		#self : OmReference [ '20' ]	},	#content : '| isNumericElement |\r\'1 2 3 4 a 5\' splitOn: (Character space) do: [ :char |\r\t\r\tisNumericElement := NumberParser isNumber: char.\r\tisNumericElement ifTrue: char inspect\r\t].\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:17:49.760018+11:00' ],		#self : OmReference [ '21' ]	},	#content : '| isNumericElement |\r\'1 2 3 4 a 5\' splitOn: (Character space) do: [ :char |\r\t\r\tisNumericElement := NumberParser isNumber: char.\r\tisNumericElement ifTrue: char inspect.\r\t].\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:18:17.801566+11:00' ],		#self : OmReference [ '22' ]	},	#content : '| isNumericElement |\r\'1 2 3 4 a 5\' splitOn: (Character space) do: [ :char |\r\t\r\tisNumericElement := NumberParser isNumber: char.\r\tisNumericElement ifTrue: isNumericElement.\r\t].\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:18:25.184623+11:00' ],		#self : OmReference [ '23' ]	},	#content : '| isNumericElement |\r\'1 2 3 4 a 5\' splitOn: (Character space) do: [ :char |\r\t\r\tisNumericElement := NumberParser isNumber: char.\r\tisNumericElement ifTrue: isNumericElement inspect.\r\t].\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:18:55.251024+11:00' ],		#self : OmReference [ '24' ]	},	#content : '| isNumericElement |\r\'1 2 3 4 a 5\' splitOn: (Character space) do: [ :char |\r\t\r\tisNumericElement := NumberParser isNumber: char.\r\tisNumericElement ifTrue: [isNumericElement inspect].\r\t].\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-18T20:19:08.101933+11:00' ],		#self : OmReference [ '25' ]	},	#content : '| isNumericElement |\r\'1 2 3 4 a 5\' splitOn: (Character space) do: [ :char |\r\t\r\tisNumericElement := NumberParser isNumber: char.\r\tisNumericElement ifTrue: [char inspect].\r\t].\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-19T18:59:12.602782+11:00' ],		#self : OmReference [ '26' ]	},	#content : '\': dup-twice dup dup ;\' matchesRegex: \': .* .* ;\'\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-19T18:59:25.100578+11:00' ],		#self : OmReference [ '27' ]	},	#content : '\'\\: dup-twice dup dup ;\' matchesRegex: \': .* .* ;\'\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-19T19:00:08.291827+11:00' ],		#self : OmReference [ '28' ]	},	#content : '\':dup-twice dup dup ;\' matchesRegex: \'\\: .* .* ;\'\r\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:30:43.250326+11:00' ],		#self : OmReference [ '29' ]	},	#content : '\':dup-twice dup dup ;\' matchesRegex: \'\\: .* .* ;\'\r\r|\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:31:02.831987+11:00' ],		#self : OmReference [ '30' ]	},	#content : '\':dup-twice dup dup ;\' matchesRegex: \'\\: .* .* ;\'\r\r| command |\rcommand := \'(\\:\\s+(\\w+)\\s+(\\w+)\\s+;\' asRegex.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:31:18.144544+11:00' ],		#self : OmReference [ '31' ]	},	#content : '| command |\rcommand := \'(\\:\\s+(\\w+)\\s+(\\w+)\\s+;\' asRegex.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:31:49.950126+11:00' ],		#self : OmReference [ '32' ]	},	#content : '| command |\rcommand := \'(\\:\\s+(\\w+)\\s+(\\w+)\\s+;)\' asRegex.\r\rcommand search: \r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:32:30.991797+11:00' ],		#self : OmReference [ '33' ]	},	#content : '| command |\rcommand := \'(\\:\\s+(\\w+)\\s+(\\w+)\\s+;)\' asRegex.\r\rcommand search: \': dup-twice dup dup ;\'.\r\rcommand inspect.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:33:03.380723+11:00' ],		#self : OmReference [ '34' ]	},	#content : '| command |\rcommand := \'(\\:\\s+(\\w+)\\s+(\\w+)\\s+;)\' asRegex.\r\rcommand search: \': dup-twice dup dup ;\'.\r\rcommand subexpressionCount inspect.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:33:56.24562+11:00' ],		#self : OmReference [ '35' ]	},	#content : '| command |\rcommand := \'(\\:\\s+(\\w+)\\s+(\\w+)\\s+;)\' asRegex.\r\rcommand search: \': dup-twice dup dup ;\'.\r\rcommand subexpression: 2.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:37:41.350109+11:00' ],		#self : OmReference [ '36' ]	},	#content : '| command |\rcommand := \'(\\:\\s+(.+)\\s+(.+)\\s+;)\' asRegex.\r\rcommand search: \': dup-twice dup dup ;\'.\r\rcommand subexpression: 3.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:38:18.514338+11:00' ],		#self : OmReference [ '37' ]	},	#content : '| command |\rcommand := \'(\\:\\s+(.+)\\s+(.+)\\s+;)\' asRegex.\r\rcommand search: \': dup-twice dup dup ;\'.\r\rcommand subexpression: 5.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:39:06.241793+11:00' ],		#self : OmReference [ '38' ]	},	#content : '| command |\rcommand := \'(\\:\\s+(.+)\\s+(.+)\\s+;)\' asRegex.\r\rcommand search: \': dup-twice dup dup ;\'.\r\rcommand subexpression: 2.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:39:35.226818+11:00' ],		#self : OmReference [ '39' ]	},	#content : '| command |\rcommand := \'(\\:\\s+(.+)\\s+(.+)\\s+;)\' asRegex.\r\rcommand search: \': dup-twice dup dup ;\'.\r\rcommand subexpression: 3.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:40:26.961977+11:00' ],		#self : OmReference [ '40' ]	},	#content : '| command |\rcommand := \'(\\:\\s+(.+)\\s+(.+);)\' asRegex.\r\rcommand search: \': dup-twice dup dup ;\'.\r\rcommand subexpression: 4.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:42:03.464987+11:00' ],		#self : OmReference [ '41' ]	},	#content : '| command |\rcommand := \'(\\:\\s+(.+)\\s+(.+);)\' asRegex.\r\rcommand matchesIn: \': dup-twice dup dup ;\'.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:49:54.930051+11:00' ],		#self : OmReference [ '42' ]	},	#content : '| command |\rcommand := \'[\\w\\-]+\' asRegex.\r\rcommand matchesIn: \': dup-twice dup dup ;\'.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:50:26.959329+11:00' ],		#self : OmReference [ '43' ]	},	#content : '| command |\rcommand := \'[\\w\\-]+\' asRegex.\r\rcommand matchesIn: \': dup-twice dup dup ;\'.\rcommand matchesIn: \': countup 1 2 3 ;\'.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-20T19:50:50.898658+11:00' ],		#self : OmReference [ '44' ]	},	#content : '| command |\rcommand := \'[\\w\\-]+\' asRegex.\r\rcommand matchesIn: \': dup-twice dup dup ;\'.\rcommand matchesIn: \': countup 1 2 3 ;\'.\rcommand matchesIn: \': foo dup ;\'.\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-23T08:46:32.155912+11:00' ],		#self : OmReference [ '45' ]	},	#content : '| command |\rcommand := \'[\\w\\-]+\' asRegex.\r\rcommand matchesIn: \': dup-twice dup dup ;\'.\r"command matchesIn: \': countup 1 2 3 ;\'."\r"command matchesIn: \': foo dup ;\'."\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-23T08:47:47.642713+11:00' ],		#self : OmReference [ '46' ]	},	#content : '| command |\rcommand := \'([\\w\\-]+)\\s([\\w\\s]+)\' asRegex.\r\rcommand matchesIn: \': dup-twice dup dup ;\'.\r"command matchesIn: \': countup 1 2 3 ;\'."\r"command matchesIn: \': foo dup ;\'."\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-23T08:48:27.874442+11:00' ],		#self : OmReference [ '47' ]	},	#content : '| command |\rcommand := \'([\\w\\-]+)\\s([\\w\\s]+)\' asRegex.\r\rcommand search: \': dup-twice dup dup ;\'.\rcommand subexpression: 1.\r"command matchesIn: \': countup 1 2 3 ;\'."\r"command matchesIn: \': foo dup ;\'."\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-23T08:48:57.39489+11:00' ],		#self : OmReference [ '48' ]	},	#content : '| command |\rcommand := \'([\\w\\-]+)\\s([\\w\\s]+)\' asRegex.\r\rcommand search: \': dup-twice dup dup ;\'.\rcommand subexpression: 2.\rcommand subexpression: 3.\r"command matchesIn: \': countup 1 2 3 ;\'."\r"command matchesIn: \': foo dup ;\'."\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-23T08:49:09.124748+11:00' ],		#self : OmReference [ '49' ]	},	#content : '| command |\rcommand := \'([\\w\\-]+)\\s([\\w\\s]+)\' asRegex.\r\rcommand search: \': countup 1 2 3 ;\'.\rcommand subexpression: 2.\rcommand subexpression: 3.\r"command matchesIn: \': countup 1 2 3 ;\'."\r"command matchesIn: \': foo dup ;\'."\r'}OmEntry {	#tags : {		#timestamp : DateAndTime [ '2023-12-23T08:49:21.01282+11:00' ],		#self : OmReference [ '50' ]	},	#content : '| command |\rcommand := \'([\\w\\-]+)\\s([\\w\\s]+)\' asRegex.\r\rcommand search: \': foo dup ;\'.\rcommand subexpression: 2.\rcommand subexpression: 3.\r"command matchesIn: \': countup 1 2 3 ;\'."\r"command matchesIn: \': foo dup ;\'."\r'}